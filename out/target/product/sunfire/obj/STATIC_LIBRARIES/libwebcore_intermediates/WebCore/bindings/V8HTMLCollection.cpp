/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8Collection.h"
#include "V8HTMLCollection.h"
#include "V8Node.h"

namespace WebCore {
namespace HTMLCollectionInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLCollection.length._get");
    HTMLCollection* imp = V8HTMLCollection::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->length());
  }

} // namespace HTMLCollectionInternal

static const BatchedAttribute HTMLCollection_attrs[] = {
    {
        // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
        "length",
        HTMLCollectionInternal::lengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback HTMLCollection_callbacks[] = {
  {"item", V8HTMLCollection::itemCallback},
  {"namedItem", V8HTMLCollection::namedItemCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLCollectionTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLCollection",
      v8::Persistent<v8::FunctionTemplate>(), V8HTMLCollection::internalFieldCount,
      HTMLCollection_attrs, sizeof(HTMLCollection_attrs)/sizeof(*HTMLCollection_attrs),
      HTMLCollection_callbacks, sizeof(HTMLCollection_callbacks)/sizeof(*HTMLCollection_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  setCollectionIndexedGetter<HTMLCollection, Node>(desc, V8ClassIndex::NODE);
  desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLCollection::namedPropertyGetter, 0, 0, 0, 0);
  desc->InstanceTemplate()->SetCallAsFunctionHandler(V8HTMLCollection::callAsFunctionCallback);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLCollection::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLCollection_raw_cache_ = createRawTemplate();
  return V8HTMLCollection_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLCollection::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLCollection_cache_ = ConfigureV8HTMLCollectionTemplate(GetRawTemplate());
  return V8HTMLCollection_cache_;
}

HTMLCollection* V8HTMLCollection::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLCollection*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLCollection::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLCollection::wrap(HTMLCollection* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLCOLLECTION, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLCollection > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8HTMLTableCaptionElement.h"
#include "V8HTMLTableElement.h"
#include "V8HTMLTableSectionElement.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace HTMLTableElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> captionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.caption._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8(imp->caption());
  }

  static void captionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.caption._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    HTMLTableCaptionElement* v = V8HTMLTableCaptionElement::HasInstance(value) ? V8HTMLTableCaptionElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setCaption(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> tHeadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.tHead._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8(imp->tHead());
  }

  static void tHeadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.tHead._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    HTMLTableSectionElement* v = V8HTMLTableSectionElement::HasInstance(value) ? V8HTMLTableSectionElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setTHead(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> tFootAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.tFoot._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8(imp->tFoot());
  }

  static void tFootAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.tFoot._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    HTMLTableSectionElement* v = V8HTMLTableSectionElement::HasInstance(value) ? V8HTMLTableSectionElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setTFoot(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> rowsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.rows._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8(imp->rows());
  }

  static v8::Handle<v8::Value> tBodiesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.tBodies._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return toV8(imp->tBodies());
  }

  static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.align._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->align());
  }

  static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.align._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAlign(v);
    return;
  }

  static v8::Handle<v8::Value> bgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.bgColor._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->bgColor());
  }

  static void bgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.bgColor._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setBgColor(v);
    return;
  }

  static v8::Handle<v8::Value> borderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.border._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->border());
  }

  static void borderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.border._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setBorder(v);
    return;
  }

  static v8::Handle<v8::Value> cellPaddingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.cellPadding._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->cellPadding());
  }

  static void cellPaddingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.cellPadding._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setCellPadding(v);
    return;
  }

  static v8::Handle<v8::Value> cellSpacingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.cellSpacing._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->cellSpacing());
  }

  static void cellSpacingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.cellSpacing._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setCellSpacing(v);
    return;
  }

  static v8::Handle<v8::Value> frameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.frame._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->frame());
  }

  static void frameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.frame._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setFrame(v);
    return;
  }

  static v8::Handle<v8::Value> rulesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.rules._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->rules());
  }

  static void rulesAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.rules._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setRules(v);
    return;
  }

  static v8::Handle<v8::Value> summaryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.summary._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->summary());
  }

  static void summaryAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.summary._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setSummary(v);
    return;
  }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.width._get");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    return v8String(imp->width());
  }

  static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableElement.width._set");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setWidth(v);
    return;
  }

  static v8::Handle<v8::Value> createTHeadCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.createTHead");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    return toV8(imp->createTHead());
  }

  static v8::Handle<v8::Value> deleteTHeadCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.deleteTHead");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    imp->deleteTHead();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createTFootCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.createTFoot");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    return toV8(imp->createTFoot());
  }

  static v8::Handle<v8::Value> deleteTFootCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.deleteTFoot");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    imp->deleteTFoot();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createCaptionCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.createCaption");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    return toV8(imp->createCaption());
  }

  static v8::Handle<v8::Value> deleteCaptionCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.deleteCaption");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    imp->deleteCaption();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> insertRowCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.insertRow");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int index = toInt32(args[0]);
    RefPtr<HTMLElement> result = imp->insertRow(index, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteRowCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLTableElement.deleteRow");
    HTMLTableElement* imp = V8HTMLTableElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int index = toInt32(args[0]);
    imp->deleteRow(index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace HTMLTableElementInternal

static const BatchedAttribute HTMLTableElement_attrs[] = {
    {
        // Attribute 'caption' (Type: 'attribute' ExtAttr: '')
        "caption",
        HTMLTableElementInternal::captionAttrGetter,
        HTMLTableElementInternal::captionAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'tHead' (Type: 'attribute' ExtAttr: '')
        "tHead",
        HTMLTableElementInternal::tHeadAttrGetter,
        HTMLTableElementInternal::tHeadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'tFoot' (Type: 'attribute' ExtAttr: '')
        "tFoot",
        HTMLTableElementInternal::tFootAttrGetter,
        HTMLTableElementInternal::tFootAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rows' (Type: 'readonly attribute' ExtAttr: '')
        "rows",
        HTMLTableElementInternal::rowsAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'tBodies' (Type: 'readonly attribute' ExtAttr: '')
        "tBodies",
        HTMLTableElementInternal::tBodiesAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'align' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "align",
        HTMLTableElementInternal::alignAttrGetter,
        HTMLTableElementInternal::alignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'bgColor' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "bgColor",
        HTMLTableElementInternal::bgColorAttrGetter,
        HTMLTableElementInternal::bgColorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'border' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "border",
        HTMLTableElementInternal::borderAttrGetter,
        HTMLTableElementInternal::borderAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'cellPadding' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "cellPadding",
        HTMLTableElementInternal::cellPaddingAttrGetter,
        HTMLTableElementInternal::cellPaddingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'cellSpacing' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "cellSpacing",
        HTMLTableElementInternal::cellSpacingAttrGetter,
        HTMLTableElementInternal::cellSpacingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'frame' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "frame",
        HTMLTableElementInternal::frameAttrGetter,
        HTMLTableElementInternal::frameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rules' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "rules",
        HTMLTableElementInternal::rulesAttrGetter,
        HTMLTableElementInternal::rulesAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'summary' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "summary",
        HTMLTableElementInternal::summaryAttrGetter,
        HTMLTableElementInternal::summaryAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'width' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "width",
        HTMLTableElementInternal::widthAttrGetter,
        HTMLTableElementInternal::widthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback HTMLTableElement_callbacks[] = {
  {"createTHead", HTMLTableElementInternal::createTHeadCallback},
  {"deleteTHead", HTMLTableElementInternal::deleteTHeadCallback},
  {"createTFoot", HTMLTableElementInternal::createTFootCallback},
  {"deleteTFoot", HTMLTableElementInternal::deleteTFootCallback},
  {"createCaption", HTMLTableElementInternal::createCaptionCallback},
  {"deleteCaption", HTMLTableElementInternal::deleteCaptionCallback},
  {"insertRow", HTMLTableElementInternal::insertRowCallback},
  {"deleteRow", HTMLTableElementInternal::deleteRowCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLTableElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLTableElement",
      V8HTMLElement::GetTemplate(), V8HTMLTableElement::internalFieldCount,
      HTMLTableElement_attrs, sizeof(HTMLTableElement_attrs)/sizeof(*HTMLTableElement_attrs),
      HTMLTableElement_callbacks, sizeof(HTMLTableElement_callbacks)/sizeof(*HTMLTableElement_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLTableElement_raw_cache_ = createRawTemplate();
  return V8HTMLTableElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLTableElement_cache_ = ConfigureV8HTMLTableElementTemplate(GetRawTemplate());
  return V8HTMLTableElement_cache_;
}

HTMLTableElement* V8HTMLTableElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLTableElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLTableElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLTableElement::wrap(HTMLTableElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLTABLEELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLTableElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLTableElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLTableElement::wrap(impl);
}
} // namespace WebCore

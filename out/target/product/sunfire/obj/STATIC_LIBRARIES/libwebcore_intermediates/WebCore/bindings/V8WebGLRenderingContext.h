/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#if ENABLE(3D_CANVAS)


#ifndef V8WebGLRenderingContext_H
#define V8WebGLRenderingContext_H

#include <v8.h>
#include <wtf/HashMap.h>
#include "StringHash.h"
#include "V8Index.h"
#include "WebGLRenderingContext.h"

namespace WebCore {

class V8WebGLRenderingContext {

 public:
  static bool HasInstance(v8::Handle<v8::Value> value);
  static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
  static v8::Persistent<v8::FunctionTemplate> GetTemplate();
  static WebGLRenderingContext* toNative(v8::Handle<v8::Object>);
  static v8::Handle<v8::Object> wrap(WebGLRenderingContext*);
  static v8::Handle<v8::Value> sizeInBytesCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> activeTextureCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> attachShaderCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bindAttribLocationCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bindBufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bindFramebufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bindRenderbufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bindTextureCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> blendColorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> blendEquationCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> blendEquationSeparateCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> blendFuncCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> blendFuncSeparateCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bufferDataCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bufferSubDataCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> checkFramebufferStatusCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearColorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearDepthCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearStencilCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> colorMaskCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> compileShaderCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> copyTexImage2DCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> copyTexSubImage2DCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createBufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createFramebufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createProgramCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createRenderbufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createShaderCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createTextureCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> cullFaceCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> deleteBufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> deleteFramebufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> deleteProgramCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> deleteRenderbufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> deleteShaderCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> deleteTextureCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> depthFuncCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> depthMaskCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> depthRangeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> detachShaderCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> disableCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> disableVertexAttribArrayCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> drawArraysCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> drawElementsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> enableCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> enableVertexAttribArrayCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> finishCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> flushCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> framebufferRenderbufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> framebufferTexture2DCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> frontFaceCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> generateMipmapCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getActiveAttribCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getActiveUniformCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getAttribLocationCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getBufferParameterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getContextAttributesCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getErrorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getFramebufferAttachmentParameterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getParameterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getProgramParameterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getProgramInfoLogCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getRenderbufferParameterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getShaderParameterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getShaderInfoLogCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getShaderSourceCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getStringCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getTexParameterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getUniformCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getUniformLocationCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getVertexAttribCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getVertexAttribOffsetCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> hintCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isBufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isEnabledCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isFramebufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isProgramCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isRenderbufferCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isShaderCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isTextureCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> lineWidthCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> linkProgramCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> pixelStoreiCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> polygonOffsetCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> readPixelsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> releaseShaderCompilerCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> renderbufferStorageCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> sampleCoverageCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scissorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> shaderSourceCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> stencilFuncCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> stencilFuncSeparateCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> stencilMaskCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> stencilMaskSeparateCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> stencilOpCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> stencilOpSeparateCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> texParameterfCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> texParameteriCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> texImage2DCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> texSubImage2DCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform1fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform1fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform1iCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform1ivCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform2fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform2fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform2iCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform2ivCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform3fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform3fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform3iCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform3ivCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform4fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform4fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform4iCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniform4ivCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniformMatrix2fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniformMatrix3fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> uniformMatrix4fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> useProgramCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> validateProgramCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib1fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib1fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib2fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib2fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib3fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib3fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib4fCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttrib4fvCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> vertexAttribPointerCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> viewportCallback(const v8::Arguments&);
  static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 0;
};

  v8::Handle<v8::Value> toV8(WebGLRenderingContext*);
  v8::Handle<v8::Value> toV8(PassRefPtr<WebGLRenderingContext >);
}

#endif // V8WebGLRenderingContext_H
#endif // ENABLE(3D_CANVAS)


/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8DOMWindow.h"
#include "V8KeyboardEvent.h"
#include "V8UIEvent.h"

namespace WebCore {
namespace KeyboardEventInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> keyIdentifierAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.KeyboardEvent.keyIdentifier._get");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(info.Holder());
    return v8String(imp->keyIdentifier());
  }

  static v8::Handle<v8::Value> keyLocationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.KeyboardEvent.keyLocation._get");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->keyLocation());
  }

  static v8::Handle<v8::Value> ctrlKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.KeyboardEvent.ctrlKey._get");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(info.Holder());
    return v8Boolean(imp->ctrlKey());
  }

  static v8::Handle<v8::Value> shiftKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.KeyboardEvent.shiftKey._get");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(info.Holder());
    return v8Boolean(imp->shiftKey());
  }

  static v8::Handle<v8::Value> altKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.KeyboardEvent.altKey._get");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(info.Holder());
    return v8Boolean(imp->altKey());
  }

  static v8::Handle<v8::Value> metaKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.KeyboardEvent.metaKey._get");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(info.Holder());
    return v8Boolean(imp->metaKey());
  }

  static v8::Handle<v8::Value> altGraphKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.KeyboardEvent.altGraphKey._get");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(info.Holder());
    return v8Boolean(imp->altGraphKey());
  }

  static v8::Handle<v8::Value> initKeyboardEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.KeyboardEvent.initKeyboardEvent");
    KeyboardEvent* imp = V8KeyboardEvent::toNative(args.Holder());
    V8Parameter<> type = args[0];
    bool canBubble = args[1]->BooleanValue();
    bool cancelable = args[2]->BooleanValue();
    DOMWindow* view = V8DOMWindow::HasInstance(args[3]) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(args[3])) : 0;
    V8Parameter<> keyIdentifier = args[4];
    unsigned keyLocation = toInt32(args[5]);
    bool ctrlKey = args[6]->BooleanValue();
    bool altKey = args[7]->BooleanValue();
    bool shiftKey = args[8]->BooleanValue();
    bool metaKey = args[9]->BooleanValue();
    bool altGraphKey = args[10]->BooleanValue();
    imp->initKeyboardEvent(type, canBubble, cancelable, view, keyIdentifier, keyLocation, ctrlKey, altKey, shiftKey, metaKey, altGraphKey);
    return v8::Handle<v8::Value>();
  }

} // namespace KeyboardEventInternal

static const BatchedAttribute KeyboardEvent_attrs[] = {
    {
        // Attribute 'keyIdentifier' (Type: 'readonly attribute' ExtAttr: '')
        "keyIdentifier",
        KeyboardEventInternal::keyIdentifierAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'keyLocation' (Type: 'readonly attribute' ExtAttr: '')
        "keyLocation",
        KeyboardEventInternal::keyLocationAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'ctrlKey' (Type: 'readonly attribute' ExtAttr: '')
        "ctrlKey",
        KeyboardEventInternal::ctrlKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'shiftKey' (Type: 'readonly attribute' ExtAttr: '')
        "shiftKey",
        KeyboardEventInternal::shiftKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'altKey' (Type: 'readonly attribute' ExtAttr: '')
        "altKey",
        KeyboardEventInternal::altKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'metaKey' (Type: 'readonly attribute' ExtAttr: '')
        "metaKey",
        KeyboardEventInternal::metaKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'altGraphKey' (Type: 'readonly attribute' ExtAttr: '')
        "altGraphKey",
        KeyboardEventInternal::altGraphKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8KeyboardEventTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "KeyboardEvent",
      V8UIEvent::GetTemplate(), V8KeyboardEvent::internalFieldCount,
      KeyboardEvent_attrs, sizeof(KeyboardEvent_attrs)/sizeof(*KeyboardEvent_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'initKeyboardEvent'
  const int initKeyboardEvent_argc = 11;
  v8::Handle<v8::FunctionTemplate> initKeyboardEvent_argv[initKeyboardEvent_argc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> initKeyboardEvent_signature = v8::Signature::New(desc, initKeyboardEvent_argc, initKeyboardEvent_argv);
  proto->Set(v8::String::New("initKeyboardEvent"), v8::FunctionTemplate::New(KeyboardEventInternal::initKeyboardEventCallback, v8::Handle<v8::Value>(), initKeyboardEvent_signature));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8KeyboardEvent::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8KeyboardEvent_raw_cache_ = createRawTemplate();
  return V8KeyboardEvent_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8KeyboardEvent::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8KeyboardEvent_cache_ = ConfigureV8KeyboardEventTemplate(GetRawTemplate());
  return V8KeyboardEvent_cache_;
}

KeyboardEvent* V8KeyboardEvent::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<KeyboardEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8KeyboardEvent::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8KeyboardEvent::wrap(KeyboardEvent* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::KEYBOARDEVENT, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<KeyboardEvent > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(KeyboardEvent* impl) {
  if (!impl)
    return v8::Null();
  return V8KeyboardEvent::wrap(impl);
}
} // namespace WebCore

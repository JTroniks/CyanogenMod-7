/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "EventTarget.h"
#include "V8Event.h"

namespace WebCore {
namespace EventInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.type._get");
    Event* imp = V8Event::toNative(info.Holder());
    return v8String(imp->type());
  }

  static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.target._get");
    Event* imp = V8Event::toNative(info.Holder());
    return V8DOMWrapper::convertEventTargetToV8Object(imp->target());
  }

  static v8::Handle<v8::Value> currentTargetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.currentTarget._get");
    Event* imp = V8Event::toNative(info.Holder());
    return V8DOMWrapper::convertEventTargetToV8Object(imp->currentTarget());
  }

  static v8::Handle<v8::Value> eventPhaseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.eventPhase._get");
    Event* imp = V8Event::toNative(info.Holder());
    return v8::Integer::New(imp->eventPhase());
  }

  static v8::Handle<v8::Value> bubblesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.bubbles._get");
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->bubbles());
  }

  static v8::Handle<v8::Value> cancelableAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.cancelable._get");
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->cancelable());
  }

  static v8::Handle<v8::Value> timeStampAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.timeStamp._get");
    Event* imp = V8Event::toNative(info.Holder());
    return v8::Date::New(static_cast<double>(imp->timeStamp()));
  }

  static v8::Handle<v8::Value> srcElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.srcElement._get");
    Event* imp = V8Event::toNative(info.Holder());
    return V8DOMWrapper::convertEventTargetToV8Object(imp->srcElement());
  }

  static v8::Handle<v8::Value> returnValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.returnValue._get");
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->returnValue());
  }

  static void returnValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.returnValue._set");
    Event* imp = V8Event::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setReturnValue(v);
    return;
  }

  static v8::Handle<v8::Value> cancelBubbleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.cancelBubble._get");
    Event* imp = V8Event::toNative(info.Holder());
    return v8Boolean(imp->cancelBubble());
  }

  static void cancelBubbleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Event.cancelBubble._set");
    Event* imp = V8Event::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setCancelBubble(v);
    return;
  }

  static v8::Handle<v8::Value> stopPropagationCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Event.stopPropagation");
    Event* imp = V8Event::toNative(args.Holder());
    imp->stopPropagation();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> preventDefaultCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Event.preventDefault");
    Event* imp = V8Event::toNative(args.Holder());
    imp->preventDefault();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> initEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Event.initEvent");
    Event* imp = V8Event::toNative(args.Holder());
    V8Parameter<> eventTypeArg = args[0];
    bool canBubbleArg = args[1]->BooleanValue();
    bool cancelableArg = args[2]->BooleanValue();
    imp->initEvent(eventTypeArg, canBubbleArg, cancelableArg);
    return v8::Handle<v8::Value>();
  }

} // namespace EventInternal

static const BatchedAttribute Event_attrs[] = {
    {
        // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
        "type",
        EventInternal::typeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'target' (Type: 'readonly attribute' ExtAttr: '')
        "target",
        EventInternal::targetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'currentTarget' (Type: 'readonly attribute' ExtAttr: '')
        "currentTarget",
        EventInternal::currentTargetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'eventPhase' (Type: 'readonly attribute' ExtAttr: '')
        "eventPhase",
        EventInternal::eventPhaseAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'bubbles' (Type: 'readonly attribute' ExtAttr: '')
        "bubbles",
        EventInternal::bubblesAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'cancelable' (Type: 'readonly attribute' ExtAttr: '')
        "cancelable",
        EventInternal::cancelableAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'timeStamp' (Type: 'readonly attribute' ExtAttr: '')
        "timeStamp",
        EventInternal::timeStampAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'srcElement' (Type: 'readonly attribute' ExtAttr: '')
        "srcElement",
        EventInternal::srcElementAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'returnValue' (Type: 'attribute' ExtAttr: '')
        "returnValue",
        EventInternal::returnValueAttrGetter,
        EventInternal::returnValueAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'cancelBubble' (Type: 'attribute' ExtAttr: '')
        "cancelBubble",
        EventInternal::cancelBubbleAttrGetter,
        EventInternal::cancelBubbleAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clipboardData' (Type: 'readonly attribute' ExtAttr: 'Custom')
        "clipboardData",
        V8Event::clipboardDataAccessorGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback Event_callbacks[] = {
  {"stopPropagation", EventInternal::stopPropagationCallback},
  {"preventDefault", EventInternal::preventDefaultCallback},
  {"initEvent", EventInternal::initEventCallback},
};
static const BatchedConstant Event_consts[] = {
  { "CAPTURING_PHASE", static_cast<signed int>(1) },
  { "AT_TARGET", static_cast<signed int>(2) },
  { "BUBBLING_PHASE", static_cast<signed int>(3) },
  { "MOUSEDOWN", static_cast<signed int>(1) },
  { "MOUSEUP", static_cast<signed int>(2) },
  { "MOUSEOVER", static_cast<signed int>(4) },
  { "MOUSEOUT", static_cast<signed int>(8) },
  { "MOUSEMOVE", static_cast<signed int>(16) },
  { "MOUSEDRAG", static_cast<signed int>(32) },
  { "CLICK", static_cast<signed int>(64) },
  { "DBLCLICK", static_cast<signed int>(128) },
  { "KEYDOWN", static_cast<signed int>(256) },
  { "KEYUP", static_cast<signed int>(512) },
  { "KEYPRESS", static_cast<signed int>(1024) },
  { "DRAGDROP", static_cast<signed int>(2048) },
  { "FOCUS", static_cast<signed int>(4096) },
  { "BLUR", static_cast<signed int>(8192) },
  { "SELECT", static_cast<signed int>(16384) },
  { "CHANGE", static_cast<signed int>(32768) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8EventTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "Event",
      v8::Persistent<v8::FunctionTemplate>(), V8Event::internalFieldCount,
      Event_attrs, sizeof(Event_attrs)/sizeof(*Event_attrs),
      Event_callbacks, sizeof(Event_callbacks)/sizeof(*Event_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  batchConfigureConstants(desc, proto, Event_consts, sizeof(Event_consts)/sizeof(*Event_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Event::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Event_raw_cache_ = createRawTemplate();
  return V8Event_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8Event::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Event_cache_ = ConfigureV8EventTemplate(GetRawTemplate());
  return V8Event_cache_;
}

Event* V8Event::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<Event*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Event::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Event::wrap(Event* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::EVENT, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Event > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

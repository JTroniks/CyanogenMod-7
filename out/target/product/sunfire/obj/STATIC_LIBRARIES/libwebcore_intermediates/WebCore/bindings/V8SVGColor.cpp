/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(SVG)

#include "ExceptionCode.h"
#include "V8CSSValue.h"
#include "V8RGBColor.h"
#include "V8SVGColor.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace SVGColorInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> colorTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.SVGColor.colorType._get");
    SVGColor* imp = V8SVGColor::toNative(info.Holder());
    return v8::Integer::New(imp->colorType());
  }

  static v8::Handle<v8::Value> rgbColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.SVGColor.rgbColor._get");
    SVGColor* imp = V8SVGColor::toNative(info.Holder());
    return toV8(imp->rgbColor());
  }

  static v8::Handle<v8::Value> setRGBColorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.SVGColor.setRGBColor");
    SVGColor* imp = V8SVGColor::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> rgbColor = args[0];
    imp->setRGBColor(rgbColor, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> setRGBColorICCColorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.SVGColor.setRGBColorICCColor");
    SVGColor* imp = V8SVGColor::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> rgbColor = args[0];
    V8Parameter<> iccColor = args[1];
    imp->setRGBColorICCColor(rgbColor, iccColor, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> setColorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.SVGColor.setColor");
    SVGColor* imp = V8SVGColor::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int colorType = toInt32(args[0]);
    V8Parameter<> rgbColor = args[1];
    V8Parameter<> iccColor = args[2];
    imp->setColor(colorType, rgbColor, iccColor, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace SVGColorInternal

static const BatchedAttribute SVGColor_attrs[] = {
    {
        // Attribute 'colorType' (Type: 'readonly attribute' ExtAttr: '')
        "colorType",
        SVGColorInternal::colorTypeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rgbColor' (Type: 'readonly attribute' ExtAttr: '')
        "rgbColor",
        SVGColorInternal::rgbColorAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback SVGColor_callbacks[] = {
  {"setRGBColor", SVGColorInternal::setRGBColorCallback},
  {"setRGBColorICCColor", SVGColorInternal::setRGBColorICCColorCallback},
  {"setColor", SVGColorInternal::setColorCallback},
};
static const BatchedConstant SVGColor_consts[] = {
  { "SVG_COLORTYPE_UNKNOWN", static_cast<signed int>(0) },
  { "SVG_COLORTYPE_RGBCOLOR", static_cast<signed int>(1) },
  { "SVG_COLORTYPE_RGBCOLOR_ICCCOLOR", static_cast<signed int>(2) },
  { "SVG_COLORTYPE_CURRENTCOLOR", static_cast<signed int>(3) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8SVGColorTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "SVGColor",
      V8CSSValue::GetTemplate(), V8SVGColor::internalFieldCount,
      SVGColor_attrs, sizeof(SVGColor_attrs)/sizeof(*SVGColor_attrs),
      SVGColor_callbacks, sizeof(SVGColor_callbacks)/sizeof(*SVGColor_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  batchConfigureConstants(desc, proto, SVGColor_consts, sizeof(SVGColor_consts)/sizeof(*SVGColor_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8SVGColor::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8SVGColor_raw_cache_ = createRawTemplate();
  return V8SVGColor_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8SVGColor::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8SVGColor_cache_ = ConfigureV8SVGColorTemplate(GetRawTemplate());
  return V8SVGColor_cache_;
}

SVGColor* V8SVGColor::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<SVGColor*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8SVGColor::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8SVGColor::wrap(SVGColor* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMSVGObjectWithContextMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::SVGCOLOR, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMSVGObjectWithContextMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<SVGColor > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(SVGColor* impl) {
  if (!impl)
    return v8::Null();
  return V8SVGColor::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(SVG)

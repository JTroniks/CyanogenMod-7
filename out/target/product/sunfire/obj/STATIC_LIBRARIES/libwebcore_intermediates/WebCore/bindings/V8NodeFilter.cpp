/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8NodeFilter.h"

namespace WebCore {
namespace NodeFilterInternal {

template <typename T> void V8_USE(T) { }

} // namespace NodeFilterInternal

static const BatchedCallback NodeFilter_callbacks[] = {
  {"acceptNode", V8NodeFilter::acceptNodeCallback},
};
static const BatchedConstant NodeFilter_consts[] = {
  { "FILTER_ACCEPT", static_cast<signed int>(1) },
  { "FILTER_REJECT", static_cast<signed int>(2) },
  { "FILTER_SKIP", static_cast<signed int>(3) },
  { "SHOW_ALL", static_cast<signed int>(0xFFFFFFFF) },
  { "SHOW_ELEMENT", static_cast<signed int>(0x00000001) },
  { "SHOW_ATTRIBUTE", static_cast<signed int>(0x00000002) },
  { "SHOW_TEXT", static_cast<signed int>(0x00000004) },
  { "SHOW_CDATA_SECTION", static_cast<signed int>(0x00000008) },
  { "SHOW_ENTITY_REFERENCE", static_cast<signed int>(0x00000010) },
  { "SHOW_ENTITY", static_cast<signed int>(0x00000020) },
  { "SHOW_PROCESSING_INSTRUCTION", static_cast<signed int>(0x00000040) },
  { "SHOW_COMMENT", static_cast<signed int>(0x00000080) },
  { "SHOW_DOCUMENT", static_cast<signed int>(0x00000100) },
  { "SHOW_DOCUMENT_TYPE", static_cast<signed int>(0x00000200) },
  { "SHOW_DOCUMENT_FRAGMENT", static_cast<signed int>(0x00000400) },
  { "SHOW_NOTATION", static_cast<signed int>(0x00000800) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8NodeFilterTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "NodeFilter",
      v8::Persistent<v8::FunctionTemplate>(), V8NodeFilter::internalFieldCount,
      NULL, 0,
      NodeFilter_callbacks, sizeof(NodeFilter_callbacks)/sizeof(*NodeFilter_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  batchConfigureConstants(desc, proto, NodeFilter_consts, sizeof(NodeFilter_consts)/sizeof(*NodeFilter_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8NodeFilter::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8NodeFilter_raw_cache_ = createRawTemplate();
  return V8NodeFilter_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8NodeFilter::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8NodeFilter_cache_ = ConfigureV8NodeFilterTemplate(GetRawTemplate());
  return V8NodeFilter_cache_;
}

NodeFilter* V8NodeFilter::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<NodeFilter*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8NodeFilter::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8NodeFilter::wrap(NodeFilter* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::NODEFILTER, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<NodeFilter > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(NodeFilter* impl) {
  if (!impl)
    return v8::Null();
  return V8NodeFilter::wrap(impl);
}
} // namespace WebCore

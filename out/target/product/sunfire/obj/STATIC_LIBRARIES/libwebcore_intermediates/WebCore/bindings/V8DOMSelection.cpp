/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "V8DOMSelection.h"
#include "V8Node.h"
#include "V8Range.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace DOMSelectionInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> anchorNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.anchorNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->anchorNode());
  }

  static v8::Handle<v8::Value> anchorOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.anchorOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->anchorOffset());
  }

  static v8::Handle<v8::Value> focusNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.focusNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->focusNode());
  }

  static v8::Handle<v8::Value> focusOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.focusOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->focusOffset());
  }

  static v8::Handle<v8::Value> isCollapsedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.isCollapsed._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8Boolean(imp->isCollapsed());
  }

  static v8::Handle<v8::Value> rangeCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.rangeCount._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->rangeCount());
  }

  static v8::Handle<v8::Value> baseNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.baseNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->baseNode());
  }

  static v8::Handle<v8::Value> baseOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.baseOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->baseOffset());
  }

  static v8::Handle<v8::Value> extentNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.extentNode._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return toV8(imp->extentNode());
  }

  static v8::Handle<v8::Value> extentOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.extentOffset._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8::Integer::New(imp->extentOffset());
  }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMSelection.type._get");
    DOMSelection* imp = V8DOMSelection::toNative(info.Holder());
    return v8String(imp->type());
  }

  static v8::Handle<v8::Value> collapseCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.collapse");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* node = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int index = toInt32(args[1]);
    imp->collapse(node, index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> collapseToEndCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.collapseToEnd");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->collapseToEnd();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> collapseToStartCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.collapseToStart");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->collapseToStart();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteFromDocumentCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.deleteFromDocument");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->deleteFromDocument();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> containsNodeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.containsNode");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    Node* node = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool allowPartial = args[1]->BooleanValue();
    return v8Boolean(imp->containsNode(node, allowPartial));
  }

  static v8::Handle<v8::Value> selectAllChildrenCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.selectAllChildren");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* node = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->selectAllChildren(node, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> extendCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.extend");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* node = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int offset = toInt32(args[1]);
    imp->extend(node, offset, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getRangeAtCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.getRangeAt");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int index = toInt32(args[0]);
    RefPtr<Range> result = imp->getRangeAt(index, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> removeAllRangesCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.removeAllRanges");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->removeAllRanges();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> addRangeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.addRange");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    Range* range = V8Range::HasInstance(args[0]) ? V8Range::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->addRange(range);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> toStringCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.toString");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    return v8String(imp->toString());
  }

  static v8::Handle<v8::Value> modifyCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.modify");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    V8Parameter<> alter = args[0];
    V8Parameter<> direction = args[1];
    V8Parameter<> granularity = args[2];
    imp->modify(alter, direction, granularity);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> setBaseAndExtentCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.setBaseAndExtent");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* baseNode = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int baseOffset = toInt32(args[1]);
    Node* extentNode = V8Node::HasInstance(args[2]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[2])) : 0;
    int extentOffset = toInt32(args[3]);
    imp->setBaseAndExtent(baseNode, baseOffset, extentNode, extentOffset, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> setPositionCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.setPosition");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* node = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int offset = toInt32(args[1]);
    imp->setPosition(node, offset, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> emptyCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMSelection.empty");
    DOMSelection* imp = V8DOMSelection::toNative(args.Holder());
    imp->empty();
    return v8::Handle<v8::Value>();
  }

} // namespace DOMSelectionInternal

static const BatchedAttribute DOMSelection_attrs[] = {
    {
        // Attribute 'anchorNode' (Type: 'readonly attribute' ExtAttr: '')
        "anchorNode",
        DOMSelectionInternal::anchorNodeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'anchorOffset' (Type: 'readonly attribute' ExtAttr: '')
        "anchorOffset",
        DOMSelectionInternal::anchorOffsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'focusNode' (Type: 'readonly attribute' ExtAttr: '')
        "focusNode",
        DOMSelectionInternal::focusNodeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'focusOffset' (Type: 'readonly attribute' ExtAttr: '')
        "focusOffset",
        DOMSelectionInternal::focusOffsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'isCollapsed' (Type: 'readonly attribute' ExtAttr: '')
        "isCollapsed",
        DOMSelectionInternal::isCollapsedAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rangeCount' (Type: 'readonly attribute' ExtAttr: '')
        "rangeCount",
        DOMSelectionInternal::rangeCountAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'baseNode' (Type: 'readonly attribute' ExtAttr: '')
        "baseNode",
        DOMSelectionInternal::baseNodeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'baseOffset' (Type: 'readonly attribute' ExtAttr: '')
        "baseOffset",
        DOMSelectionInternal::baseOffsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'extentNode' (Type: 'readonly attribute' ExtAttr: '')
        "extentNode",
        DOMSelectionInternal::extentNodeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'extentOffset' (Type: 'readonly attribute' ExtAttr: '')
        "extentOffset",
        DOMSelectionInternal::extentOffsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
        "type",
        DOMSelectionInternal::typeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback DOMSelection_callbacks[] = {
  {"collapseToEnd", DOMSelectionInternal::collapseToEndCallback},
  {"collapseToStart", DOMSelectionInternal::collapseToStartCallback},
  {"deleteFromDocument", DOMSelectionInternal::deleteFromDocumentCallback},
  {"getRangeAt", DOMSelectionInternal::getRangeAtCallback},
  {"removeAllRanges", DOMSelectionInternal::removeAllRangesCallback},
  {"modify", DOMSelectionInternal::modifyCallback},
  {"empty", DOMSelectionInternal::emptyCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DOMSelectionTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "DOMSelection",
      v8::Persistent<v8::FunctionTemplate>(), V8DOMSelection::internalFieldCount,
      DOMSelection_attrs, sizeof(DOMSelection_attrs)/sizeof(*DOMSelection_attrs),
      DOMSelection_callbacks, sizeof(DOMSelection_callbacks)/sizeof(*DOMSelection_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'collapse'
  const int collapse_argc = 2;
  v8::Handle<v8::FunctionTemplate> collapse_argv[collapse_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> collapse_signature = v8::Signature::New(desc, collapse_argc, collapse_argv);
  proto->Set(v8::String::New("collapse"), v8::FunctionTemplate::New(DOMSelectionInternal::collapseCallback, v8::Handle<v8::Value>(), collapse_signature));

  // Custom Signature 'containsNode'
  const int containsNode_argc = 2;
  v8::Handle<v8::FunctionTemplate> containsNode_argv[containsNode_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> containsNode_signature = v8::Signature::New(desc, containsNode_argc, containsNode_argv);
  proto->Set(v8::String::New("containsNode"), v8::FunctionTemplate::New(DOMSelectionInternal::containsNodeCallback, v8::Handle<v8::Value>(), containsNode_signature));

  // Custom Signature 'selectAllChildren'
  const int selectAllChildren_argc = 1;
  v8::Handle<v8::FunctionTemplate> selectAllChildren_argv[selectAllChildren_argc] = { V8Node::GetRawTemplate() };
  v8::Handle<v8::Signature> selectAllChildren_signature = v8::Signature::New(desc, selectAllChildren_argc, selectAllChildren_argv);
  proto->Set(v8::String::New("selectAllChildren"), v8::FunctionTemplate::New(DOMSelectionInternal::selectAllChildrenCallback, v8::Handle<v8::Value>(), selectAllChildren_signature));

  // Custom Signature 'extend'
  const int extend_argc = 2;
  v8::Handle<v8::FunctionTemplate> extend_argv[extend_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> extend_signature = v8::Signature::New(desc, extend_argc, extend_argv);
  proto->Set(v8::String::New("extend"), v8::FunctionTemplate::New(DOMSelectionInternal::extendCallback, v8::Handle<v8::Value>(), extend_signature));

  // Custom Signature 'addRange'
  const int addRange_argc = 1;
  v8::Handle<v8::FunctionTemplate> addRange_argv[addRange_argc] = { V8Range::GetRawTemplate() };
  v8::Handle<v8::Signature> addRange_signature = v8::Signature::New(desc, addRange_argc, addRange_argv);
  proto->Set(v8::String::New("addRange"), v8::FunctionTemplate::New(DOMSelectionInternal::addRangeCallback, v8::Handle<v8::Value>(), addRange_signature));
  proto->Set(v8::String::New("toString"), v8::FunctionTemplate::New(DOMSelectionInternal::toStringCallback, v8::Handle<v8::Value>(), default_signature), static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::DontEnum));

  // Custom Signature 'setBaseAndExtent'
  const int setBaseAndExtent_argc = 4;
  v8::Handle<v8::FunctionTemplate> setBaseAndExtent_argv[setBaseAndExtent_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> setBaseAndExtent_signature = v8::Signature::New(desc, setBaseAndExtent_argc, setBaseAndExtent_argv);
  proto->Set(v8::String::New("setBaseAndExtent"), v8::FunctionTemplate::New(DOMSelectionInternal::setBaseAndExtentCallback, v8::Handle<v8::Value>(), setBaseAndExtent_signature));

  // Custom Signature 'setPosition'
  const int setPosition_argc = 2;
  v8::Handle<v8::FunctionTemplate> setPosition_argv[setPosition_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> setPosition_signature = v8::Signature::New(desc, setPosition_argc, setPosition_argv);
  proto->Set(v8::String::New("setPosition"), v8::FunctionTemplate::New(DOMSelectionInternal::setPositionCallback, v8::Handle<v8::Value>(), setPosition_signature));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DOMSelection::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DOMSelection_raw_cache_ = createRawTemplate();
  return V8DOMSelection_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8DOMSelection::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DOMSelection_cache_ = ConfigureV8DOMSelectionTemplate(GetRawTemplate());
  return V8DOMSelection_cache_;
}

DOMSelection* V8DOMSelection::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<DOMSelection*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8DOMSelection::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DOMSelection::wrap(DOMSelection* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::DOMSELECTION, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<DOMSelection > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

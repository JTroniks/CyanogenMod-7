/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "V8CSSRule.h"
#include "V8CSSRuleList.h"
#include "V8CSSStyleSheet.h"
#include "V8StyleSheet.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace CSSStyleSheetInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> ownerRuleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSStyleSheet.ownerRule._get");
    CSSStyleSheet* imp = V8CSSStyleSheet::toNative(info.Holder());
    return toV8(imp->ownerRule());
  }

  static v8::Handle<v8::Value> cssRulesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSStyleSheet.cssRules._get");
    CSSStyleSheet* imp = V8CSSStyleSheet::toNative(info.Holder());
    return toV8(imp->cssRules());
  }

  static v8::Handle<v8::Value> rulesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSStyleSheet.rules._get");
    CSSStyleSheet* imp = V8CSSStyleSheet::toNative(info.Holder());
    return toV8(imp->rules());
  }

  static v8::Handle<v8::Value> insertRuleCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSStyleSheet.insertRule");
    CSSStyleSheet* imp = V8CSSStyleSheet::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> rule = args[0];
    unsigned index = toInt32(args[1]);
    unsigned result = imp->insertRule(rule, index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Integer::NewFromUnsigned(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteRuleCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSStyleSheet.deleteRule");
    CSSStyleSheet* imp = V8CSSStyleSheet::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned index = toInt32(args[0]);
    imp->deleteRule(index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> addRuleCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSStyleSheet.addRule");
    CSSStyleSheet* imp = V8CSSStyleSheet::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> selector = args[0];
    V8Parameter<> style = args[1];
    if (args.Length() <= 2) {
        int result = imp->addRule(selector, style, ec);
        if (UNLIKELY(ec)) goto fail;
        return v8::Integer::New(result);
    }
    unsigned index = toInt32(args[2]);
    int result = imp->addRule(selector, style, index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Integer::New(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> removeRuleCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSStyleSheet.removeRule");
    CSSStyleSheet* imp = V8CSSStyleSheet::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned index = toInt32(args[0]);
    imp->removeRule(index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace CSSStyleSheetInternal

static const BatchedAttribute CSSStyleSheet_attrs[] = {
    {
        // Attribute 'ownerRule' (Type: 'readonly attribute' ExtAttr: '')
        "ownerRule",
        CSSStyleSheetInternal::ownerRuleAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'cssRules' (Type: 'readonly attribute' ExtAttr: '')
        "cssRules",
        CSSStyleSheetInternal::cssRulesAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rules' (Type: 'readonly attribute' ExtAttr: '')
        "rules",
        CSSStyleSheetInternal::rulesAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback CSSStyleSheet_callbacks[] = {
  {"insertRule", CSSStyleSheetInternal::insertRuleCallback},
  {"deleteRule", CSSStyleSheetInternal::deleteRuleCallback},
  {"addRule", CSSStyleSheetInternal::addRuleCallback},
  {"removeRule", CSSStyleSheetInternal::removeRuleCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8CSSStyleSheetTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "CSSStyleSheet",
      V8StyleSheet::GetTemplate(), V8CSSStyleSheet::internalFieldCount,
      CSSStyleSheet_attrs, sizeof(CSSStyleSheet_attrs)/sizeof(*CSSStyleSheet_attrs),
      CSSStyleSheet_callbacks, sizeof(CSSStyleSheet_callbacks)/sizeof(*CSSStyleSheet_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CSSStyleSheet::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CSSStyleSheet_raw_cache_ = createRawTemplate();
  return V8CSSStyleSheet_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8CSSStyleSheet::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CSSStyleSheet_cache_ = ConfigureV8CSSStyleSheetTemplate(GetRawTemplate());
  return V8CSSStyleSheet_cache_;
}

CSSStyleSheet* V8CSSStyleSheet::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<CSSStyleSheet*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8CSSStyleSheet::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CSSStyleSheet::wrap(CSSStyleSheet* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::CSSSTYLESHEET, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<CSSStyleSheet > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

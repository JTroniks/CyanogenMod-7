/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "CSSMutableStyleDeclaration.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8BarInfo.h"
#include "V8CSSRuleList.h"
#include "V8CSSStyleDeclaration.h"
#include "V8Collection.h"
#include "V8Console.h"
#include "V8DOMApplicationCache.h"
#include "V8DOMSelection.h"
#include "V8DOMWindow.h"
#include "V8Database.h"
#include "V8Document.h"
#include "V8Element.h"
#include "V8Event.h"
#include "V8History.h"
#include "V8Location.h"
#include "V8Media.h"
#include "V8Navigator.h"
#include "V8Node.h"
#include "V8Screen.h"
#include "V8Storage.h"
#include "V8WebKitPoint.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace DOMWindowInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> screenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.screen._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->screen());
  }

  static v8::Handle<v8::Value> historyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.history._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->history());
  }

  static v8::Handle<v8::Value> locationbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.locationbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->locationbar());
  }

  static v8::Handle<v8::Value> menubarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.menubar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->menubar());
  }

  static v8::Handle<v8::Value> personalbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.personalbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->personalbar());
  }

  static v8::Handle<v8::Value> scrollbarsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.scrollbars._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->scrollbars());
  }

  static v8::Handle<v8::Value> statusbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.statusbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->statusbar());
  }

  static v8::Handle<v8::Value> toolbarAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.toolbar._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->toolbar());
  }

  static v8::Handle<v8::Value> navigatorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.navigator._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->navigator());
  }

  static v8::Handle<v8::Value> clientInformationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.clientInformation._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->clientInformation());
  }

  static v8::Handle<v8::Value> locationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.location._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    return toV8(imp->location());
  }

  static v8::Handle<v8::Value> frameElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.frameElement._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    if (!V8BindingSecurity::checkNodeSecurity(V8BindingState::Only(), imp->frameElement())) return v8::Handle<v8::Value>();

    return toV8(imp->frameElement());
  }

  static v8::Handle<v8::Value> offscreenBufferingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.offscreenBuffering._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8Boolean(imp->offscreenBuffering());
  }

  static v8::Handle<v8::Value> outerHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.outerHeight._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->outerHeight());
  }

  static v8::Handle<v8::Value> outerWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.outerWidth._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->outerWidth());
  }

  static v8::Handle<v8::Value> innerHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.innerHeight._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->innerHeight());
  }

  static v8::Handle<v8::Value> innerWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.innerWidth._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->innerWidth());
  }

  static v8::Handle<v8::Value> screenXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.screenX._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenX());
  }

  static v8::Handle<v8::Value> screenYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.screenY._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenY());
  }

  static v8::Handle<v8::Value> screenLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.screenLeft._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenLeft());
  }

  static v8::Handle<v8::Value> screenTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.screenTop._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->screenTop());
  }

  static v8::Handle<v8::Value> scrollXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.scrollX._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->scrollX());
  }

  static v8::Handle<v8::Value> scrollYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.scrollY._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->scrollY());
  }

  static v8::Handle<v8::Value> pageXOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.pageXOffset._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->pageXOffset());
  }

  static v8::Handle<v8::Value> pageYOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.pageYOffset._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->pageYOffset());
  }

  static v8::Handle<v8::Value> closedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.closed._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8Boolean(imp->closed());
  }

  static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.length._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->length());
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.name._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->name());
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.name._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setName(v);
    return;
  }

  static v8::Handle<v8::Value> statusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.status._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->status());
  }

  static void statusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.status._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setStatus(v);
    return;
  }

  static v8::Handle<v8::Value> defaultStatusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.defaultStatus._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->defaultStatus());
  }

  static void defaultStatusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.defaultStatus._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setDefaultStatus(v);
    return;
  }

  static v8::Handle<v8::Value> defaultstatusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.defaultstatus._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8String(imp->defaultstatus());
  }

  static void defaultstatusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.defaultstatus._set");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setDefaultstatus(v);
    return;
  }

  static v8::Handle<v8::Value> selfAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.self._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->self());
  }

  static v8::Handle<v8::Value> windowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.window._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    return toV8(imp->window());
  }

  static v8::Handle<v8::Value> framesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.frames._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->frames());
  }

  static v8::Handle<v8::Value> openerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.opener._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->opener());
  }

  static v8::Handle<v8::Value> parentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.parent._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->parent());
  }

  static v8::Handle<v8::Value> topAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.top._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    return toV8(imp->top());
  }

  static v8::Handle<v8::Value> documentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.document._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->document());
  }

  static v8::Handle<v8::Value> mediaAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.media._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->media());
  }

  static v8::Handle<v8::Value> devicePixelRatioAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.devicePixelRatio._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Number::New(imp->devicePixelRatio());
  }

  static v8::Handle<v8::Value> applicationCacheAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.applicationCache._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->applicationCache());
  }

  static v8::Handle<v8::Value> sessionStorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.sessionStorage._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->sessionStorage());
  }

  static v8::Handle<v8::Value> localStorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.localStorage._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->localStorage());
  }

  static v8::Handle<v8::Value> orientationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.orientation._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return v8::Integer::New(imp->orientation());
  }

  static v8::Handle<v8::Value> consoleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.console._get");
    DOMWindow* imp = V8DOMWindow::toNative(info.Holder());
    return toV8(imp->console());
  }

  static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onabort._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onabort._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8DOMWindow::cacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onbeforeunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onbeforeunload._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onbeforeunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforeunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforeunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onbeforeunload._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onbeforeunload(), value, V8DOMWindow::cacheIndex);
    imp->setOnbeforeunload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onblur._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onblur._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onblur(), value, V8DOMWindow::cacheIndex);
    imp->setOnblur(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncanplayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oncanplay._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->oncanplay() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncanplay())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncanplayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oncanplay._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->oncanplay(), value, V8DOMWindow::cacheIndex);
    imp->setOncanplay(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncanplaythroughAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oncanplaythrough._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->oncanplaythrough() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncanplaythrough())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncanplaythroughAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oncanplaythrough._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->oncanplaythrough(), value, V8DOMWindow::cacheIndex);
    imp->setOncanplaythrough(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onchange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onchange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onchange(), value, V8DOMWindow::cacheIndex);
    imp->setOnchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onclick._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onclick._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onclick(), value, V8DOMWindow::cacheIndex);
    imp->setOnclick(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oncontextmenu._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oncontextmenu._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->oncontextmenu(), value, V8DOMWindow::cacheIndex);
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondblclick._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondblclick._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondblclick(), value, V8DOMWindow::cacheIndex);
    imp->setOndblclick(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondrag._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondrag._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondrag(), value, V8DOMWindow::cacheIndex);
    imp->setOndrag(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondragend(), value, V8DOMWindow::cacheIndex);
    imp->setOndragend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragenter._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragenter._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondragenter(), value, V8DOMWindow::cacheIndex);
    imp->setOndragenter(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragleave._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragleave._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondragleave(), value, V8DOMWindow::cacheIndex);
    imp->setOndragleave(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragover._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragover._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondragover(), value, V8DOMWindow::cacheIndex);
    imp->setOndragover(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondragstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondragstart(), value, V8DOMWindow::cacheIndex);
    imp->setOndragstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondrop._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondrop._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondrop(), value, V8DOMWindow::cacheIndex);
    imp->setOndrop(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondurationchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondurationchange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ondurationchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondurationchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondurationchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ondurationchange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ondurationchange(), value, V8DOMWindow::cacheIndex);
    imp->setOndurationchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onemptiedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onemptied._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onemptied() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onemptied())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onemptiedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onemptied._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onemptied(), value, V8DOMWindow::cacheIndex);
    imp->setOnemptied(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onendedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onended._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onended() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onended())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onendedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onended._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onended(), value, V8DOMWindow::cacheIndex);
    imp->setOnended(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onerror._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onerror._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8DOMWindow::cacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onfocus._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onfocus._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onfocus(), value, V8DOMWindow::cacheIndex);
    imp->setOnfocus(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onhashchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onhashchange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onhashchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onhashchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onhashchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onhashchange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onhashchange(), value, V8DOMWindow::cacheIndex);
    imp->setOnhashchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oninput._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oninput._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->oninput(), value, V8DOMWindow::cacheIndex);
    imp->setOninput(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oninvalid._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.oninvalid._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->oninvalid(), value, V8DOMWindow::cacheIndex);
    imp->setOninvalid(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onkeydown._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onkeydown._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onkeydown(), value, V8DOMWindow::cacheIndex);
    imp->setOnkeydown(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onkeypress._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onkeypress._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onkeypress(), value, V8DOMWindow::cacheIndex);
    imp->setOnkeypress(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onkeyup._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onkeyup._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onkeyup(), value, V8DOMWindow::cacheIndex);
    imp->setOnkeyup(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onload._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onload._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8DOMWindow::cacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadeddataAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onloadeddata._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onloadeddata() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadeddata())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadeddataAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onloadeddata._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onloadeddata(), value, V8DOMWindow::cacheIndex);
    imp->setOnloadeddata(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadedmetadataAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onloadedmetadata._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onloadedmetadata() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadedmetadata())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadedmetadataAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onloadedmetadata._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onloadedmetadata(), value, V8DOMWindow::cacheIndex);
    imp->setOnloadedmetadata(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onloadstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onloadstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onloadstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onloadstart(), value, V8DOMWindow::cacheIndex);
    imp->setOnloadstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmessage._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmessage._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8DOMWindow::cacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmousedown._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmousedown._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onmousedown(), value, V8DOMWindow::cacheIndex);
    imp->setOnmousedown(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmousemove._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmousemove._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onmousemove(), value, V8DOMWindow::cacheIndex);
    imp->setOnmousemove(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmouseout._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmouseout._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onmouseout(), value, V8DOMWindow::cacheIndex);
    imp->setOnmouseout(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmouseover._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmouseover._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onmouseover(), value, V8DOMWindow::cacheIndex);
    imp->setOnmouseover(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmouseup._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmouseup._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onmouseup(), value, V8DOMWindow::cacheIndex);
    imp->setOnmouseup(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmousewheel._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onmousewheel._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onmousewheel(), value, V8DOMWindow::cacheIndex);
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onofflineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onoffline._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onoffline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onoffline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onofflineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onoffline._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onoffline(), value, V8DOMWindow::cacheIndex);
    imp->setOnoffline(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ononlineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ononline._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ononline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ononline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ononlineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ononline._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ononline(), value, V8DOMWindow::cacheIndex);
    imp->setOnonline(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpagehideAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpagehide._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onpagehide() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpagehide())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpagehideAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpagehide._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onpagehide(), value, V8DOMWindow::cacheIndex);
    imp->setOnpagehide(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpageshowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpageshow._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onpageshow() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpageshow())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpageshowAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpageshow._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onpageshow(), value, V8DOMWindow::cacheIndex);
    imp->setOnpageshow(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpauseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpause._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onpause() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpause())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpauseAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpause._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onpause(), value, V8DOMWindow::cacheIndex);
    imp->setOnpause(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onplayAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onplay._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onplay() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onplay())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onplayAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onplay._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onplay(), value, V8DOMWindow::cacheIndex);
    imp->setOnplay(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onplayingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onplaying._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onplaying() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onplaying())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onplayingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onplaying._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onplaying(), value, V8DOMWindow::cacheIndex);
    imp->setOnplaying(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpopstateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpopstate._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onpopstate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpopstate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpopstateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onpopstate._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onpopstate(), value, V8DOMWindow::cacheIndex);
    imp->setOnpopstate(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onprogress._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onprogress._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8DOMWindow::cacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onratechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onratechange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onratechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onratechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onratechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onratechange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onratechange(), value, V8DOMWindow::cacheIndex);
    imp->setOnratechange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onresizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onresize._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onresize() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onresize())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onresizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onresize._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onresize(), value, V8DOMWindow::cacheIndex);
    imp->setOnresize(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onscroll._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onscroll._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onscroll(), value, V8DOMWindow::cacheIndex);
    imp->setOnscroll(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onseekedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onseeked._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onseeked() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onseeked())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onseekedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onseeked._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onseeked(), value, V8DOMWindow::cacheIndex);
    imp->setOnseeked(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onseekingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onseeking._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onseeking() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onseeking())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onseekingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onseeking._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onseeking(), value, V8DOMWindow::cacheIndex);
    imp->setOnseeking(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onselect._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onselect._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onselect(), value, V8DOMWindow::cacheIndex);
    imp->setOnselect(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onstalledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onstalled._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onstalled() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstalled())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onstalledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onstalled._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onstalled(), value, V8DOMWindow::cacheIndex);
    imp->setOnstalled(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onstorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onstorage._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onstorage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstorage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onstorageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onstorage._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onstorage(), value, V8DOMWindow::cacheIndex);
    imp->setOnstorage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onsubmit._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onsubmit._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onsubmit(), value, V8DOMWindow::cacheIndex);
    imp->setOnsubmit(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onsuspendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onsuspend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onsuspend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsuspend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onsuspendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onsuspend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onsuspend(), value, V8DOMWindow::cacheIndex);
    imp->setOnsuspend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontimeupdateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontimeupdate._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ontimeupdate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontimeupdate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontimeupdateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontimeupdate._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ontimeupdate(), value, V8DOMWindow::cacheIndex);
    imp->setOntimeupdate(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onunload._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onunload._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onunload(), value, V8DOMWindow::cacheIndex);
    imp->setOnunload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onvolumechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onvolumechange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onvolumechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onvolumechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onvolumechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onvolumechange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onvolumechange(), value, V8DOMWindow::cacheIndex);
    imp->setOnvolumechange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onwaitingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwaiting._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onwaiting() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwaiting())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onwaitingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwaiting._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onwaiting(), value, V8DOMWindow::cacheIndex);
    imp->setOnwaiting(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onreset._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onreset._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onreset(), value, V8DOMWindow::cacheIndex);
    imp->setOnreset(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onsearch._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onsearch._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onsearch(), value, V8DOMWindow::cacheIndex);
    imp->setOnsearch(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onwebkitanimationendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkitanimationend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onwebkitanimationend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitanimationend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onwebkitanimationendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkitanimationend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onwebkitanimationend(), value, V8DOMWindow::cacheIndex);
    imp->setOnwebkitanimationend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onwebkitanimationiterationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkitanimationiteration._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onwebkitanimationiteration() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitanimationiteration())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onwebkitanimationiterationAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkitanimationiteration._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onwebkitanimationiteration(), value, V8DOMWindow::cacheIndex);
    imp->setOnwebkitanimationiteration(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onwebkitanimationstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkitanimationstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onwebkitanimationstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkitanimationstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onwebkitanimationstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkitanimationstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onwebkitanimationstart(), value, V8DOMWindow::cacheIndex);
    imp->setOnwebkitanimationstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onwebkittransitionendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkittransitionend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onwebkittransitionend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onwebkittransitionend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onwebkittransitionendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onwebkittransitionend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onwebkittransitionend(), value, V8DOMWindow::cacheIndex);
    imp->setOnwebkittransitionend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onorientationchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onorientationchange._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->onorientationchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onorientationchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onorientationchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.onorientationchange._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->onorientationchange(), value, V8DOMWindow::cacheIndex);
    imp->setOnorientationchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchstart._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchstart._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ontouchstart(), value, V8DOMWindow::cacheIndex);
    imp->setOntouchstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchmove._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchmove._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ontouchmove(), value, V8DOMWindow::cacheIndex);
    imp->setOntouchmove(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchend._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchend._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ontouchend(), value, V8DOMWindow::cacheIndex);
    imp->setOntouchend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchcancel._get");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return v8::Handle<v8::Value>();
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.ontouchcancel._set");
    v8::Handle<v8::Object> holder = info.Holder();
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!imp->document())
      return;
    transferHiddenDependency(info.Holder(), imp->ontouchcancel(), value, V8DOMWindow::cacheIndex);
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> DOMWindowConstructorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.constructors._get");
    v8::Handle<v8::Value> data = info.Data();
    ASSERT(data->IsNumber());
    V8ClassIndex::V8WrapperType type = V8ClassIndex::FromInt(data->Int32Value());
    // Get the proxy corresponding to the DOMWindow if possible to
    // make sure that the constructor function is constructed in the
    // context of the DOMWindow and not in the context of the caller.
    return V8DOMWrapper::getConstructor(type, V8DOMWindow::toNative(info.Holder()));

    }

  static v8::Handle<v8::Value> getSelectionCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.getSelection");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    return toV8(imp->getSelection());
  }

  static v8::Handle<v8::Value> focusCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.focus");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    imp->focus();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> focusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.focus._get");
    static v8::Persistent<v8::FunctionTemplate> private_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::focusCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
      // can only reach here by 'object.__proto__.func', and it should passed
      // domain security check already
      return private_template->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
      static v8::Persistent<v8::FunctionTemplate> shared_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::focusCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
      return shared_template->GetFunction();

    } else {
      return private_template->GetFunction();
    }
  }

  static v8::Handle<v8::Value> blurCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.blur");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    imp->blur();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> blurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.blur._get");
    static v8::Persistent<v8::FunctionTemplate> private_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::blurCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
      // can only reach here by 'object.__proto__.func', and it should passed
      // domain security check already
      return private_template->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
      static v8::Persistent<v8::FunctionTemplate> shared_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::blurCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
      return shared_template->GetFunction();

    } else {
      return private_template->GetFunction();
    }
  }

  static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.close");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    imp->close();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> closeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.close._get");
    static v8::Persistent<v8::FunctionTemplate> private_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::closeCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
      // can only reach here by 'object.__proto__.func', and it should passed
      // domain security check already
      return private_template->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
      static v8::Persistent<v8::FunctionTemplate> shared_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(DOMWindowInternal::closeCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
      return shared_template->GetFunction();

    } else {
      return private_template->GetFunction();
    }
  }

  static v8::Handle<v8::Value> printCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.print");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    imp->print();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stopCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.stop");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    imp->stop();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> alertCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.alert");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    V8Parameter<> message = args[0];
    imp->alert(message);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> confirmCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.confirm");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    V8Parameter<> message = args[0];
    return v8Boolean(imp->confirm(message));
  }

  static v8::Handle<v8::Value> promptCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.prompt");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    V8Parameter<> message = args[0];
    V8Parameter<WithUndefinedOrNullCheck> defaultValue = args[1];
    return v8StringOrNull(imp->prompt(message, defaultValue));
  }

  static v8::Handle<v8::Value> findCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.find");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    V8Parameter<> string = args[0];
    bool caseSensitive = args[1]->BooleanValue();
    bool backwards = args[2]->BooleanValue();
    bool wrap = args[3]->BooleanValue();
    bool wholeWord = args[4]->BooleanValue();
    bool searchInFrames = args[5]->BooleanValue();
    bool showDialog = args[6]->BooleanValue();
    return v8Boolean(imp->find(string, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog));
  }

  static v8::Handle<v8::Value> scrollByCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.scrollBy");
    if (args.Length() < 2) return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    imp->scrollBy(x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> scrollToCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.scrollTo");
    if (args.Length() < 2) return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    imp->scrollTo(x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> scrollCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.scroll");
    if (args.Length() < 2) return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    imp->scroll(x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> moveByCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.moveBy");
    if (args.Length() < 2) return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    float x = static_cast<float>(args[0]->NumberValue());
    float y = static_cast<float>(args[1]->NumberValue());
    imp->moveBy(x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> moveToCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.moveTo");
    if (args.Length() < 2) return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    float x = static_cast<float>(args[0]->NumberValue());
    float y = static_cast<float>(args[1]->NumberValue());
    imp->moveTo(x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> resizeByCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.resizeBy");
    if (args.Length() < 2) return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    float x = static_cast<float>(args[0]->NumberValue());
    float y = static_cast<float>(args[1]->NumberValue());
    imp->resizeBy(x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> resizeToCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.resizeTo");
    if (args.Length() < 2) return v8::Handle<v8::Value>();
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    float width = static_cast<float>(args[0]->NumberValue());
    float height = static_cast<float>(args[1]->NumberValue());
    imp->resizeTo(width, height);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getComputedStyleCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.getComputedStyle");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    Element* element = V8Element::HasInstance(args[0]) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    V8Parameter<> pseudoElement = args[1];
    return toV8(imp->getComputedStyle(element, pseudoElement));
  }

  static v8::Handle<v8::Value> getMatchedCSSRulesCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.getMatchedCSSRules");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    Element* element = V8Element::HasInstance(args[0]) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    V8Parameter<> pseudoElement = args[1];
    if (args.Length() <= 2) {
        return toV8(imp->getMatchedCSSRules(element, pseudoElement));
    }
    bool authorOnly = args[2]->BooleanValue();
    return toV8(imp->getMatchedCSSRules(element, pseudoElement, authorOnly));
  }

  static v8::Handle<v8::Value> webkitConvertPointFromPageToNodeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.webkitConvertPointFromPageToNode");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    Node* node = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    WebKitPoint* p = V8WebKitPoint::HasInstance(args[1]) ? V8WebKitPoint::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    return toV8(imp->webkitConvertPointFromPageToNode(node, p));
  }

  static v8::Handle<v8::Value> webkitConvertPointFromNodeToPageCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.webkitConvertPointFromNodeToPage");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    Node* node = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    WebKitPoint* p = V8WebKitPoint::HasInstance(args[1]) ? V8WebKitPoint::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    return toV8(imp->webkitConvertPointFromNodeToPage(node, p));
  }

  static v8::Handle<v8::Value> openDatabaseCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.openDatabase");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    ExceptionCode ec = 0;
    {
    V8Parameter<> name = args[0];
    V8Parameter<> version = args[1];
    V8Parameter<> displayName = args[2];
    unsigned estimatedSize = toInt32(args[3]);
    RefPtr<Database> result = imp->openDatabase(name, version, displayName, estimatedSize, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> postMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.postMessage._get");
    static v8::Persistent<v8::FunctionTemplate> private_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::postMessageCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
      // can only reach here by 'object.__proto__.func', and it should passed
      // domain security check already
      return private_template->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
      static v8::Persistent<v8::FunctionTemplate> shared_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::postMessageCallback, v8::Handle<v8::Value>(), v8::Signature::New(V8DOMWindow::GetRawTemplate())));
      return shared_template->GetFunction();

    } else {
      return private_template->GetFunction();
    }
  }

  static v8::Handle<v8::Value> clearTimeoutCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.clearTimeout");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    int handle = toInt32(args[0]);
    imp->clearTimeout(handle);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clearIntervalCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.clearInterval");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    int handle = toInt32(args[0]);
    imp->clearInterval(handle);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMWindow.dispatchEvent");
    DOMWindow* imp = V8DOMWindow::toNative(args.Holder());
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), true)) {
      return v8::Handle<v8::Value>();
    }
    ExceptionCode ec = 0;
    {
    Event* evt = V8Event::HasInstance(args[0]) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8Boolean(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> toStringAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMWindow.toString._get");
    static v8::Persistent<v8::FunctionTemplate> private_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::toStringCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));
    v8::Handle<v8::Object> holder = V8DOMWrapper::lookupDOMWrapper(V8DOMWindow::GetTemplate(), info.This());
    if (holder.IsEmpty()) {
      // can only reach here by 'object.__proto__.func', and it should passed
      // domain security check already
      return private_template->GetFunction();
    }
    DOMWindow* imp = V8DOMWindow::toNative(holder);
    if (!V8BindingSecurity::canAccessFrame(V8BindingState::Only(), imp->frame(), false)) {
      static v8::Persistent<v8::FunctionTemplate> shared_template =
        v8::Persistent<v8::FunctionTemplate>::New(v8::FunctionTemplate::New(V8DOMWindow::toStringCallback, v8::Handle<v8::Value>(), v8::Local<v8::Signature>()));
      return shared_template->GetFunction();

    } else {
      return private_template->GetFunction();
    }
  }

} // namespace DOMWindowInternal

static const BatchedAttribute shadow_attrs[] = {
    {
        // Attribute 'location' (Type: 'attribute' ExtAttr: 'V8DisallowShadowing DoNotCheckDomainSecurity V8CustomSetter JSCCustom')
        "location",
        DOMWindowInternal::locationAttrGetter,
        V8DOMWindow::locationAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ|v8::ALL_CAN_WRITE|v8::PROHIBITS_OVERWRITING),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontDelete),
        0 /* on instance */
    },
    {
        // Attribute 'window' (Type: 'readonly attribute' ExtAttr: 'V8DisallowShadowing DoNotCheckDomainSecurity')
        "window",
        DOMWindowInternal::windowAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ|v8::PROHIBITS_OVERWRITING),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontDelete),
        0 /* on instance */
    },
    {
        // Attribute 'top' (Type: 'attribute' ExtAttr: 'V8DisallowShadowing DoNotCheckDomainSecurityOnGet Replaceable V8ReadOnly')
        "top",
        DOMWindowInternal::topAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ|v8::PROHIBITS_OVERWRITING),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontDelete),
        0 /* on instance */
    },
};
static const BatchedAttribute DOMWindow_attrs[] = {
    {
        // Attribute 'screen' (Type: 'readonly attribute' ExtAttr: '')
        "screen",
        DOMWindowInternal::screenAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'history' (Type: 'readonly attribute' ExtAttr: 'JSCCustomGetter DoNotCheckDomainSecurity')
        "history",
        DOMWindowInternal::historyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'locationbar' (Type: 'attribute' ExtAttr: 'Replaceable')
        "locationbar",
        DOMWindowInternal::locationbarAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'menubar' (Type: 'attribute' ExtAttr: 'Replaceable')
        "menubar",
        DOMWindowInternal::menubarAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'personalbar' (Type: 'attribute' ExtAttr: 'Replaceable')
        "personalbar",
        DOMWindowInternal::personalbarAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'scrollbars' (Type: 'attribute' ExtAttr: 'Replaceable')
        "scrollbars",
        DOMWindowInternal::scrollbarsAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'statusbar' (Type: 'attribute' ExtAttr: 'Replaceable')
        "statusbar",
        DOMWindowInternal::statusbarAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'toolbar' (Type: 'attribute' ExtAttr: 'Replaceable')
        "toolbar",
        DOMWindowInternal::toolbarAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'navigator' (Type: 'attribute' ExtAttr: 'Replaceable')
        "navigator",
        DOMWindowInternal::navigatorAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'clientInformation' (Type: 'attribute' ExtAttr: 'Replaceable')
        "clientInformation",
        DOMWindowInternal::clientInformationAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'event' (Type: 'attribute' ExtAttr: 'Replaceable CustomGetter V8CustomSetter')
        "event",
        V8DOMWindow::eventAccessorGetter,
        V8DOMWindow::eventAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'crypto' (Type: 'readonly attribute' ExtAttr: 'Custom')
        "crypto",
        V8DOMWindow::cryptoAccessorGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'frameElement' (Type: 'readonly attribute' ExtAttr: 'CheckNodeSecurity')
        "frameElement",
        DOMWindowInternal::frameElementAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offscreenBuffering' (Type: 'attribute' ExtAttr: 'Replaceable')
        "offscreenBuffering",
        DOMWindowInternal::offscreenBufferingAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'outerHeight' (Type: 'attribute' ExtAttr: 'Replaceable')
        "outerHeight",
        DOMWindowInternal::outerHeightAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'outerWidth' (Type: 'attribute' ExtAttr: 'Replaceable')
        "outerWidth",
        DOMWindowInternal::outerWidthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'innerHeight' (Type: 'attribute' ExtAttr: 'Replaceable')
        "innerHeight",
        DOMWindowInternal::innerHeightAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'innerWidth' (Type: 'attribute' ExtAttr: 'Replaceable')
        "innerWidth",
        DOMWindowInternal::innerWidthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'screenX' (Type: 'attribute' ExtAttr: 'Replaceable')
        "screenX",
        DOMWindowInternal::screenXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'screenY' (Type: 'attribute' ExtAttr: 'Replaceable')
        "screenY",
        DOMWindowInternal::screenYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'screenLeft' (Type: 'attribute' ExtAttr: 'Replaceable')
        "screenLeft",
        DOMWindowInternal::screenLeftAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'screenTop' (Type: 'attribute' ExtAttr: 'Replaceable')
        "screenTop",
        DOMWindowInternal::screenTopAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'scrollX' (Type: 'attribute' ExtAttr: 'Replaceable')
        "scrollX",
        DOMWindowInternal::scrollXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'scrollY' (Type: 'attribute' ExtAttr: 'Replaceable')
        "scrollY",
        DOMWindowInternal::scrollYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'pageXOffset' (Type: 'readonly attribute' ExtAttr: '')
        "pageXOffset",
        DOMWindowInternal::pageXOffsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pageYOffset' (Type: 'readonly attribute' ExtAttr: '')
        "pageYOffset",
        DOMWindowInternal::pageYOffsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'closed' (Type: 'readonly attribute' ExtAttr: 'DoNotCheckDomainSecurity')
        "closed",
        DOMWindowInternal::closedAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'length' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
        "length",
        DOMWindowInternal::lengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: '')
        "name",
        DOMWindowInternal::nameAttrGetter,
        DOMWindowInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'status' (Type: 'attribute' ExtAttr: '')
        "status",
        DOMWindowInternal::statusAttrGetter,
        DOMWindowInternal::statusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'defaultStatus' (Type: 'attribute' ExtAttr: '')
        "defaultStatus",
        DOMWindowInternal::defaultStatusAttrGetter,
        DOMWindowInternal::defaultStatusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'defaultstatus' (Type: 'attribute' ExtAttr: '')
        "defaultstatus",
        DOMWindowInternal::defaultstatusAttrGetter,
        DOMWindowInternal::defaultstatusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'self' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
        "self",
        DOMWindowInternal::selfAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'frames' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
        "frames",
        DOMWindowInternal::framesAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'opener' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable V8CustomSetter')
        "opener",
        DOMWindowInternal::openerAttrGetter,
        V8DOMWindow::openerAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'parent' (Type: 'attribute' ExtAttr: 'DoNotCheckDomainSecurityOnGet Replaceable')
        "parent",
        DOMWindowInternal::parentAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::ALL_CAN_READ),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'document' (Type: 'readonly attribute' ExtAttr: '')
        "document",
        DOMWindowInternal::documentAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'media' (Type: 'readonly attribute' ExtAttr: '')
        "media",
        DOMWindowInternal::mediaAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'devicePixelRatio' (Type: 'attribute' ExtAttr: 'Replaceable')
        "devicePixelRatio",
        DOMWindowInternal::devicePixelRatioAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'orientation' (Type: 'readonly attribute' ExtAttr: '')
        "orientation",
        DOMWindowInternal::orientationAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'console' (Type: 'attribute' ExtAttr: 'Replaceable')
        "console",
        DOMWindowInternal::consoleAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onabort",
        DOMWindowInternal::onabortAttrGetter,
        DOMWindowInternal::onabortAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onbeforeunload' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onbeforeunload",
        DOMWindowInternal::onbeforeunloadAttrGetter,
        DOMWindowInternal::onbeforeunloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onblur",
        DOMWindowInternal::onblurAttrGetter,
        DOMWindowInternal::onblurAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'oncanplay' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "oncanplay",
        DOMWindowInternal::oncanplayAttrGetter,
        DOMWindowInternal::oncanplayAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'oncanplaythrough' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "oncanplaythrough",
        DOMWindowInternal::oncanplaythroughAttrGetter,
        DOMWindowInternal::oncanplaythroughAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onchange",
        DOMWindowInternal::onchangeAttrGetter,
        DOMWindowInternal::onchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onclick",
        DOMWindowInternal::onclickAttrGetter,
        DOMWindowInternal::onclickAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "oncontextmenu",
        DOMWindowInternal::oncontextmenuAttrGetter,
        DOMWindowInternal::oncontextmenuAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondblclick",
        DOMWindowInternal::ondblclickAttrGetter,
        DOMWindowInternal::ondblclickAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondrag",
        DOMWindowInternal::ondragAttrGetter,
        DOMWindowInternal::ondragAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondragend",
        DOMWindowInternal::ondragendAttrGetter,
        DOMWindowInternal::ondragendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondragenter",
        DOMWindowInternal::ondragenterAttrGetter,
        DOMWindowInternal::ondragenterAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondragleave",
        DOMWindowInternal::ondragleaveAttrGetter,
        DOMWindowInternal::ondragleaveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondragover",
        DOMWindowInternal::ondragoverAttrGetter,
        DOMWindowInternal::ondragoverAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondragstart",
        DOMWindowInternal::ondragstartAttrGetter,
        DOMWindowInternal::ondragstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondrop",
        DOMWindowInternal::ondropAttrGetter,
        DOMWindowInternal::ondropAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ondurationchange' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ondurationchange",
        DOMWindowInternal::ondurationchangeAttrGetter,
        DOMWindowInternal::ondurationchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onemptied' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onemptied",
        DOMWindowInternal::onemptiedAttrGetter,
        DOMWindowInternal::onemptiedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onended' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onended",
        DOMWindowInternal::onendedAttrGetter,
        DOMWindowInternal::onendedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onerror",
        DOMWindowInternal::onerrorAttrGetter,
        DOMWindowInternal::onerrorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onfocus",
        DOMWindowInternal::onfocusAttrGetter,
        DOMWindowInternal::onfocusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onhashchange' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onhashchange",
        DOMWindowInternal::onhashchangeAttrGetter,
        DOMWindowInternal::onhashchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "oninput",
        DOMWindowInternal::oninputAttrGetter,
        DOMWindowInternal::oninputAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "oninvalid",
        DOMWindowInternal::oninvalidAttrGetter,
        DOMWindowInternal::oninvalidAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onkeydown",
        DOMWindowInternal::onkeydownAttrGetter,
        DOMWindowInternal::onkeydownAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onkeypress",
        DOMWindowInternal::onkeypressAttrGetter,
        DOMWindowInternal::onkeypressAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onkeyup",
        DOMWindowInternal::onkeyupAttrGetter,
        DOMWindowInternal::onkeyupAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onload' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onload",
        DOMWindowInternal::onloadAttrGetter,
        DOMWindowInternal::onloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onloadeddata' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onloadeddata",
        DOMWindowInternal::onloadeddataAttrGetter,
        DOMWindowInternal::onloadeddataAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onloadedmetadata' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onloadedmetadata",
        DOMWindowInternal::onloadedmetadataAttrGetter,
        DOMWindowInternal::onloadedmetadataAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onloadstart' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onloadstart",
        DOMWindowInternal::onloadstartAttrGetter,
        DOMWindowInternal::onloadstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onmessage' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onmessage",
        DOMWindowInternal::onmessageAttrGetter,
        DOMWindowInternal::onmessageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onmousedown",
        DOMWindowInternal::onmousedownAttrGetter,
        DOMWindowInternal::onmousedownAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onmousemove",
        DOMWindowInternal::onmousemoveAttrGetter,
        DOMWindowInternal::onmousemoveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onmouseout",
        DOMWindowInternal::onmouseoutAttrGetter,
        DOMWindowInternal::onmouseoutAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onmouseover",
        DOMWindowInternal::onmouseoverAttrGetter,
        DOMWindowInternal::onmouseoverAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onmouseup",
        DOMWindowInternal::onmouseupAttrGetter,
        DOMWindowInternal::onmouseupAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onmousewheel",
        DOMWindowInternal::onmousewheelAttrGetter,
        DOMWindowInternal::onmousewheelAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onoffline' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onoffline",
        DOMWindowInternal::onofflineAttrGetter,
        DOMWindowInternal::onofflineAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ononline' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ononline",
        DOMWindowInternal::ononlineAttrGetter,
        DOMWindowInternal::ononlineAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onpagehide' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onpagehide",
        DOMWindowInternal::onpagehideAttrGetter,
        DOMWindowInternal::onpagehideAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onpageshow' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onpageshow",
        DOMWindowInternal::onpageshowAttrGetter,
        DOMWindowInternal::onpageshowAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onpause' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onpause",
        DOMWindowInternal::onpauseAttrGetter,
        DOMWindowInternal::onpauseAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onplay' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onplay",
        DOMWindowInternal::onplayAttrGetter,
        DOMWindowInternal::onplayAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onplaying' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onplaying",
        DOMWindowInternal::onplayingAttrGetter,
        DOMWindowInternal::onplayingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onpopstate' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onpopstate",
        DOMWindowInternal::onpopstateAttrGetter,
        DOMWindowInternal::onpopstateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onprogress' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onprogress",
        DOMWindowInternal::onprogressAttrGetter,
        DOMWindowInternal::onprogressAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onratechange' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onratechange",
        DOMWindowInternal::onratechangeAttrGetter,
        DOMWindowInternal::onratechangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onresize' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onresize",
        DOMWindowInternal::onresizeAttrGetter,
        DOMWindowInternal::onresizeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onscroll",
        DOMWindowInternal::onscrollAttrGetter,
        DOMWindowInternal::onscrollAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onseeked' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onseeked",
        DOMWindowInternal::onseekedAttrGetter,
        DOMWindowInternal::onseekedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onseeking' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onseeking",
        DOMWindowInternal::onseekingAttrGetter,
        DOMWindowInternal::onseekingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onselect",
        DOMWindowInternal::onselectAttrGetter,
        DOMWindowInternal::onselectAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onstalled' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onstalled",
        DOMWindowInternal::onstalledAttrGetter,
        DOMWindowInternal::onstalledAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onstorage' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onstorage",
        DOMWindowInternal::onstorageAttrGetter,
        DOMWindowInternal::onstorageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onsubmit",
        DOMWindowInternal::onsubmitAttrGetter,
        DOMWindowInternal::onsubmitAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onsuspend' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onsuspend",
        DOMWindowInternal::onsuspendAttrGetter,
        DOMWindowInternal::onsuspendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ontimeupdate' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "ontimeupdate",
        DOMWindowInternal::ontimeupdateAttrGetter,
        DOMWindowInternal::ontimeupdateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onunload' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onunload",
        DOMWindowInternal::onunloadAttrGetter,
        DOMWindowInternal::onunloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onvolumechange' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onvolumechange",
        DOMWindowInternal::onvolumechangeAttrGetter,
        DOMWindowInternal::onvolumechangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onwaiting' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onwaiting",
        DOMWindowInternal::onwaitingAttrGetter,
        DOMWindowInternal::onwaitingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onreset",
        DOMWindowInternal::onresetAttrGetter,
        DOMWindowInternal::onresetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onsearch",
        DOMWindowInternal::onsearchAttrGetter,
        DOMWindowInternal::onsearchAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onwebkitanimationend' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onwebkitanimationend",
        DOMWindowInternal::onwebkitanimationendAttrGetter,
        DOMWindowInternal::onwebkitanimationendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onwebkitanimationiteration' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onwebkitanimationiteration",
        DOMWindowInternal::onwebkitanimationiterationAttrGetter,
        DOMWindowInternal::onwebkitanimationiterationAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onwebkitanimationstart' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onwebkitanimationstart",
        DOMWindowInternal::onwebkitanimationstartAttrGetter,
        DOMWindowInternal::onwebkitanimationstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onwebkittransitionend' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onwebkittransitionend",
        DOMWindowInternal::onwebkittransitionendAttrGetter,
        DOMWindowInternal::onwebkittransitionendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'onorientationchange' (Type: 'attribute' ExtAttr: 'v8OnProto')
        "onorientationchange",
        DOMWindowInternal::onorientationchangeAttrGetter,
        DOMWindowInternal::onorientationchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        1 /* on proto */
    },
    {
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'v8OnProto DontEnum')
        "ontouchstart",
        DOMWindowInternal::ontouchstartAttrGetter,
        DOMWindowInternal::ontouchstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        1 /* on proto */
    },
    {
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'v8OnProto DontEnum')
        "ontouchmove",
        DOMWindowInternal::ontouchmoveAttrGetter,
        DOMWindowInternal::ontouchmoveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        1 /* on proto */
    },
    {
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'v8OnProto DontEnum')
        "ontouchend",
        DOMWindowInternal::ontouchendAttrGetter,
        DOMWindowInternal::ontouchendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        1 /* on proto */
    },
    {
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'v8OnProto DontEnum')
        "ontouchcancel",
        DOMWindowInternal::ontouchcancelAttrGetter,
        DOMWindowInternal::ontouchcancelAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        1 /* on proto */
    },
    {
        // Attribute 'StyleSheet' (Type: 'attribute' ExtAttr: '')
        "StyleSheet",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::STYLESHEET,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSStyleSheet' (Type: 'attribute' ExtAttr: '')
        "CSSStyleSheet",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSSTYLESHEET,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSValue' (Type: 'attribute' ExtAttr: '')
        "CSSValue",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSVALUE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSPrimitiveValue' (Type: 'attribute' ExtAttr: '')
        "CSSPrimitiveValue",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSPRIMITIVEVALUE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSValueList' (Type: 'attribute' ExtAttr: '')
        "CSSValueList",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSVALUELIST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WebKitCSSTransformValue' (Type: 'attribute' ExtAttr: '')
        "WebKitCSSTransformValue",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBKITCSSTRANSFORMVALUE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSRule' (Type: 'attribute' ExtAttr: '')
        "CSSRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSRULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSCharsetRule' (Type: 'attribute' ExtAttr: '')
        "CSSCharsetRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSCHARSETRULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSFontFaceRule' (Type: 'attribute' ExtAttr: '')
        "CSSFontFaceRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSFONTFACERULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSImportRule' (Type: 'attribute' ExtAttr: '')
        "CSSImportRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSIMPORTRULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSMediaRule' (Type: 'attribute' ExtAttr: '')
        "CSSMediaRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSMEDIARULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSPageRule' (Type: 'attribute' ExtAttr: '')
        "CSSPageRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSPAGERULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSStyleRule' (Type: 'attribute' ExtAttr: '')
        "CSSStyleRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSSTYLERULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSVariablesRule' (Type: 'attribute' ExtAttr: '')
        "CSSVariablesRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSVARIABLESRULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSVariablesDeclaration' (Type: 'attribute' ExtAttr: '')
        "CSSVariablesDeclaration",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSVARIABLESDECLARATION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSStyleDeclaration' (Type: 'attribute' ExtAttr: '')
        "CSSStyleDeclaration",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSSTYLEDECLARATION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'MediaList' (Type: 'attribute' ExtAttr: '')
        "MediaList",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::MEDIALIST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Counter' (Type: 'attribute' ExtAttr: '')
        "Counter",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::COUNTER,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CSSRuleList' (Type: 'attribute' ExtAttr: '')
        "CSSRuleList",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CSSRULELIST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Rect' (Type: 'attribute' ExtAttr: '')
        "Rect",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::RECT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'RGBColor' (Type: 'attribute' ExtAttr: '')
        "RGBColor",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::RGBCOLOR,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'StyleSheetList' (Type: 'attribute' ExtAttr: '')
        "StyleSheetList",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::STYLESHEETLIST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'DOMException' (Type: 'attribute' ExtAttr: '')
        "DOMException",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::DOMCOREEXCEPTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'DOMImplementation' (Type: 'attribute' ExtAttr: '')
        "DOMImplementation",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::DOMIMPLEMENTATION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'DocumentFragment' (Type: 'attribute' ExtAttr: '')
        "DocumentFragment",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::DOCUMENTFRAGMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Document' (Type: 'attribute' ExtAttr: '')
        "Document",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::DOCUMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Node' (Type: 'attribute' ExtAttr: '')
        "Node",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::NODE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'NodeList' (Type: 'attribute' ExtAttr: '')
        "NodeList",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::NODELIST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'NamedNodeMap' (Type: 'attribute' ExtAttr: '')
        "NamedNodeMap",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::NAMEDNODEMAP,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CharacterData' (Type: 'attribute' ExtAttr: '')
        "CharacterData",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CHARACTERDATA,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Attr' (Type: 'attribute' ExtAttr: '')
        "Attr",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::ATTR,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Element' (Type: 'attribute' ExtAttr: '')
        "Element",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::ELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Text' (Type: 'attribute' ExtAttr: '')
        "Text",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::TEXT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Comment' (Type: 'attribute' ExtAttr: '')
        "Comment",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::COMMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CDATASection' (Type: 'attribute' ExtAttr: '')
        "CDATASection",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CDATASECTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'DocumentType' (Type: 'attribute' ExtAttr: '')
        "DocumentType",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::DOCUMENTTYPE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Notation' (Type: 'attribute' ExtAttr: '')
        "Notation",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::NOTATION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Entity' (Type: 'attribute' ExtAttr: '')
        "Entity",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::ENTITY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'EntityReference' (Type: 'attribute' ExtAttr: '')
        "EntityReference",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::ENTITYREFERENCE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'ProcessingInstruction' (Type: 'attribute' ExtAttr: '')
        "ProcessingInstruction",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::PROCESSINGINSTRUCTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLDocument' (Type: 'attribute' ExtAttr: '')
        "HTMLDocument",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLDOCUMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLElement' (Type: 'attribute' ExtAttr: '')
        "HTMLElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLAnchorElement' (Type: 'attribute' ExtAttr: '')
        "HTMLAnchorElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLANCHORELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLAppletElement' (Type: 'attribute' ExtAttr: '')
        "HTMLAppletElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLAPPLETELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLAreaElement' (Type: 'attribute' ExtAttr: '')
        "HTMLAreaElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLAREAELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLBRElement' (Type: 'attribute' ExtAttr: '')
        "HTMLBRElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLBRELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLBaseElement' (Type: 'attribute' ExtAttr: '')
        "HTMLBaseElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLBASEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLBaseFontElement' (Type: 'attribute' ExtAttr: '')
        "HTMLBaseFontElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLBASEFONTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLBlockquoteElement' (Type: 'attribute' ExtAttr: '')
        "HTMLBlockquoteElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLBLOCKQUOTEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLBodyElement' (Type: 'attribute' ExtAttr: '')
        "HTMLBodyElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLBODYELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLButtonElement' (Type: 'attribute' ExtAttr: '')
        "HTMLButtonElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLBUTTONELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLCanvasElement' (Type: 'attribute' ExtAttr: '')
        "HTMLCanvasElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLCANVASELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#if ENABLE(DATAGRID)
    {
        // Attribute 'HTMLDataGridElement' (Type: 'attribute' ExtAttr: 'Conditional')
        "HTMLDataGridElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLDATAGRIDELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(DATAGRID)

#if ENABLE(DATAGRID)
    {
        // Attribute 'HTMLDataGridCellElement' (Type: 'attribute' ExtAttr: 'Conditional')
        "HTMLDataGridCellElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLDATAGRIDCELLELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(DATAGRID)

#if ENABLE(DATAGRID)
    {
        // Attribute 'HTMLDataGridColElement' (Type: 'attribute' ExtAttr: 'Conditional')
        "HTMLDataGridColElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLDATAGRIDCOLELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(DATAGRID)
    {
        // Attribute 'HTMLDListElement' (Type: 'attribute' ExtAttr: '')
        "HTMLDListElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLDLISTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLDirectoryElement' (Type: 'attribute' ExtAttr: '')
        "HTMLDirectoryElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLDIRECTORYELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLDivElement' (Type: 'attribute' ExtAttr: '')
        "HTMLDivElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLDIVELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLEmbedElement' (Type: 'attribute' ExtAttr: '')
        "HTMLEmbedElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLEMBEDELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLFieldSetElement' (Type: 'attribute' ExtAttr: '')
        "HTMLFieldSetElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLFIELDSETELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLFontElement' (Type: 'attribute' ExtAttr: '')
        "HTMLFontElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLFONTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLFormElement' (Type: 'attribute' ExtAttr: '')
        "HTMLFormElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLFORMELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLFrameElement' (Type: 'attribute' ExtAttr: '')
        "HTMLFrameElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLFRAMEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLFrameSetElement' (Type: 'attribute' ExtAttr: '')
        "HTMLFrameSetElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLFRAMESETELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLHRElement' (Type: 'attribute' ExtAttr: '')
        "HTMLHRElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLHRELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLHeadElement' (Type: 'attribute' ExtAttr: '')
        "HTMLHeadElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLHEADELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLHeadingElement' (Type: 'attribute' ExtAttr: '')
        "HTMLHeadingElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLHEADINGELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLHtmlElement' (Type: 'attribute' ExtAttr: '')
        "HTMLHtmlElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLHTMLELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLIFrameElement' (Type: 'attribute' ExtAttr: '')
        "HTMLIFrameElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLIFRAMEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLImageElement' (Type: 'attribute' ExtAttr: '')
        "HTMLImageElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLIMAGEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLInputElement' (Type: 'attribute' ExtAttr: '')
        "HTMLInputElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLINPUTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLIsIndexElement' (Type: 'attribute' ExtAttr: '')
        "HTMLIsIndexElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLISINDEXELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLLIElement' (Type: 'attribute' ExtAttr: '')
        "HTMLLIElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLLIELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLLabelElement' (Type: 'attribute' ExtAttr: '')
        "HTMLLabelElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLLABELELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLLegendElement' (Type: 'attribute' ExtAttr: '')
        "HTMLLegendElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLLEGENDELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLLinkElement' (Type: 'attribute' ExtAttr: '')
        "HTMLLinkElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLLINKELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLMapElement' (Type: 'attribute' ExtAttr: '')
        "HTMLMapElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLMAPELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLMarqueeElement' (Type: 'attribute' ExtAttr: '')
        "HTMLMarqueeElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLMARQUEEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLMenuElement' (Type: 'attribute' ExtAttr: '')
        "HTMLMenuElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLMENUELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLMetaElement' (Type: 'attribute' ExtAttr: '')
        "HTMLMetaElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLMETAELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLModElement' (Type: 'attribute' ExtAttr: '')
        "HTMLModElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLMODELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLOListElement' (Type: 'attribute' ExtAttr: '')
        "HTMLOListElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLOLISTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLObjectElement' (Type: 'attribute' ExtAttr: '')
        "HTMLObjectElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLOBJECTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLOptGroupElement' (Type: 'attribute' ExtAttr: '')
        "HTMLOptGroupElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLOPTGROUPELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLOptionElement' (Type: 'attribute' ExtAttr: '')
        "HTMLOptionElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLOPTIONELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLParagraphElement' (Type: 'attribute' ExtAttr: '')
        "HTMLParagraphElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLPARAGRAPHELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLParamElement' (Type: 'attribute' ExtAttr: '')
        "HTMLParamElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLPARAMELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLPreElement' (Type: 'attribute' ExtAttr: '')
        "HTMLPreElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLPREELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLQuoteElement' (Type: 'attribute' ExtAttr: '')
        "HTMLQuoteElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLQUOTEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLScriptElement' (Type: 'attribute' ExtAttr: '')
        "HTMLScriptElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLSCRIPTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLSelectElement' (Type: 'attribute' ExtAttr: '')
        "HTMLSelectElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLSELECTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLStyleElement' (Type: 'attribute' ExtAttr: '')
        "HTMLStyleElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLSTYLEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTableCaptionElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTableCaptionElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTABLECAPTIONELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTableCellElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTableCellElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTABLECELLELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTableColElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTableColElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTABLECOLELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTableElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTableElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTABLEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTableRowElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTableRowElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTABLEROWELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTableSectionElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTableSectionElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTABLESECTIONELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTextAreaElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTextAreaElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTEXTAREAELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLTitleElement' (Type: 'attribute' ExtAttr: '')
        "HTMLTitleElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLTITLEELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLUListElement' (Type: 'attribute' ExtAttr: '')
        "HTMLUListElement",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLULISTELEMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLCollection' (Type: 'attribute' ExtAttr: '')
        "HTMLCollection",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLCOLLECTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'HTMLAllCollection' (Type: 'attribute' ExtAttr: '')
        "HTMLAllCollection",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::HTMLALLCOLLECTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Image' (Type: 'attribute' ExtAttr: 'CustomGetter')
        "Image",
        V8DOMWindow::ImageAccessorGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Option' (Type: 'attribute' ExtAttr: 'CustomGetter')
        "Option",
        V8DOMWindow::OptionAccessorGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'CanvasRenderingContext2D' (Type: 'attribute' ExtAttr: '')
        "CanvasRenderingContext2D",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CANVASRENDERINGCONTEXT2D,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'ImageData' (Type: 'attribute' ExtAttr: '')
        "ImageData",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::IMAGEDATA,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLRenderingContext' (Type: 'attribute' ExtAttr: 'Conditional')
        "WebGLRenderingContext",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLRENDERINGCONTEXT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)
    {
        // Attribute 'TextMetrics' (Type: 'attribute' ExtAttr: '')
        "TextMetrics",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::TEXTMETRICS,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLArrayBuffer' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLArrayBuffer",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLARRAYBUFFER,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLByteArray' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLByteArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLBYTEARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLUnsignedByteArray' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLUnsignedByteArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLUNSIGNEDBYTEARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLShortArray' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLShortArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLSHORTARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLUnsignedShortArray' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLUnsignedShortArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLUNSIGNEDSHORTARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLIntArray' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLIntArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLINTARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLUnsignedIntArray' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLUnsignedIntArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLUNSIGNEDINTARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)

#if ENABLE(3D_CANVAS)
    {
        // Attribute 'WebGLFloatArray' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "WebGLFloatArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBGLFLOATARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(3D_CANVAS)
    {
        // Attribute 'Event' (Type: 'attribute' ExtAttr: '')
        "Event",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::EVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'BeforeLoadEvent' (Type: 'attribute' ExtAttr: '')
        "BeforeLoadEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::BEFORELOADEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'KeyboardEvent' (Type: 'attribute' ExtAttr: '')
        "KeyboardEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::KEYBOARDEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'MouseEvent' (Type: 'attribute' ExtAttr: '')
        "MouseEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::MOUSEEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'MutationEvent' (Type: 'attribute' ExtAttr: '')
        "MutationEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::MUTATIONEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'OverflowEvent' (Type: 'attribute' ExtAttr: '')
        "OverflowEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::OVERFLOWEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'PageTransitionEvent' (Type: 'attribute' ExtAttr: '')
        "PageTransitionEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::PAGETRANSITIONEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'ProgressEvent' (Type: 'attribute' ExtAttr: '')
        "ProgressEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::PROGRESSEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'TextEvent' (Type: 'attribute' ExtAttr: '')
        "TextEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::TEXTEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'UIEvent' (Type: 'attribute' ExtAttr: '')
        "UIEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::UIEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WebKitAnimationEvent' (Type: 'attribute' ExtAttr: '')
        "WebKitAnimationEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBKITANIMATIONEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WebKitTransitionEvent' (Type: 'attribute' ExtAttr: '')
        "WebKitTransitionEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBKITTRANSITIONEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WheelEvent' (Type: 'attribute' ExtAttr: '')
        "WheelEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WHEELEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'MessageEvent' (Type: 'attribute' ExtAttr: '')
        "MessageEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::MESSAGEEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'EventException' (Type: 'attribute' ExtAttr: '')
        "EventException",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::EVENTEXCEPTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WebKitCSSKeyframeRule' (Type: 'attribute' ExtAttr: '')
        "WebKitCSSKeyframeRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBKITCSSKEYFRAMERULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WebKitCSSKeyframesRule' (Type: 'attribute' ExtAttr: '')
        "WebKitCSSKeyframesRule",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBKITCSSKEYFRAMESRULE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WebKitCSSMatrix' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
        "WebKitCSSMatrix",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBKITCSSMATRIX,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WebKitPoint' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
        "WebKitPoint",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::WEBKITPOINT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Clipboard' (Type: 'attribute' ExtAttr: '')
        "Clipboard",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CLIPBOARD,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'File' (Type: 'attribute' ExtAttr: '')
        "File",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::FILE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'FileList' (Type: 'attribute' ExtAttr: '')
        "FileList",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::FILELIST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Blob' (Type: 'attribute' ExtAttr: '')
        "Blob",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::BLOB,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'NodeFilter' (Type: 'attribute' ExtAttr: '')
        "NodeFilter",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::NODEFILTER,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Range' (Type: 'attribute' ExtAttr: '')
        "Range",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::RANGE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'RangeException' (Type: 'attribute' ExtAttr: '')
        "RangeException",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::RANGEEXCEPTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'XMLDocument' (Type: 'attribute' ExtAttr: '')
        "XMLDocument",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::DOCUMENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'DOMParser' (Type: 'attribute' ExtAttr: '')
        "DOMParser",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::DOMPARSER,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'XMLSerializer' (Type: 'attribute' ExtAttr: '')
        "XMLSerializer",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::XMLSERIALIZER,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'XMLHttpRequest' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
        "XMLHttpRequest",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::XMLHTTPREQUEST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'XMLHttpRequestUpload' (Type: 'attribute' ExtAttr: '')
        "XMLHttpRequestUpload",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::XMLHTTPREQUESTUPLOAD,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'XMLHttpRequestException' (Type: 'attribute' ExtAttr: '')
        "XMLHttpRequestException",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::XMLHTTPREQUESTEXCEPTION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#if ENABLE(XSLT)
    {
        // Attribute 'XSLTProcessor' (Type: 'attribute' ExtAttr: 'JSCCustomGetter Conditional')
        "XSLTProcessor",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::XSLTPROCESSOR,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },

#endif // ENABLE(XSLT)
    {
        // Attribute 'Plugin' (Type: 'attribute' ExtAttr: '')
        "Plugin",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::PLUGIN,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'PluginArray' (Type: 'attribute' ExtAttr: '')
        "PluginArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::PLUGINARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'MimeType' (Type: 'attribute' ExtAttr: '')
        "MimeType",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::MIMETYPE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'MimeTypeArray' (Type: 'attribute' ExtAttr: '')
        "MimeTypeArray",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::MIMETYPEARRAY,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'ClientRect' (Type: 'attribute' ExtAttr: '')
        "ClientRect",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CLIENTRECT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'ClientRectList' (Type: 'attribute' ExtAttr: '')
        "ClientRectList",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::CLIENTRECTLIST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'Storage' (Type: 'attribute' ExtAttr: '')
        "Storage",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::STORAGE,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'StorageEvent' (Type: 'attribute' ExtAttr: '')
        "StorageEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::STORAGEEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'TouchEvent' (Type: 'attribute' ExtAttr: '')
        "TouchEvent",
        DOMWindowInternal::DOMWindowConstructorGetter,
        0,
        V8ClassIndex::TOUCHEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
};
static const BatchedCallback DOMWindow_callbacks[] = {
  {"getSelection", DOMWindowInternal::getSelectionCallback},
  {"print", DOMWindowInternal::printCallback},
  {"stop", DOMWindowInternal::stopCallback},
  {"open", V8DOMWindow::openCallback},
  {"showModalDialog", V8DOMWindow::showModalDialogCallback},
  {"alert", DOMWindowInternal::alertCallback},
  {"confirm", DOMWindowInternal::confirmCallback},
  {"prompt", DOMWindowInternal::promptCallback},
  {"find", DOMWindowInternal::findCallback},
  {"scrollBy", DOMWindowInternal::scrollByCallback},
  {"scrollTo", DOMWindowInternal::scrollToCallback},
  {"scroll", DOMWindowInternal::scrollCallback},
  {"moveBy", DOMWindowInternal::moveByCallback},
  {"moveTo", DOMWindowInternal::moveToCallback},
  {"resizeBy", DOMWindowInternal::resizeByCallback},
  {"resizeTo", DOMWindowInternal::resizeToCallback},
  {"setTimeout", V8DOMWindow::setTimeoutCallback},
  {"clearTimeout", DOMWindowInternal::clearTimeoutCallback},
  {"setInterval", V8DOMWindow::setIntervalCallback},
  {"clearInterval", DOMWindowInternal::clearIntervalCallback},
  {"atob", V8DOMWindow::atobCallback},
  {"btoa", V8DOMWindow::btoaCallback},
  {"addEventListener", V8DOMWindow::addEventListenerCallback},
  {"removeEventListener", V8DOMWindow::removeEventListenerCallback},
  {"captureEvents", V8DOMWindow::captureEventsCallback},
  {"releaseEvents", V8DOMWindow::releaseEventsCallback},
};
static v8::Persistent<v8::ObjectTemplate> ConfigureShadowObjectTemplate(v8::Persistent<v8::ObjectTemplate> templ) {
  batchConfigureAttributes(templ,
                           v8::Handle<v8::ObjectTemplate>(),
                           shadow_attrs,
                           sizeof(shadow_attrs)/sizeof(*shadow_attrs));

  // Install a security handler with V8.
  templ->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::Integer::New(V8ClassIndex::DOMWINDOW));
  templ->SetInternalFieldCount(V8DOMWindow::internalFieldCount);
  return templ;
}
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DOMWindowTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "DOMWindow",
      v8::Persistent<v8::FunctionTemplate>(), V8DOMWindow::internalFieldCount,
      DOMWindow_attrs, sizeof(DOMWindow_attrs)/sizeof(*DOMWindow_attrs),
      DOMWindow_callbacks, sizeof(DOMWindow_callbacks)/sizeof(*DOMWindow_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
    if (RuntimeEnabledFeatures::applicationCacheEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'applicationCache' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
            "applicationCache",
            DOMWindowInternal::applicationCacheAttrGetter,
            0,
            V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::None),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::sessionStorageEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'sessionStorage' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
            "sessionStorage",
            DOMWindowInternal::sessionStorageAttrGetter,
            0,
            V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::None),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }
    if (RuntimeEnabledFeatures::localStorageEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'localStorage' (Type: 'readonly attribute' ExtAttr: 'EnabledAtRuntime')
            "localStorage",
            DOMWindowInternal::localStorageAttrGetter,
            0,
            V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::None),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::audioEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'Audio' (Type: 'attribute' ExtAttr: 'CustomGetter EnabledAtRuntime Conditional')
            "Audio",
            V8DOMWindow::AudioAccessorGetter,
            0,
            V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::ReadOnly),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::htmlAudioElementEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'HTMLAudioElement' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
            "HTMLAudioElement",
            DOMWindowInternal::DOMWindowConstructorGetter,
            0,
            V8ClassIndex::HTMLAUDIOELEMENT,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::ReadOnly),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::htmlMediaElementEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'HTMLMediaElement' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
            "HTMLMediaElement",
            DOMWindowInternal::DOMWindowConstructorGetter,
            0,
            V8ClassIndex::HTMLMEDIAELEMENT,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::ReadOnly),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::htmlVideoElementEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'HTMLVideoElement' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
            "HTMLVideoElement",
            DOMWindowInternal::DOMWindowConstructorGetter,
            0,
            V8ClassIndex::HTMLVIDEOELEMENT,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::ReadOnly),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)

#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::mediaErrorEnabled()) {
        static const BatchedAttribute attrData =\
        {
            // Attribute 'MediaError' (Type: 'attribute' ExtAttr: 'EnabledAtRuntime Conditional')
            "MediaError",
            DOMWindowInternal::DOMWindowConstructorGetter,
            0,
            V8ClassIndex::MEDIAERROR,
            static_cast<v8::AccessControl>(v8::DEFAULT),
            static_cast<v8::PropertyAttribute>(v8::ReadOnly),
            0 /* on instance */
        };
        configureAttribute(instance, proto, attrData);
    }

#endif // ENABLE(VIDEO)
  desc->PrototypeTemplate()->SetIndexedPropertyHandler(V8DOMWindow::indexedPropertyGetter, 0, 0, 0);
  desc->PrototypeTemplate()->SetNamedPropertyHandler(V8DOMWindow::namedPropertyGetter, 0, 0, 0, 0);

  // Function 'focus' (ExtAttr: 'DoNotCheckDomainSecurity')
   proto->SetAccessor(
      v8::String::New("focus"),
      DOMWindowInternal::focusAttrGetter,
      0,
      v8::Handle<v8::Value>(),
      v8::ALL_CAN_READ,
      static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::ReadOnly));

  // Function 'blur' (ExtAttr: 'DoNotCheckDomainSecurity')
   proto->SetAccessor(
      v8::String::New("blur"),
      DOMWindowInternal::blurAttrGetter,
      0,
      v8::Handle<v8::Value>(),
      v8::ALL_CAN_READ,
      static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::ReadOnly));

  // Function 'close' (ExtAttr: 'DoNotCheckDomainSecurity')
   proto->SetAccessor(
      v8::String::New("close"),
      DOMWindowInternal::closeAttrGetter,
      0,
      v8::Handle<v8::Value>(),
      v8::ALL_CAN_READ,
      static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::ReadOnly));

  // Custom Signature 'getComputedStyle'
  const int getComputedStyle_argc = 2;
  v8::Handle<v8::FunctionTemplate> getComputedStyle_argv[getComputedStyle_argc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> getComputedStyle_signature = v8::Signature::New(desc, getComputedStyle_argc, getComputedStyle_argv);
  proto->Set(v8::String::New("getComputedStyle"), v8::FunctionTemplate::New(DOMWindowInternal::getComputedStyleCallback, v8::Handle<v8::Value>(), getComputedStyle_signature));

  // Custom Signature 'getMatchedCSSRules'
  const int getMatchedCSSRules_argc = 3;
  v8::Handle<v8::FunctionTemplate> getMatchedCSSRules_argv[getMatchedCSSRules_argc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> getMatchedCSSRules_signature = v8::Signature::New(desc, getMatchedCSSRules_argc, getMatchedCSSRules_argv);
  proto->Set(v8::String::New("getMatchedCSSRules"), v8::FunctionTemplate::New(DOMWindowInternal::getMatchedCSSRulesCallback, v8::Handle<v8::Value>(), getMatchedCSSRules_signature));

  // Custom Signature 'webkitConvertPointFromPageToNode'
  const int webkitConvertPointFromPageToNode_argc = 2;
  v8::Handle<v8::FunctionTemplate> webkitConvertPointFromPageToNode_argv[webkitConvertPointFromPageToNode_argc] = { V8Node::GetRawTemplate(), V8WebKitPoint::GetRawTemplate() };
  v8::Handle<v8::Signature> webkitConvertPointFromPageToNode_signature = v8::Signature::New(desc, webkitConvertPointFromPageToNode_argc, webkitConvertPointFromPageToNode_argv);
  proto->Set(v8::String::New("webkitConvertPointFromPageToNode"), v8::FunctionTemplate::New(DOMWindowInternal::webkitConvertPointFromPageToNodeCallback, v8::Handle<v8::Value>(), webkitConvertPointFromPageToNode_signature));

  // Custom Signature 'webkitConvertPointFromNodeToPage'
  const int webkitConvertPointFromNodeToPage_argc = 2;
  v8::Handle<v8::FunctionTemplate> webkitConvertPointFromNodeToPage_argv[webkitConvertPointFromNodeToPage_argc] = { V8Node::GetRawTemplate(), V8WebKitPoint::GetRawTemplate() };
  v8::Handle<v8::Signature> webkitConvertPointFromNodeToPage_signature = v8::Signature::New(desc, webkitConvertPointFromNodeToPage_argc, webkitConvertPointFromNodeToPage_argv);
  proto->Set(v8::String::New("webkitConvertPointFromNodeToPage"), v8::FunctionTemplate::New(DOMWindowInternal::webkitConvertPointFromNodeToPageCallback, v8::Handle<v8::Value>(), webkitConvertPointFromNodeToPage_signature));
  if (RuntimeEnabledFeatures::openDatabaseEnabled())
proto->Set(v8::String::New("openDatabase"), v8::FunctionTemplate::New(DOMWindowInternal::openDatabaseCallback, v8::Handle<v8::Value>(), default_signature));

  // Function 'postMessage' (ExtAttr: 'Custom DoNotCheckDomainSecurity')
   proto->SetAccessor(
      v8::String::New("postMessage"),
      DOMWindowInternal::postMessageAttrGetter,
      0,
      v8::Handle<v8::Value>(),
      v8::ALL_CAN_READ,
      static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::ReadOnly));

  // Custom Signature 'dispatchEvent'
  const int dispatchEvent_argc = 1;
  v8::Handle<v8::FunctionTemplate> dispatchEvent_argv[dispatchEvent_argc] = { V8Event::GetRawTemplate() };
  v8::Handle<v8::Signature> dispatchEvent_signature = v8::Signature::New(desc, dispatchEvent_argc, dispatchEvent_argv);
  proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(DOMWindowInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEvent_signature));

  // Function 'toString' (ExtAttr: 'Custom DoNotCheckDomainSecurity V8DoNotCheckSignature DontEnum')
   proto->SetAccessor(
      v8::String::New("toString"),
      DOMWindowInternal::toStringAttrGetter,
      0,
      v8::Handle<v8::Value>(),
      v8::ALL_CAN_READ,
      static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::DontEnum|v8::ReadOnly));

  proto->SetInternalFieldCount(V8DOMWindow::internalFieldCount);
  desc->SetHiddenPrototype(true);
  instance->SetInternalFieldCount(V8DOMWindow::internalFieldCount);
  // Set access check callbacks, but turned off initially.
  // When a context is detached from a frame, turn on the access check.
  // Turning on checks also invalidates inline caches of the object.
  instance->SetAccessCheckCallbacks(V8DOMWindow::namedSecurityCheck, V8DOMWindow::indexedSecurityCheck, v8::Integer::New(V8ClassIndex::DOMWINDOW), false);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DOMWindow::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DOMWindow_raw_cache_ = createRawTemplate();
  return V8DOMWindow_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8DOMWindow::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DOMWindow_cache_ = ConfigureV8DOMWindowTemplate(GetRawTemplate());
  return V8DOMWindow_cache_;
}

DOMWindow* V8DOMWindow::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<DOMWindow*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8DOMWindow::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}

v8::Persistent<v8::ObjectTemplate> V8DOMWindow::GetShadowObjectTemplate() {
  static v8::Persistent<v8::ObjectTemplate> V8DOMWindowShadowObject_cache_;
  if (V8DOMWindowShadowObject_cache_.IsEmpty()) {
    V8DOMWindowShadowObject_cache_ = v8::Persistent<v8::ObjectTemplate>::New(v8::ObjectTemplate::New());
    ConfigureShadowObjectTemplate(V8DOMWindowShadowObject_cache_);
  }
  return V8DOMWindowShadowObject_cache_;
}

v8::Handle<v8::Object> V8DOMWindow::wrap(DOMWindow* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::DOMWINDOW, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<DOMWindow > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

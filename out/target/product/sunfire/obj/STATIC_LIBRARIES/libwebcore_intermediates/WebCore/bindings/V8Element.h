/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef V8Element_H
#define V8Element_H

#include <v8.h>
#include <wtf/HashMap.h>
#include "StringHash.h"
#include "V8Index.h"
#include "Element.h"

namespace WebCore {

class V8Element {

 public:
  static bool HasInstance(v8::Handle<v8::Value> value);
  static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
  static v8::Persistent<v8::FunctionTemplate> GetTemplate();
  static Element* toNative(v8::Handle<v8::Object>);
  static v8::Handle<v8::Object> wrap(Element*, bool forceNewObject = false);
  static v8::Handle<v8::Value> getAttributeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setAttributeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> removeAttributeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getAttributeNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setAttributeNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> removeAttributeNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getAttributeNSCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setAttributeNSCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> removeAttributeNSCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getAttributeNodeNSCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setAttributeNodeNSCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> hasAttributeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> hasAttributeNSCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> focusCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> blurCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scrollIntoViewCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> containsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scrollIntoViewIfNeededCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scrollByLinesCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scrollByPagesCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> querySelectorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> querySelectorAllCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> webkitMatchesSelectorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getClientRectsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getBoundingClientRectCallback(const v8::Arguments&);
  static const int cacheIndex = v8DefaultWrapperInternalFieldCount + 0;
  static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 1;
};

  v8::Handle<v8::Value> toV8(Element*, bool forceNewObject = false);
  v8::Handle<v8::Value> toV8(PassRefPtr<Element >, bool forceNewObject = false);
}

#endif // V8Element_H

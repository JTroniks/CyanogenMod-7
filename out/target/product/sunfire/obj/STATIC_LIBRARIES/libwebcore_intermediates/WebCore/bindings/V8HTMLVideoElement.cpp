/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(VIDEO)

#include "ExceptionCode.h"
#include "V8HTMLMediaElement.h"
#include "V8HTMLVideoElement.h"

namespace WebCore {
namespace HTMLVideoElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.width._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->width());
  }

  static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.width._set");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    unsigned v = toInt32(value);
    imp->setWidth(v);
    return;
  }

  static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.height._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->height());
  }

  static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.height._set");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    unsigned v = toInt32(value);
    imp->setHeight(v);
    return;
  }

  static v8::Handle<v8::Value> videoWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.videoWidth._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->videoWidth());
  }

  static v8::Handle<v8::Value> videoHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.videoHeight._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->videoHeight());
  }

  static v8::Handle<v8::Value> posterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.poster._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8String(imp->poster());
  }

  static void posterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.poster._set");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setPoster(v);
    return;
  }

  static v8::Handle<v8::Value> webkitSupportsFullscreenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.webkitSupportsFullscreen._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8Boolean(imp->webkitSupportsFullscreen());
  }

  static v8::Handle<v8::Value> webkitDisplayingFullscreenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLVideoElement.webkitDisplayingFullscreen._get");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(info.Holder());
    return v8Boolean(imp->webkitDisplayingFullscreen());
  }

  static v8::Handle<v8::Value> webkitEnterFullScreenCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLVideoElement.webkitEnterFullScreen");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->webkitEnterFullScreen(processingUserGesture(), ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> webkitExitFullScreenCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLVideoElement.webkitExitFullScreen");
    HTMLVideoElement* imp = V8HTMLVideoElement::toNative(args.Holder());
    imp->webkitExitFullScreen();
    return v8::Handle<v8::Value>();
  }

} // namespace HTMLVideoElementInternal

static const BatchedAttribute HTMLVideoElement_attrs[] = {
    {
        // Attribute 'width' (Type: 'attribute' ExtAttr: '')
        "width",
        HTMLVideoElementInternal::widthAttrGetter,
        HTMLVideoElementInternal::widthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'height' (Type: 'attribute' ExtAttr: '')
        "height",
        HTMLVideoElementInternal::heightAttrGetter,
        HTMLVideoElementInternal::heightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'videoWidth' (Type: 'readonly attribute' ExtAttr: '')
        "videoWidth",
        HTMLVideoElementInternal::videoWidthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'videoHeight' (Type: 'readonly attribute' ExtAttr: '')
        "videoHeight",
        HTMLVideoElementInternal::videoHeightAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'poster' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "poster",
        HTMLVideoElementInternal::posterAttrGetter,
        HTMLVideoElementInternal::posterAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'webkitSupportsFullscreen' (Type: 'readonly attribute' ExtAttr: '')
        "webkitSupportsFullscreen",
        HTMLVideoElementInternal::webkitSupportsFullscreenAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'webkitDisplayingFullscreen' (Type: 'readonly attribute' ExtAttr: '')
        "webkitDisplayingFullscreen",
        HTMLVideoElementInternal::webkitDisplayingFullscreenAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback HTMLVideoElement_callbacks[] = {
  {"webkitEnterFullScreen", HTMLVideoElementInternal::webkitEnterFullScreenCallback},
  {"webkitExitFullScreen", HTMLVideoElementInternal::webkitExitFullScreenCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLVideoElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLVideoElement",
      V8HTMLMediaElement::GetTemplate(), V8HTMLVideoElement::internalFieldCount,
      HTMLVideoElement_attrs, sizeof(HTMLVideoElement_attrs)/sizeof(*HTMLVideoElement_attrs),
      HTMLVideoElement_callbacks, sizeof(HTMLVideoElement_callbacks)/sizeof(*HTMLVideoElement_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLVideoElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLVideoElement_raw_cache_ = createRawTemplate();
  return V8HTMLVideoElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLVideoElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLVideoElement_cache_ = ConfigureV8HTMLVideoElementTemplate(GetRawTemplate());
  return V8HTMLVideoElement_cache_;
}

HTMLVideoElement* V8HTMLVideoElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLVideoElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLVideoElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLVideoElement::wrap(HTMLVideoElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLVIDEOELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLVideoElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLVideoElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLVideoElement::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(VIDEO)

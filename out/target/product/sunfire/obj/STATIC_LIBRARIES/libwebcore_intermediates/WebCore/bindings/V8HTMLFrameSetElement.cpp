/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "EventListener.h"
#include "V8AbstractEventListener.h"
#include "V8HTMLElement.h"
#include "V8HTMLFrameSetElement.h"

namespace WebCore {
namespace HTMLFrameSetElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> colsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.cols._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return v8String(imp->cols());
  }

  static void colsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.cols._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setCols(v);
    return;
  }

  static v8::Handle<v8::Value> rowsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.rows._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return v8String(imp->rows());
  }

  static void rowsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.rows._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setRows(v);
    return;
  }

  static v8::Handle<v8::Value> onbeforeunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onbeforeunload._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onbeforeunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforeunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforeunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onbeforeunload._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforeunload(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnbeforeunload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onhashchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onhashchange._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onhashchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onhashchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onhashchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onhashchange._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onhashchange(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnhashchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onmessage._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onmessage._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onofflineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onoffline._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onoffline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onoffline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onofflineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onoffline._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onoffline(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnoffline(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ononlineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.ononline._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->ononline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ononline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ononlineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.ononline._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ononline(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnonline(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpopstateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onpopstate._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onpopstate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpopstate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpopstateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onpopstate._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onpopstate(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnpopstate(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onresizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onresize._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onresize() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onresize())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onresizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onresize._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onresize(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnresize(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onstorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onstorage._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onstorage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstorage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onstorageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onstorage._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onstorage(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnstorage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onunload._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onunload._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onunload(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnunload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onorientationchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onorientationchange._get");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    return imp->onorientationchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onorientationchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onorientationchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameSetElement.onorientationchange._set");
    HTMLFrameSetElement* imp = V8HTMLFrameSetElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onorientationchange(), value, V8HTMLFrameSetElement::cacheIndex);
    imp->setOnorientationchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

} // namespace HTMLFrameSetElementInternal

static const BatchedAttribute HTMLFrameSetElement_attrs[] = {
    {
        // Attribute 'cols' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "cols",
        HTMLFrameSetElementInternal::colsAttrGetter,
        HTMLFrameSetElementInternal::colsAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rows' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "rows",
        HTMLFrameSetElementInternal::rowsAttrGetter,
        HTMLFrameSetElementInternal::rowsAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforeunload' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforeunload",
        HTMLFrameSetElementInternal::onbeforeunloadAttrGetter,
        HTMLFrameSetElementInternal::onbeforeunloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onhashchange' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onhashchange",
        HTMLFrameSetElementInternal::onhashchangeAttrGetter,
        HTMLFrameSetElementInternal::onhashchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmessage' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmessage",
        HTMLFrameSetElementInternal::onmessageAttrGetter,
        HTMLFrameSetElementInternal::onmessageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onoffline' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onoffline",
        HTMLFrameSetElementInternal::onofflineAttrGetter,
        HTMLFrameSetElementInternal::onofflineAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ononline' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ononline",
        HTMLFrameSetElementInternal::ononlineAttrGetter,
        HTMLFrameSetElementInternal::ononlineAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onpopstate' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onpopstate",
        HTMLFrameSetElementInternal::onpopstateAttrGetter,
        HTMLFrameSetElementInternal::onpopstateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onresize' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onresize",
        HTMLFrameSetElementInternal::onresizeAttrGetter,
        HTMLFrameSetElementInternal::onresizeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onstorage' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onstorage",
        HTMLFrameSetElementInternal::onstorageAttrGetter,
        HTMLFrameSetElementInternal::onstorageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onunload' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onunload",
        HTMLFrameSetElementInternal::onunloadAttrGetter,
        HTMLFrameSetElementInternal::onunloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onorientationchange' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onorientationchange",
        HTMLFrameSetElementInternal::onorientationchangeAttrGetter,
        HTMLFrameSetElementInternal::onorientationchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLFrameSetElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLFrameSetElement",
      V8HTMLElement::GetTemplate(), V8HTMLFrameSetElement::internalFieldCount,
      HTMLFrameSetElement_attrs, sizeof(HTMLFrameSetElement_attrs)/sizeof(*HTMLFrameSetElement_attrs),
      NULL, 0);
  
  desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLFrameSetElement::namedPropertyGetter, 0, 0, 0, 0);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement_raw_cache_ = createRawTemplate();
  return V8HTMLFrameSetElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLFrameSetElement_cache_ = ConfigureV8HTMLFrameSetElementTemplate(GetRawTemplate());
  return V8HTMLFrameSetElement_cache_;
}

HTMLFrameSetElement* V8HTMLFrameSetElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLFrameSetElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLFrameSetElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLFrameSetElement::wrap(HTMLFrameSetElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLFRAMESETELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLFrameSetElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLFrameSetElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLFrameSetElement::wrap(impl);
}
} // namespace WebCore

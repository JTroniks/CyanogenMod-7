/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "V8CharacterData.h"
#include "V8Text.h"

namespace WebCore {
namespace TextInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> wholeTextAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Text.wholeText._get");
    Text* imp = V8Text::toNative(info.Holder());
    return v8String(imp->wholeText());
  }

  static v8::Handle<v8::Value> splitTextCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Text.splitText");
    Text* imp = V8Text::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int offset = toInt32(args[0]);
    if (UNLIKELY(offset < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    RefPtr<Text> result = imp->splitText(offset, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> replaceWholeTextCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Text.replaceWholeText");
    Text* imp = V8Text::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> content = args[0];
    RefPtr<Text> result = imp->replaceWholeText(content, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace TextInternal

static const BatchedAttribute Text_attrs[] = {
    {
        // Attribute 'wholeText' (Type: 'readonly attribute' ExtAttr: '')
        "wholeText",
        TextInternal::wholeTextAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback Text_callbacks[] = {
  {"splitText", TextInternal::splitTextCallback},
  {"replaceWholeText", TextInternal::replaceWholeTextCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8TextTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "Text",
      V8CharacterData::GetTemplate(), V8Text::internalFieldCount,
      Text_attrs, sizeof(Text_attrs)/sizeof(*Text_attrs),
      Text_callbacks, sizeof(Text_callbacks)/sizeof(*Text_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Text::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Text_raw_cache_ = createRawTemplate();
  return V8Text_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8Text::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Text_cache_ = ConfigureV8TextTemplate(GetRawTemplate());
  return V8Text_cache_;
}

Text* V8Text::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<Text*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Text::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Text::wrap(Text* impl, bool forceNewObject) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  if (!forceNewObject) {
  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  }

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::TEXT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Text > impl, bool forceNewObject) {
  return toV8(impl.get(), forceNewObject);
}

v8::Handle<v8::Value> toV8(Text* impl, bool forceNewObject) {
  if (!impl)
    return v8::Null();
  return V8Text::wrap(impl, forceNewObject);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(INSPECTOR)

#include "V8InspectorFrontendHost.h"

namespace WebCore {
namespace InspectorFrontendHostInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> loadedCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.loaded");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->loaded();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> attachCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.attach");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->attach();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> detachCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.detach");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->detach();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> closeWindowCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.closeWindow");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->closeWindow();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> windowUnloadingCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.windowUnloading");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    imp->windowUnloading();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> setAttachedWindowHeightCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.setAttachedWindowHeight");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    unsigned height = toInt32(args[0]);
    imp->setAttachedWindowHeight(height);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> moveWindowByCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.moveWindowBy");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    float x = static_cast<float>(args[0]->NumberValue());
    float y = static_cast<float>(args[1]->NumberValue());
    imp->moveWindowBy(x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> localizedStringsURLCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.localizedStringsURL");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->localizedStringsURL());
  }

  static v8::Handle<v8::Value> hiddenPanelsCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.hiddenPanels");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->hiddenPanels());
  }

  static v8::Handle<v8::Value> platformCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.platform");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->platform());
  }

  static v8::Handle<v8::Value> portCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.port");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    return v8String(imp->port());
  }

  static v8::Handle<v8::Value> copyTextCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InspectorFrontendHost.copyText");
    InspectorFrontendHost* imp = V8InspectorFrontendHost::toNative(args.Holder());
    V8Parameter<> text = args[0];
    imp->copyText(text);
    return v8::Handle<v8::Value>();
  }

} // namespace InspectorFrontendHostInternal

static const BatchedCallback InspectorFrontendHost_callbacks[] = {
  {"loaded", InspectorFrontendHostInternal::loadedCallback},
  {"attach", InspectorFrontendHostInternal::attachCallback},
  {"detach", InspectorFrontendHostInternal::detachCallback},
  {"closeWindow", InspectorFrontendHostInternal::closeWindowCallback},
  {"windowUnloading", InspectorFrontendHostInternal::windowUnloadingCallback},
  {"setAttachedWindowHeight", InspectorFrontendHostInternal::setAttachedWindowHeightCallback},
  {"moveWindowBy", InspectorFrontendHostInternal::moveWindowByCallback},
  {"localizedStringsURL", InspectorFrontendHostInternal::localizedStringsURLCallback},
  {"hiddenPanels", InspectorFrontendHostInternal::hiddenPanelsCallback},
  {"platform", InspectorFrontendHostInternal::platformCallback},
  {"port", InspectorFrontendHostInternal::portCallback},
  {"copyText", InspectorFrontendHostInternal::copyTextCallback},
  {"showContextMenu", V8InspectorFrontendHost::showContextMenuCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8InspectorFrontendHostTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "InspectorFrontendHost",
      v8::Persistent<v8::FunctionTemplate>(), V8InspectorFrontendHost::internalFieldCount,
      NULL, 0,
      InspectorFrontendHost_callbacks, sizeof(InspectorFrontendHost_callbacks)/sizeof(*InspectorFrontendHost_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost_raw_cache_ = createRawTemplate();
  return V8InspectorFrontendHost_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8InspectorFrontendHost_cache_ = ConfigureV8InspectorFrontendHostTemplate(GetRawTemplate());
  return V8InspectorFrontendHost_cache_;
}

InspectorFrontendHost* V8InspectorFrontendHost::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<InspectorFrontendHost*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8InspectorFrontendHost::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8InspectorFrontendHost::wrap(InspectorFrontendHost* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::INSPECTORFRONTENDHOST, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<InspectorFrontendHost > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(InspectorFrontendHost* impl) {
  if (!impl)
    return v8::Null();
  return V8InspectorFrontendHost::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(INSPECTOR)

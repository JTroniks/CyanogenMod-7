/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(WORKERS)

#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8Event.h"
#include "V8WorkerContext.h"
#include "V8WorkerLocation.h"
#include "V8WorkerNavigator.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace WorkerContextInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> selfAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerContext.self._get");
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    return toV8(imp->self());
  }

  static v8::Handle<v8::Value> locationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerContext.location._get");
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    return toV8(imp->location());
  }

  static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerContext.onerror._get");
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerContext.onerror._set");
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8WorkerContext::cacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> navigatorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerContext.navigator._get");
    WorkerContext* imp = V8WorkerContext::toNative(info.Holder());
    return toV8(imp->navigator());
  }

  static v8::Handle<v8::Value> WorkerContextConstructorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerContext.constructors._get");
    v8::Handle<v8::Value> data = info.Data();
    ASSERT(data->IsNumber());
    V8ClassIndex::V8WrapperType type = V8ClassIndex::FromInt(data->Int32Value());
    return V8DOMWrapper::getConstructor(type, V8WorkerContext::toNative(info.Holder()));

    }

  static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WorkerContext.close");
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    imp->close();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clearTimeoutCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WorkerContext.clearTimeout");
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    int handle = toInt32(args[0]);
    imp->clearTimeout(handle);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clearIntervalCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WorkerContext.clearInterval");
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    int handle = toInt32(args[0]);
    imp->clearInterval(handle);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WorkerContext.dispatchEvent");
    WorkerContext* imp = V8WorkerContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Event* evt = V8Event::HasInstance(args[0]) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8Boolean(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace WorkerContextInternal

static const BatchedAttribute WorkerContext_attrs[] = {
    {
        // Attribute 'self' (Type: 'attribute' ExtAttr: 'Replaceable')
        "self",
        WorkerContextInternal::selfAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'location' (Type: 'attribute' ExtAttr: 'Replaceable')
        "location",
        WorkerContextInternal::locationAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
        "onerror",
        WorkerContextInternal::onerrorAttrGetter,
        WorkerContextInternal::onerrorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'navigator' (Type: 'attribute' ExtAttr: 'Replaceable')
        "navigator",
        WorkerContextInternal::navigatorAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'MessageEvent' (Type: 'attribute' ExtAttr: '')
        "MessageEvent",
        WorkerContextInternal::WorkerContextConstructorGetter,
        0,
        V8ClassIndex::MESSAGEEVENT,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'WorkerLocation' (Type: 'attribute' ExtAttr: '')
        "WorkerLocation",
        WorkerContextInternal::WorkerContextConstructorGetter,
        0,
        V8ClassIndex::WORKERLOCATION,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
    {
        // Attribute 'XMLHttpRequest' (Type: 'attribute' ExtAttr: 'JSCCustomGetter')
        "XMLHttpRequest",
        WorkerContextInternal::WorkerContextConstructorGetter,
        0,
        V8ClassIndex::XMLHTTPREQUEST,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::ReadOnly),
        0 /* on instance */
    },
};
static const BatchedCallback WorkerContext_callbacks[] = {
  {"close", WorkerContextInternal::closeCallback},
  {"importScripts", V8WorkerContext::importScriptsCallback},
  {"setTimeout", V8WorkerContext::setTimeoutCallback},
  {"clearTimeout", WorkerContextInternal::clearTimeoutCallback},
  {"setInterval", V8WorkerContext::setIntervalCallback},
  {"clearInterval", WorkerContextInternal::clearIntervalCallback},
  {"addEventListener", V8WorkerContext::addEventListenerCallback},
  {"removeEventListener", V8WorkerContext::removeEventListenerCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WorkerContextTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WorkerContext",
      v8::Persistent<v8::FunctionTemplate>(), V8WorkerContext::internalFieldCount,
      WorkerContext_attrs, sizeof(WorkerContext_attrs)/sizeof(*WorkerContext_attrs),
      WorkerContext_callbacks, sizeof(WorkerContext_callbacks)/sizeof(*WorkerContext_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'dispatchEvent'
  const int dispatchEvent_argc = 1;
  v8::Handle<v8::FunctionTemplate> dispatchEvent_argv[dispatchEvent_argc] = { V8Event::GetRawTemplate() };
  v8::Handle<v8::Signature> dispatchEvent_signature = v8::Signature::New(desc, dispatchEvent_argc, dispatchEvent_argv);
  proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(WorkerContextInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEvent_signature));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WorkerContext::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WorkerContext_raw_cache_ = createRawTemplate();
  return V8WorkerContext_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WorkerContext::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WorkerContext_cache_ = ConfigureV8WorkerContextTemplate(GetRawTemplate());
  return V8WorkerContext_cache_;
}

WorkerContext* V8WorkerContext::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WorkerContext*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WorkerContext::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WorkerContext::wrap(WorkerContext* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WORKERCONTEXT, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WorkerContext > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

#endif // ENABLE(WORKERS)

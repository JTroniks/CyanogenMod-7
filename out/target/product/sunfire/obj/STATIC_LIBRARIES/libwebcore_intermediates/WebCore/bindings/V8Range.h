/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef V8Range_H
#define V8Range_H

#include <v8.h>
#include <wtf/HashMap.h>
#include "StringHash.h"
#include "V8Index.h"
#include "Range.h"

namespace WebCore {

class V8Range {

 public:
  static bool HasInstance(v8::Handle<v8::Value> value);
  static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
  static v8::Persistent<v8::FunctionTemplate> GetTemplate();
  static Range* toNative(v8::Handle<v8::Object>);
  static v8::Handle<v8::Object> wrap(Range*);
  static v8::Handle<v8::Value> setStartCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setEndCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setStartBeforeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setStartAfterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setEndBeforeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setEndAfterCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> collapseCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> selectNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> selectNodeContentsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> compareBoundaryPointsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> deleteContentsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> extractContentsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> cloneContentsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> insertNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> surroundContentsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> cloneRangeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> toStringCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> detachCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getClientRectsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getBoundingClientRectCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createContextualFragmentCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> intersectsNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> compareNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> comparePointCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isPointInRangeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> expandCallback(const v8::Arguments&);
  static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 0;
};

  v8::Handle<v8::Value> toV8(Range*);
  v8::Handle<v8::Value> toV8(PassRefPtr<Range >);
}

#endif // V8Range_H

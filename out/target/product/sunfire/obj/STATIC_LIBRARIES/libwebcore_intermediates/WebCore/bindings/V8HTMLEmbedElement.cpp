/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "HTMLNames.h"
#include "V8Collection.h"
#include "V8HTMLElement.h"
#include "V8HTMLEmbedElement.h"

namespace WebCore {
namespace HTMLEmbedElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.align._get");
    return getElementStringAttr(info, HTMLNames::alignAttr);
  }

  static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.align._set");
    setElementStringAttr(info, HTMLNames::alignAttr, value);
  }

  static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.height._get");
    return getElementStringAttr(info, HTMLNames::heightAttr);
  }

  static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.height._set");
    setElementStringAttr(info, HTMLNames::heightAttr, value);
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
  }

  static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.src._get");
    return getElementStringAttr(info, HTMLNames::srcAttr);
  }

  static void srcAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.src._set");
    setElementStringAttr(info, HTMLNames::srcAttr, value);
  }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.type._get");
    return getElementStringAttr(info, HTMLNames::typeAttr);
  }

  static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.type._set");
    setElementStringAttr(info, HTMLNames::typeAttr, value);
  }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.width._get");
    return getElementStringAttr(info, HTMLNames::widthAttr);
  }

  static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLEmbedElement.width._set");
    setElementStringAttr(info, HTMLNames::widthAttr, value);
  }

} // namespace HTMLEmbedElementInternal

static const BatchedAttribute HTMLEmbedElement_attrs[] = {
    {
        // Attribute 'align' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "align",
        HTMLEmbedElementInternal::alignAttrGetter,
        HTMLEmbedElementInternal::alignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'height' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "height",
        HTMLEmbedElementInternal::heightAttrGetter,
        HTMLEmbedElementInternal::heightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "name",
        HTMLEmbedElementInternal::nameAttrGetter,
        HTMLEmbedElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'src' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "src",
        HTMLEmbedElementInternal::srcAttrGetter,
        HTMLEmbedElementInternal::srcAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'type' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "type",
        HTMLEmbedElementInternal::typeAttrGetter,
        HTMLEmbedElementInternal::typeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'width' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "width",
        HTMLEmbedElementInternal::widthAttrGetter,
        HTMLEmbedElementInternal::widthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLEmbedElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLEmbedElement",
      V8HTMLElement::GetTemplate(), V8HTMLEmbedElement::internalFieldCount,
      HTMLEmbedElement_attrs, sizeof(HTMLEmbedElement_attrs)/sizeof(*HTMLEmbedElement_attrs),
      NULL, 0);
  
  desc->InstanceTemplate()->SetIndexedPropertyHandler(V8HTMLEmbedElement::indexedPropertyGetter, V8HTMLEmbedElement::indexedPropertySetter, 0, 0);
  desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLEmbedElement::namedPropertyGetter, V8HTMLEmbedElement::namedPropertySetter, 0, 0, 0);
  desc->InstanceTemplate()->SetCallAsFunctionHandler(V8HTMLEmbedElement::callAsFunctionCallback);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLEmbedElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLEmbedElement_raw_cache_ = createRawTemplate();
  return V8HTMLEmbedElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLEmbedElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLEmbedElement_cache_ = ConfigureV8HTMLEmbedElementTemplate(GetRawTemplate());
  return V8HTMLEmbedElement_cache_;
}

HTMLEmbedElement* V8HTMLEmbedElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLEmbedElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLEmbedElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLEmbedElement::wrap(HTMLEmbedElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLEMBEDELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLEmbedElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLEmbedElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLEmbedElement::wrap(impl);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "EventListener.h"
#include "HTMLNames.h"
#include "V8AbstractEventListener.h"
#include "V8HTMLBodyElement.h"
#include "V8HTMLElement.h"

namespace WebCore {
namespace HTMLBodyElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> aLinkAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.aLink._get");
    return getElementStringAttr(info, HTMLNames::alinkAttr);
  }

  static void aLinkAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.aLink._set");
    setElementStringAttr(info, HTMLNames::alinkAttr, value);
  }

  static v8::Handle<v8::Value> backgroundAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.background._get");
    return getElementStringAttr(info, HTMLNames::backgroundAttr);
  }

  static void backgroundAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.background._set");
    setElementStringAttr(info, HTMLNames::backgroundAttr, value);
  }

  static v8::Handle<v8::Value> bgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.bgColor._get");
    return getElementStringAttr(info, HTMLNames::bgcolorAttr);
  }

  static void bgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.bgColor._set");
    setElementStringAttr(info, HTMLNames::bgcolorAttr, value);
  }

  static v8::Handle<v8::Value> linkAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.link._get");
    return getElementStringAttr(info, HTMLNames::linkAttr);
  }

  static void linkAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.link._set");
    setElementStringAttr(info, HTMLNames::linkAttr, value);
  }

  static v8::Handle<v8::Value> textAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.text._get");
    return getElementStringAttr(info, HTMLNames::textAttr);
  }

  static void textAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.text._set");
    setElementStringAttr(info, HTMLNames::textAttr, value);
  }

  static v8::Handle<v8::Value> vLinkAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.vLink._get");
    return getElementStringAttr(info, HTMLNames::vlinkAttr);
  }

  static void vLinkAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.vLink._set");
    setElementStringAttr(info, HTMLNames::vlinkAttr, value);
  }

  static v8::Handle<v8::Value> onbeforeunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onbeforeunload._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onbeforeunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforeunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforeunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onbeforeunload._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforeunload(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnbeforeunload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onhashchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onhashchange._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onhashchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onhashchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onhashchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onhashchange._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onhashchange(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnhashchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onmessage._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onmessage._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onofflineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onoffline._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onoffline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onoffline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onofflineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onoffline._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onoffline(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnoffline(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ononlineAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.ononline._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->ononline() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ononline())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ononlineAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.ononline._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ononline(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnonline(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpopstateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onpopstate._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onpopstate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpopstate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpopstateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onpopstate._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onpopstate(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnpopstate(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onresizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onresize._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onresize() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onresize())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onresizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onresize._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onresize(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnresize(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onstorageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onstorage._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onstorage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onstorage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onstorageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onstorage._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onstorage(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnstorage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onunloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onunload._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onunload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onunload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onunloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onunload._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onunload(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnunload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onorientationchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onorientationchange._get");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    return imp->onorientationchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onorientationchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onorientationchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLBodyElement.onorientationchange._set");
    HTMLBodyElement* imp = V8HTMLBodyElement::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onorientationchange(), value, V8HTMLBodyElement::cacheIndex);
    imp->setOnorientationchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

} // namespace HTMLBodyElementInternal

static const BatchedAttribute HTMLBodyElement_attrs[] = {
    {
        // Attribute 'aLink' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "aLink",
        HTMLBodyElementInternal::aLinkAttrGetter,
        HTMLBodyElementInternal::aLinkAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'background' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "background",
        HTMLBodyElementInternal::backgroundAttrGetter,
        HTMLBodyElementInternal::backgroundAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'bgColor' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "bgColor",
        HTMLBodyElementInternal::bgColorAttrGetter,
        HTMLBodyElementInternal::bgColorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'link' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "link",
        HTMLBodyElementInternal::linkAttrGetter,
        HTMLBodyElementInternal::linkAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'text' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "text",
        HTMLBodyElementInternal::textAttrGetter,
        HTMLBodyElementInternal::textAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'vLink' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "vLink",
        HTMLBodyElementInternal::vLinkAttrGetter,
        HTMLBodyElementInternal::vLinkAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforeunload' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforeunload",
        HTMLBodyElementInternal::onbeforeunloadAttrGetter,
        HTMLBodyElementInternal::onbeforeunloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onhashchange' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onhashchange",
        HTMLBodyElementInternal::onhashchangeAttrGetter,
        HTMLBodyElementInternal::onhashchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmessage' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmessage",
        HTMLBodyElementInternal::onmessageAttrGetter,
        HTMLBodyElementInternal::onmessageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onoffline' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onoffline",
        HTMLBodyElementInternal::onofflineAttrGetter,
        HTMLBodyElementInternal::onofflineAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ononline' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ononline",
        HTMLBodyElementInternal::ononlineAttrGetter,
        HTMLBodyElementInternal::ononlineAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onpopstate' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onpopstate",
        HTMLBodyElementInternal::onpopstateAttrGetter,
        HTMLBodyElementInternal::onpopstateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onresize' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onresize",
        HTMLBodyElementInternal::onresizeAttrGetter,
        HTMLBodyElementInternal::onresizeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onstorage' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onstorage",
        HTMLBodyElementInternal::onstorageAttrGetter,
        HTMLBodyElementInternal::onstorageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onunload' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onunload",
        HTMLBodyElementInternal::onunloadAttrGetter,
        HTMLBodyElementInternal::onunloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onorientationchange' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onorientationchange",
        HTMLBodyElementInternal::onorientationchangeAttrGetter,
        HTMLBodyElementInternal::onorientationchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLBodyElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLBodyElement",
      V8HTMLElement::GetTemplate(), V8HTMLBodyElement::internalFieldCount,
      HTMLBodyElement_attrs, sizeof(HTMLBodyElement_attrs)/sizeof(*HTMLBodyElement_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLBodyElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLBodyElement_raw_cache_ = createRawTemplate();
  return V8HTMLBodyElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLBodyElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLBodyElement_cache_ = ConfigureV8HTMLBodyElementTemplate(GetRawTemplate());
  return V8HTMLBodyElement_cache_;
}

HTMLBodyElement* V8HTMLBodyElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLBodyElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLBodyElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLBodyElement::wrap(HTMLBodyElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLBODYELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLBodyElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLBodyElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLBodyElement::wrap(impl);
}
} // namespace WebCore

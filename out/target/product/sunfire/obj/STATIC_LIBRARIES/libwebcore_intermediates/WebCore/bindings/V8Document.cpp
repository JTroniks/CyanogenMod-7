/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "CSSMutableStyleDeclaration.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8Attr.h"
#include "V8CDATASection.h"
#include "V8CSSStyleDeclaration.h"
#include "V8Comment.h"
#include "V8DOMSelection.h"
#include "V8DOMWindow.h"
#include "V8Document.h"
#include "V8DocumentFragment.h"
#include "V8DocumentType.h"
#include "V8Element.h"
#include "V8EntityReference.h"
#include "V8Event.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8HTMLHeadElement.h"
#include "V8Node.h"
#include "V8NodeIterator.h"
#include "V8NodeList.h"
#include "V8ProcessingInstruction.h"
#include "V8Range.h"
#include "V8StyleSheetList.h"
#include "V8Text.h"
#include "V8Touch.h"
#include "V8TouchList.h"
#include "V8TreeWalker.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace DocumentInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> doctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.doctype._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->doctype());
  }

  static v8::Handle<v8::Value> documentElementAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.documentElement._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->documentElement());
  }

  static v8::Handle<v8::Value> inputEncodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.inputEncoding._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->inputEncoding());
  }

  static v8::Handle<v8::Value> xmlEncodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.xmlEncoding._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->xmlEncoding());
  }

  static v8::Handle<v8::Value> xmlVersionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.xmlVersion._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->xmlVersion());
  }

  static void xmlVersionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.xmlVersion._set");
    Document* imp = V8Document::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    ExceptionCode ec = 0;
    imp->setXMLVersion(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> xmlStandaloneAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.xmlStandalone._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8Boolean(imp->xmlStandalone());
  }

  static void xmlStandaloneAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.xmlStandalone._set");
    Document* imp = V8Document::toNative(info.Holder());
    bool v = value->BooleanValue();
    ExceptionCode ec = 0;
    imp->setXMLStandalone(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> documentURIAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.documentURI._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->documentURI());
  }

  static void documentURIAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.documentURI._set");
    Document* imp = V8Document::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setDocumentURI(v);
    return;
  }

  static v8::Handle<v8::Value> defaultViewAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.defaultView._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->defaultView());
  }

  static v8::Handle<v8::Value> styleSheetsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.styleSheets._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->styleSheets());
  }

  static v8::Handle<v8::Value> titleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.title._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->title());
  }

  static void titleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.title._set");
    Document* imp = V8Document::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setTitle(v);
    return;
  }

  static v8::Handle<v8::Value> referrerAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.referrer._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->referrer());
  }

  static v8::Handle<v8::Value> domainAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.domain._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->domain());
  }

  static void domainAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.domain._set");
    Document* imp = V8Document::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    ExceptionCode ec = 0;
    imp->setDomain(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> URLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.URL._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->url());
  }

  static v8::Handle<v8::Value> cookieAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.cookie._get");
    Document* imp = V8Document::toNative(info.Holder());
    ExceptionCode ec = 0;
    String v = imp->cookie(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    return v8String(v);
  }

  static void cookieAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.cookie._set");
    Document* imp = V8Document::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    ExceptionCode ec = 0;
    imp->setCookie(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> bodyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.body._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->body());
  }

  static void bodyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.body._set");
    Document* imp = V8Document::toNative(info.Holder());
    HTMLElement* v = V8HTMLElement::HasInstance(value) ? V8HTMLElement::toNative(v8::Handle<v8::Object>::Cast(value)) : 0;
    ExceptionCode ec = 0;
    imp->setBody(WTF::getPtr(v), ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> headAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.head._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->head());
  }

  static v8::Handle<v8::Value> imagesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.images._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->images());
  }

  static v8::Handle<v8::Value> appletsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.applets._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->applets());
  }

  static v8::Handle<v8::Value> linksAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.links._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->links());
  }

  static v8::Handle<v8::Value> formsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.forms._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->forms());
  }

  static v8::Handle<v8::Value> anchorsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.anchors._get");
    Document* imp = V8Document::toNative(info.Holder());
    return toV8(imp->anchors());
  }

  static v8::Handle<v8::Value> lastModifiedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.lastModified._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8String(imp->lastModified());
  }

  static v8::Handle<v8::Value> charsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.charset._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->charset());
  }

  static void charsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.charset._set");
    Document* imp = V8Document::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setCharset(v);
    return;
  }

  static v8::Handle<v8::Value> defaultCharsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.defaultCharset._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->defaultCharset());
  }

  static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.readyState._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrUndefined(imp->readyState());
  }

  static v8::Handle<v8::Value> characterSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.characterSet._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->characterSet());
  }

  static v8::Handle<v8::Value> preferredStylesheetSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.preferredStylesheetSet._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->preferredStylesheetSet());
  }

  static v8::Handle<v8::Value> selectedStylesheetSetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.selectedStylesheetSet._get");
    Document* imp = V8Document::toNative(info.Holder());
    return v8StringOrNull(imp->selectedStylesheetSet());
  }

  static void selectedStylesheetSetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.selectedStylesheetSet._set");
    Document* imp = V8Document::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setSelectedStylesheetSet(v);
    return;
  }

  static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onabort._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onabort._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8Document::cacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onblur._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onblur._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onblur(), value, V8Document::cacheIndex);
    imp->setOnblur(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onchange._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onchange._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onchange(), value, V8Document::cacheIndex);
    imp->setOnchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onclick._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onclick._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onclick(), value, V8Document::cacheIndex);
    imp->setOnclick(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oncontextmenu._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oncontextmenu._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncontextmenu(), value, V8Document::cacheIndex);
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondblclick._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondblclick._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondblclick(), value, V8Document::cacheIndex);
    imp->setOndblclick(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondrag._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondrag._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondrag(), value, V8Document::cacheIndex);
    imp->setOndrag(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragend._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragend._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragend(), value, V8Document::cacheIndex);
    imp->setOndragend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragenter._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragenter._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragenter(), value, V8Document::cacheIndex);
    imp->setOndragenter(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragleave._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragleave._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragleave(), value, V8Document::cacheIndex);
    imp->setOndragleave(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragover._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragover._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragover(), value, V8Document::cacheIndex);
    imp->setOndragover(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragstart._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondragstart._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragstart(), value, V8Document::cacheIndex);
    imp->setOndragstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondrop._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ondrop._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondrop(), value, V8Document::cacheIndex);
    imp->setOndrop(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onerror._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onerror._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8Document::cacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onfocus._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onfocus._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onfocus(), value, V8Document::cacheIndex);
    imp->setOnfocus(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oninput._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oninput._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oninput(), value, V8Document::cacheIndex);
    imp->setOninput(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oninvalid._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oninvalid._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oninvalid(), value, V8Document::cacheIndex);
    imp->setOninvalid(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onkeydown._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onkeydown._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeydown(), value, V8Document::cacheIndex);
    imp->setOnkeydown(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onkeypress._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onkeypress._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeypress(), value, V8Document::cacheIndex);
    imp->setOnkeypress(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onkeyup._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onkeyup._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeyup(), value, V8Document::cacheIndex);
    imp->setOnkeyup(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onload._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onload._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8Document::cacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmousedown._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmousedown._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousedown(), value, V8Document::cacheIndex);
    imp->setOnmousedown(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmousemove._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmousemove._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousemove(), value, V8Document::cacheIndex);
    imp->setOnmousemove(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmouseout._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmouseout._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseout(), value, V8Document::cacheIndex);
    imp->setOnmouseout(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmouseover._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmouseover._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseover(), value, V8Document::cacheIndex);
    imp->setOnmouseover(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmouseup._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmouseup._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseup(), value, V8Document::cacheIndex);
    imp->setOnmouseup(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmousewheel._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onmousewheel._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousewheel(), value, V8Document::cacheIndex);
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onscroll._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onscroll._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onscroll(), value, V8Document::cacheIndex);
    imp->setOnscroll(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onselect._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onselect._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onselect(), value, V8Document::cacheIndex);
    imp->setOnselect(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onsubmit._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onsubmit._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onsubmit(), value, V8Document::cacheIndex);
    imp->setOnsubmit(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onbeforecutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onbeforecut._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforecut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforecutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onbeforecut._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforecut(), value, V8Document::cacheIndex);
    imp->setOnbeforecut(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oncut._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oncut._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncut(), value, V8Document::cacheIndex);
    imp->setOncut(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onbeforecopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onbeforecopy._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforecopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforecopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onbeforecopy._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforecopy(), value, V8Document::cacheIndex);
    imp->setOnbeforecopy(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oncopy._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->oncopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.oncopy._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncopy(), value, V8Document::cacheIndex);
    imp->setOncopy(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onbeforepasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onbeforepaste._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onbeforepaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforepaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforepasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onbeforepaste._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforepaste(), value, V8Document::cacheIndex);
    imp->setOnbeforepaste(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onpaste._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onpaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onpaste._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onpaste(), value, V8Document::cacheIndex);
    imp->setOnpaste(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onreset._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onreset._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onreset(), value, V8Document::cacheIndex);
    imp->setOnreset(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onsearch._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onsearch._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onsearch(), value, V8Document::cacheIndex);
    imp->setOnsearch(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onselectstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onselectstart._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->onselectstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onselectstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.onselectstart._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onselectstart(), value, V8Document::cacheIndex);
    imp->setOnselectstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchstart._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchstart._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchstart(), value, V8Document::cacheIndex);
    imp->setOntouchstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchmove._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchmove._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchmove(), value, V8Document::cacheIndex);
    imp->setOntouchmove(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchend._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchend._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchend(), value, V8Document::cacheIndex);
    imp->setOntouchend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchcancel._get");
    Document* imp = V8Document::toNative(info.Holder());
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Document.ontouchcancel._set");
    Document* imp = V8Document::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchcancel(), value, V8Document::cacheIndex);
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> createElementCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createElement");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<WithNullCheck> tagName = args[0];
    RefPtr<Element> result = imp->createElement(tagName, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createDocumentFragmentCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createDocumentFragment");
    Document* imp = V8Document::toNative(args.Holder());
    return toV8(imp->createDocumentFragment());
  }

  static v8::Handle<v8::Value> createTextNodeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createTextNode");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> data = args[0];
    return toV8(imp->createTextNode(data), true);
  }

  static v8::Handle<v8::Value> createCommentCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createComment");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> data = args[0];
    return toV8(imp->createComment(data), true);
  }

  static v8::Handle<v8::Value> createCDATASectionCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createCDATASection");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> data = args[0];
    RefPtr<CDATASection> result = imp->createCDATASection(data, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createProcessingInstructionCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createProcessingInstruction");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> target = args[0];
    V8Parameter<> data = args[1];
    RefPtr<ProcessingInstruction> result = imp->createProcessingInstruction(target, data, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createAttributeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createAttribute");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> name = args[0];
    RefPtr<Attr> result = imp->createAttribute(name, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createEntityReferenceCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createEntityReference");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> name = args[0];
    RefPtr<EntityReference> result = imp->createEntityReference(name, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.getElementsByTagName");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> tagname = args[0];
    return toV8(imp->getElementsByTagName(tagname));
  }

  static v8::Handle<v8::Value> importNodeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.importNode");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* importedNode = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool deep = args[1]->BooleanValue();
    RefPtr<Node> result = imp->importNode(importedNode, deep, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createElementNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createElementNS");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<WithNullCheck> qualifiedName = args[1];
    RefPtr<Element> result = imp->createElementNS(namespaceURI, qualifiedName, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createAttributeNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createAttributeNS");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<WithNullCheck> qualifiedName = args[1];
    RefPtr<Attr> result = imp->createAttributeNS(namespaceURI, qualifiedName, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release(), true);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.getElementsByTagNameNS");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<> localName = args[1];
    return toV8(imp->getElementsByTagNameNS(namespaceURI, localName));
  }

  static v8::Handle<v8::Value> getElementByIdCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.getElementById");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> elementId = args[0];
    return toV8(imp->getElementById(elementId));
  }

  static v8::Handle<v8::Value> adoptNodeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.adoptNode");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* source = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    RefPtr<Node> result = imp->adoptNode(source, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createEvent");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> eventType = args[0];
    RefPtr<Event> result = imp->createEvent(eventType, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createRangeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createRange");
    Document* imp = V8Document::toNative(args.Holder());
    return toV8(imp->createRange());
  }

  static v8::Handle<v8::Value> createNodeIteratorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createNodeIterator");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* root = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    unsigned whatToShow = toInt32(args[1]);
    RefPtr<NodeFilter> filter = V8DOMWrapper::wrapNativeNodeFilter(args[2]);
    bool expandEntityReferences = args[3]->BooleanValue();
    RefPtr<NodeIterator> result = imp->createNodeIterator(root, whatToShow, filter.get(), expandEntityReferences, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createTreeWalkerCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createTreeWalker");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Node* root = V8Node::HasInstance(args[0]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    unsigned whatToShow = toInt32(args[1]);
    RefPtr<NodeFilter> filter = V8DOMWrapper::wrapNativeNodeFilter(args[2]);
    bool expandEntityReferences = args[3]->BooleanValue();
    RefPtr<TreeWalker> result = imp->createTreeWalker(root, whatToShow, filter.get(), expandEntityReferences, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getOverrideStyleCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.getOverrideStyle");
    Document* imp = V8Document::toNative(args.Holder());
    Element* element = V8Element::HasInstance(args[0]) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    V8Parameter<> pseudoElement = args[1];
    return toV8(imp->getOverrideStyle(element, pseudoElement));
  }

  static v8::Handle<v8::Value> execCommandCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.execCommand");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> command = args[0];
    bool userInterface = args[1]->BooleanValue();
    V8Parameter<WithUndefinedOrNullCheck> value = args[2];
    return v8Boolean(imp->execCommand(command, userInterface, value));
  }

  static v8::Handle<v8::Value> queryCommandEnabledCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.queryCommandEnabled");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> command = args[0];
    return v8Boolean(imp->queryCommandEnabled(command));
  }

  static v8::Handle<v8::Value> queryCommandIndetermCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.queryCommandIndeterm");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> command = args[0];
    return v8Boolean(imp->queryCommandIndeterm(command));
  }

  static v8::Handle<v8::Value> queryCommandStateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.queryCommandState");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> command = args[0];
    return v8Boolean(imp->queryCommandState(command));
  }

  static v8::Handle<v8::Value> queryCommandSupportedCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.queryCommandSupported");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> command = args[0];
    return v8Boolean(imp->queryCommandSupported(command));
  }

  static v8::Handle<v8::Value> queryCommandValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.queryCommandValue");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> command = args[0];
    return v8StringOrFalse(imp->queryCommandValue(command));
  }

  static v8::Handle<v8::Value> getElementsByNameCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.getElementsByName");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> elementName = args[0];
    return toV8(imp->getElementsByName(elementName));
  }

  static v8::Handle<v8::Value> elementFromPointCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.elementFromPoint");
    Document* imp = V8Document::toNative(args.Holder());
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    return toV8(imp->elementFromPoint(x, y));
  }

  static v8::Handle<v8::Value> caretRangeFromPointCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.caretRangeFromPoint");
    Document* imp = V8Document::toNative(args.Holder());
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    return toV8(imp->caretRangeFromPoint(x, y));
  }

  static v8::Handle<v8::Value> getSelectionCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.getSelection");
    Document* imp = V8Document::toNative(args.Holder());
    return toV8(imp->getSelection());
  }

  static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.getElementsByClassName");
    Document* imp = V8Document::toNative(args.Holder());
    V8Parameter<> tagname = args[0];
    return toV8(imp->getElementsByClassName(tagname));
  }

  static v8::Handle<v8::Value> querySelectorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.querySelector");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> selectors = args[0];
    RefPtr<Element> result = imp->querySelector(selectors, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> querySelectorAllCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.querySelectorAll");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> selectors = args[0];
    RefPtr<NodeList> result = imp->querySelectorAll(selectors, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createTouchCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createTouch");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    DOMWindow* window = V8DOMWindow::HasInstance(args[0]) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    Node* target = V8Node::HasInstance(args[1]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    int identifier = toInt32(args[2]);
    int pageX = toInt32(args[3]);
    int pageY = toInt32(args[4]);
    int ScreenX = toInt32(args[5]);
    int screenY = toInt32(args[6]);
    RefPtr<Touch> result = imp->createTouch(window, target, identifier, pageX, pageY, ScreenX, screenY, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createTouchListCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Document.createTouchList");
    Document* imp = V8Document::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<TouchList> result = imp->createTouchList(ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace DocumentInternal

static const BatchedAttribute Document_attrs[] = {
    {
        // Attribute 'doctype' (Type: 'readonly attribute' ExtAttr: '')
        "doctype",
        DocumentInternal::doctypeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'implementation' (Type: 'readonly attribute' ExtAttr: 'V8Custom')
        "implementation",
        V8Document::implementationAccessorGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'documentElement' (Type: 'readonly attribute' ExtAttr: '')
        "documentElement",
        DocumentInternal::documentElementAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'inputEncoding' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
        "inputEncoding",
        DocumentInternal::inputEncodingAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'xmlEncoding' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
        "xmlEncoding",
        DocumentInternal::xmlEncodingAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'xmlVersion' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
        "xmlVersion",
        DocumentInternal::xmlVersionAttrGetter,
        DocumentInternal::xmlVersionAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'xmlStandalone' (Type: 'attribute' ExtAttr: '')
        "xmlStandalone",
        DocumentInternal::xmlStandaloneAttrGetter,
        DocumentInternal::xmlStandaloneAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'documentURI' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
        "documentURI",
        DocumentInternal::documentURIAttrGetter,
        DocumentInternal::documentURIAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'defaultView' (Type: 'readonly attribute' ExtAttr: '')
        "defaultView",
        DocumentInternal::defaultViewAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'styleSheets' (Type: 'readonly attribute' ExtAttr: '')
        "styleSheets",
        DocumentInternal::styleSheetsAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'title' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "title",
        DocumentInternal::titleAttrGetter,
        DocumentInternal::titleAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'referrer' (Type: 'readonly attribute' ExtAttr: '')
        "referrer",
        DocumentInternal::referrerAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'domain' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "domain",
        DocumentInternal::domainAttrGetter,
        DocumentInternal::domainAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'URL' (Type: 'readonly attribute' ExtAttr: '')
        "URL",
        DocumentInternal::URLAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'cookie' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "cookie",
        DocumentInternal::cookieAttrGetter,
        DocumentInternal::cookieAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'body' (Type: 'attribute' ExtAttr: '')
        "body",
        DocumentInternal::bodyAttrGetter,
        DocumentInternal::bodyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'head' (Type: 'readonly attribute' ExtAttr: '')
        "head",
        DocumentInternal::headAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'images' (Type: 'readonly attribute' ExtAttr: '')
        "images",
        DocumentInternal::imagesAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'applets' (Type: 'readonly attribute' ExtAttr: '')
        "applets",
        DocumentInternal::appletsAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'links' (Type: 'readonly attribute' ExtAttr: '')
        "links",
        DocumentInternal::linksAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'forms' (Type: 'readonly attribute' ExtAttr: '')
        "forms",
        DocumentInternal::formsAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'anchors' (Type: 'readonly attribute' ExtAttr: '')
        "anchors",
        DocumentInternal::anchorsAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'lastModified' (Type: 'readonly attribute' ExtAttr: '')
        "lastModified",
        DocumentInternal::lastModifiedAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'location' (Type: 'attribute' ExtAttr: 'Custom')
        "location",
        V8Document::locationAccessorGetter,
        V8Document::locationAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'charset' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
        "charset",
        DocumentInternal::charsetAttrGetter,
        DocumentInternal::charsetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'defaultCharset' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
        "defaultCharset",
        DocumentInternal::defaultCharsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
        "readyState",
        DocumentInternal::readyStateAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'characterSet' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
        "characterSet",
        DocumentInternal::characterSetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'preferredStylesheetSet' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
        "preferredStylesheetSet",
        DocumentInternal::preferredStylesheetSetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'selectedStylesheetSet' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
        "selectedStylesheetSet",
        DocumentInternal::selectedStylesheetSetAttrGetter,
        DocumentInternal::selectedStylesheetSetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onabort",
        DocumentInternal::onabortAttrGetter,
        DocumentInternal::onabortAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onblur",
        DocumentInternal::onblurAttrGetter,
        DocumentInternal::onblurAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onchange",
        DocumentInternal::onchangeAttrGetter,
        DocumentInternal::onchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onclick",
        DocumentInternal::onclickAttrGetter,
        DocumentInternal::onclickAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oncontextmenu",
        DocumentInternal::oncontextmenuAttrGetter,
        DocumentInternal::oncontextmenuAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondblclick",
        DocumentInternal::ondblclickAttrGetter,
        DocumentInternal::ondblclickAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondrag",
        DocumentInternal::ondragAttrGetter,
        DocumentInternal::ondragAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragend",
        DocumentInternal::ondragendAttrGetter,
        DocumentInternal::ondragendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragenter",
        DocumentInternal::ondragenterAttrGetter,
        DocumentInternal::ondragenterAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragleave",
        DocumentInternal::ondragleaveAttrGetter,
        DocumentInternal::ondragleaveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragover",
        DocumentInternal::ondragoverAttrGetter,
        DocumentInternal::ondragoverAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragstart",
        DocumentInternal::ondragstartAttrGetter,
        DocumentInternal::ondragstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondrop",
        DocumentInternal::ondropAttrGetter,
        DocumentInternal::ondropAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onerror",
        DocumentInternal::onerrorAttrGetter,
        DocumentInternal::onerrorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onfocus",
        DocumentInternal::onfocusAttrGetter,
        DocumentInternal::onfocusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oninput",
        DocumentInternal::oninputAttrGetter,
        DocumentInternal::oninputAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oninvalid",
        DocumentInternal::oninvalidAttrGetter,
        DocumentInternal::oninvalidAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onkeydown",
        DocumentInternal::onkeydownAttrGetter,
        DocumentInternal::onkeydownAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onkeypress",
        DocumentInternal::onkeypressAttrGetter,
        DocumentInternal::onkeypressAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onkeyup",
        DocumentInternal::onkeyupAttrGetter,
        DocumentInternal::onkeyupAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onload' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onload",
        DocumentInternal::onloadAttrGetter,
        DocumentInternal::onloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmousedown",
        DocumentInternal::onmousedownAttrGetter,
        DocumentInternal::onmousedownAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmousemove",
        DocumentInternal::onmousemoveAttrGetter,
        DocumentInternal::onmousemoveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmouseout",
        DocumentInternal::onmouseoutAttrGetter,
        DocumentInternal::onmouseoutAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmouseover",
        DocumentInternal::onmouseoverAttrGetter,
        DocumentInternal::onmouseoverAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmouseup",
        DocumentInternal::onmouseupAttrGetter,
        DocumentInternal::onmouseupAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmousewheel",
        DocumentInternal::onmousewheelAttrGetter,
        DocumentInternal::onmousewheelAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onscroll",
        DocumentInternal::onscrollAttrGetter,
        DocumentInternal::onscrollAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onselect",
        DocumentInternal::onselectAttrGetter,
        DocumentInternal::onselectAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onsubmit",
        DocumentInternal::onsubmitAttrGetter,
        DocumentInternal::onsubmitAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforecut' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforecut",
        DocumentInternal::onbeforecutAttrGetter,
        DocumentInternal::onbeforecutAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oncut' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oncut",
        DocumentInternal::oncutAttrGetter,
        DocumentInternal::oncutAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforecopy' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforecopy",
        DocumentInternal::onbeforecopyAttrGetter,
        DocumentInternal::onbeforecopyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oncopy' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oncopy",
        DocumentInternal::oncopyAttrGetter,
        DocumentInternal::oncopyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforepaste' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforepaste",
        DocumentInternal::onbeforepasteAttrGetter,
        DocumentInternal::onbeforepasteAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onpaste' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onpaste",
        DocumentInternal::onpasteAttrGetter,
        DocumentInternal::onpasteAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onreset",
        DocumentInternal::onresetAttrGetter,
        DocumentInternal::onresetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onsearch",
        DocumentInternal::onsearchAttrGetter,
        DocumentInternal::onsearchAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onselectstart' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onselectstart",
        DocumentInternal::onselectstartAttrGetter,
        DocumentInternal::onselectstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchstart",
        DocumentInternal::ontouchstartAttrGetter,
        DocumentInternal::ontouchstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchmove",
        DocumentInternal::ontouchmoveAttrGetter,
        DocumentInternal::ontouchmoveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchend",
        DocumentInternal::ontouchendAttrGetter,
        DocumentInternal::ontouchendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchcancel",
        DocumentInternal::ontouchcancelAttrGetter,
        DocumentInternal::ontouchcancelAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
};
static const BatchedCallback Document_callbacks[] = {
  {"createElement", DocumentInternal::createElementCallback},
  {"createDocumentFragment", DocumentInternal::createDocumentFragmentCallback},
  {"createTextNode", DocumentInternal::createTextNodeCallback},
  {"createComment", DocumentInternal::createCommentCallback},
  {"createCDATASection", DocumentInternal::createCDATASectionCallback},
  {"createProcessingInstruction", DocumentInternal::createProcessingInstructionCallback},
  {"createAttribute", DocumentInternal::createAttributeCallback},
  {"createEntityReference", DocumentInternal::createEntityReferenceCallback},
  {"getElementsByTagName", DocumentInternal::getElementsByTagNameCallback},
  {"createElementNS", DocumentInternal::createElementNSCallback},
  {"createAttributeNS", DocumentInternal::createAttributeNSCallback},
  {"getElementsByTagNameNS", DocumentInternal::getElementsByTagNameNSCallback},
  {"getElementById", DocumentInternal::getElementByIdCallback},
  {"createEvent", DocumentInternal::createEventCallback},
  {"createRange", DocumentInternal::createRangeCallback},
  {"execCommand", DocumentInternal::execCommandCallback},
  {"queryCommandEnabled", DocumentInternal::queryCommandEnabledCallback},
  {"queryCommandIndeterm", DocumentInternal::queryCommandIndetermCallback},
  {"queryCommandState", DocumentInternal::queryCommandStateCallback},
  {"queryCommandSupported", DocumentInternal::queryCommandSupportedCallback},
  {"queryCommandValue", DocumentInternal::queryCommandValueCallback},
  {"getElementsByName", DocumentInternal::getElementsByNameCallback},
  {"elementFromPoint", DocumentInternal::elementFromPointCallback},
  {"caretRangeFromPoint", DocumentInternal::caretRangeFromPointCallback},
  {"getSelection", DocumentInternal::getSelectionCallback},
  {"getCSSCanvasContext", V8Document::getCSSCanvasContextCallback},
  {"getElementsByClassName", DocumentInternal::getElementsByClassNameCallback},
  {"querySelector", DocumentInternal::querySelectorCallback},
  {"querySelectorAll", DocumentInternal::querySelectorAllCallback},
  {"createTouchList", DocumentInternal::createTouchListCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DocumentTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "Document",
      V8Node::GetTemplate(), V8Document::internalFieldCount,
      Document_attrs, sizeof(Document_attrs)/sizeof(*Document_attrs),
      Document_callbacks, sizeof(Document_callbacks)/sizeof(*Document_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'importNode'
  const int importNode_argc = 2;
  v8::Handle<v8::FunctionTemplate> importNode_argv[importNode_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> importNode_signature = v8::Signature::New(desc, importNode_argc, importNode_argv);
  proto->Set(v8::String::New("importNode"), v8::FunctionTemplate::New(DocumentInternal::importNodeCallback, v8::Handle<v8::Value>(), importNode_signature));

  // Custom Signature 'adoptNode'
  const int adoptNode_argc = 1;
  v8::Handle<v8::FunctionTemplate> adoptNode_argv[adoptNode_argc] = { V8Node::GetRawTemplate() };
  v8::Handle<v8::Signature> adoptNode_signature = v8::Signature::New(desc, adoptNode_argc, adoptNode_argv);
  proto->Set(v8::String::New("adoptNode"), v8::FunctionTemplate::New(DocumentInternal::adoptNodeCallback, v8::Handle<v8::Value>(), adoptNode_signature));

  // Custom Signature 'createNodeIterator'
  const int createNodeIterator_argc = 4;
  v8::Handle<v8::FunctionTemplate> createNodeIterator_argv[createNodeIterator_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> createNodeIterator_signature = v8::Signature::New(desc, createNodeIterator_argc, createNodeIterator_argv);
  proto->Set(v8::String::New("createNodeIterator"), v8::FunctionTemplate::New(DocumentInternal::createNodeIteratorCallback, v8::Handle<v8::Value>(), createNodeIterator_signature));

  // Custom Signature 'createTreeWalker'
  const int createTreeWalker_argc = 4;
  v8::Handle<v8::FunctionTemplate> createTreeWalker_argv[createTreeWalker_argc] = { V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> createTreeWalker_signature = v8::Signature::New(desc, createTreeWalker_argc, createTreeWalker_argv);
  proto->Set(v8::String::New("createTreeWalker"), v8::FunctionTemplate::New(DocumentInternal::createTreeWalkerCallback, v8::Handle<v8::Value>(), createTreeWalker_signature));

  // Custom Signature 'getOverrideStyle'
  const int getOverrideStyle_argc = 2;
  v8::Handle<v8::FunctionTemplate> getOverrideStyle_argv[getOverrideStyle_argc] = { V8Element::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> getOverrideStyle_signature = v8::Signature::New(desc, getOverrideStyle_argc, getOverrideStyle_argv);
  proto->Set(v8::String::New("getOverrideStyle"), v8::FunctionTemplate::New(DocumentInternal::getOverrideStyleCallback, v8::Handle<v8::Value>(), getOverrideStyle_signature));

  // Custom Signature 'createTouch'
  const int createTouch_argc = 7;
  v8::Handle<v8::FunctionTemplate> createTouch_argv[createTouch_argc] = { V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> createTouch_signature = v8::Signature::New(desc, createTouch_argc, createTouch_argv);
  proto->Set(v8::String::New("createTouch"), v8::FunctionTemplate::New(DocumentInternal::createTouchCallback, v8::Handle<v8::Value>(), createTouch_signature));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Document::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Document_raw_cache_ = createRawTemplate();
  return V8Document_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8Document::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Document_cache_ = ConfigureV8DocumentTemplate(GetRawTemplate());
  return V8Document_cache_;
}

Document* V8Document::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<Document*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Document::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Document::wrap(Document* impl, bool forceNewObject) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  if (!forceNewObject) {
  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  }

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::DOCUMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Document > impl, bool forceNewObject) {
  return toV8(impl.get(), forceNewObject);
}
} // namespace WebCore

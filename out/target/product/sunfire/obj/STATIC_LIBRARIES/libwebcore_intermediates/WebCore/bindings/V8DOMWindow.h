/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef V8DOMWindow_H
#define V8DOMWindow_H

#include <v8.h>
#include <wtf/HashMap.h>
#include "StringHash.h"
#include "V8Index.h"
#include "DOMWindow.h"

namespace WebCore {

class V8DOMWindow {

 public:
  static bool HasInstance(v8::Handle<v8::Value> value);
  static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
  static v8::Persistent<v8::FunctionTemplate> GetTemplate();
  static DOMWindow* toNative(v8::Handle<v8::Object>);
  static v8::Handle<v8::Object> wrap(DOMWindow*);
  static v8::Persistent<v8::ObjectTemplate> GetShadowObjectTemplate();
  static v8::Handle<v8::Value> getSelectionCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> focusCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> blurCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> closeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> printCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> stopCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> openCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> showModalDialogCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> alertCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> confirmCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> promptCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> findCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scrollByCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scrollToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scrollCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> moveByCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> moveToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> resizeByCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> resizeToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getComputedStyleCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getMatchedCSSRulesCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> webkitConvertPointFromPageToNodeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> webkitConvertPointFromNodeToPageCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> openDatabaseCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> postMessageCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setTimeoutCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearTimeoutCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setIntervalCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearIntervalCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> atobCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> btoaCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> addEventListenerCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> removeEventListenerCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> captureEventsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> releaseEventsCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> toStringCallback(const v8::Arguments&);
  static void locationAccessorSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> eventAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static void eventAccessorSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> cryptoAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static void cryptoAccessorSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
  static void openerAccessorSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> ImageAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> OptionAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> AudioAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> indexedPropertyGetter(uint32_t index, const v8::AccessorInfo& info);
  static v8::Handle<v8::Boolean> indexedPropertyDeleter(uint32_t index, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> namedPropertyGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static v8::Handle<v8::Boolean> namedPropertyDeleter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static v8::Handle<v8::Array> namedPropertyEnumerator(const v8::AccessorInfo& info);
  static const int consoleIndex = v8DefaultWrapperInternalFieldCount + 0;
  static const int historyIndex = v8DefaultWrapperInternalFieldCount + 1;
  static const int locationbarIndex = v8DefaultWrapperInternalFieldCount + 2;
  static const int menubarIndex = v8DefaultWrapperInternalFieldCount + 3;
  static const int navigatorIndex = v8DefaultWrapperInternalFieldCount + 4;
  static const int personalbarIndex = v8DefaultWrapperInternalFieldCount + 5;
  static const int screenIndex = v8DefaultWrapperInternalFieldCount + 6;
  static const int scrollbarsIndex = v8DefaultWrapperInternalFieldCount + 7;
  static const int selectionIndex = v8DefaultWrapperInternalFieldCount + 8;
  static const int statusbarIndex = v8DefaultWrapperInternalFieldCount + 9;
  static const int toolbarIndex = v8DefaultWrapperInternalFieldCount + 10;
  static const int locationIndex = v8DefaultWrapperInternalFieldCount + 11;
  static const int domSelectionIndex = v8DefaultWrapperInternalFieldCount + 12;
  static const int cacheIndex = v8DefaultWrapperInternalFieldCount + 13;
  static const int enteredIsolatedWorldIndex = v8DefaultWrapperInternalFieldCount + 14;
  static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 15;
  static bool namedSecurityCheck(v8::Local<v8::Object> host, v8::Local<v8::Value> key, v8::AccessType, v8::Local<v8::Value> data);
  static bool indexedSecurityCheck(v8::Local<v8::Object> host, uint32_t index, v8::AccessType, v8::Local<v8::Value> data);
};

  v8::Handle<v8::Value> toV8(DOMWindow*);
  v8::Handle<v8::Value> toV8(PassRefPtr<DOMWindow >);
}

#endif // V8DOMWindow_H

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(3D_CANVAS)

#include "V8WebGLArrayBuffer.h"

namespace WebCore {
namespace WebGLArrayBufferInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> byteLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLArrayBuffer.byteLength._get");
    WebGLArrayBuffer* imp = V8WebGLArrayBuffer::toNative(info.Holder());
    return v8::Integer::New(imp->byteLength());
  }

} // namespace WebGLArrayBufferInternal

static const BatchedAttribute WebGLArrayBuffer_attrs[] = {
    {
        // Attribute 'byteLength' (Type: 'readonly attribute' ExtAttr: '')
        "byteLength",
        WebGLArrayBufferInternal::byteLengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebGLArrayBufferTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WebGLArrayBuffer",
      v8::Persistent<v8::FunctionTemplate>(), V8WebGLArrayBuffer::internalFieldCount,
      WebGLArrayBuffer_attrs, sizeof(WebGLArrayBuffer_attrs)/sizeof(*WebGLArrayBuffer_attrs),
      NULL, 0);
      desc->SetCallHandler(V8WebGLArrayBuffer::constructorCallback);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLArrayBuffer::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLArrayBuffer_raw_cache_ = createRawTemplate();
  return V8WebGLArrayBuffer_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLArrayBuffer::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLArrayBuffer_cache_ = ConfigureV8WebGLArrayBufferTemplate(GetRawTemplate());
  return V8WebGLArrayBuffer_cache_;
}

WebGLArrayBuffer* V8WebGLArrayBuffer::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WebGLArrayBuffer*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WebGLArrayBuffer::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebGLArrayBuffer::wrap(WebGLArrayBuffer* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WEBGLARRAYBUFFER, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WebGLArrayBuffer > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(WebGLArrayBuffer* impl) {
  if (!impl)
    return v8::Null();
  return V8WebGLArrayBuffer::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(3D_CANVAS)

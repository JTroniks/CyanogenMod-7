/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(DATAGRID)

#include "V8DataGridColumn.h"

namespace WebCore {
namespace DataGridColumnInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> idAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.id._get");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    return v8String(imp->id());
  }

  static void idAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.id._set");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setId(v);
    return;
  }

  static v8::Handle<v8::Value> labelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.label._get");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    return v8String(imp->label());
  }

  static void labelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.label._set");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setLabel(v);
    return;
  }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.type._get");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    return v8String(imp->type());
  }

  static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.type._set");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setType(v);
    return;
  }

  static v8::Handle<v8::Value> sortableAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.sortable._get");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    return v8::Integer::New(imp->sortable());
  }

  static void sortableAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.sortable._set");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    int v = toInt32(value);
    imp->setSortable(v);
    return;
  }

  static v8::Handle<v8::Value> sortDirectionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.sortDirection._get");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    return v8::Integer::New(imp->sortDirection());
  }

  static void sortDirectionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.sortDirection._set");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    int v = toInt32(value);
    imp->setSortDirection(v);
    return;
  }

  static v8::Handle<v8::Value> primaryAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.primary._get");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    return v8Boolean(imp->primary());
  }

  static void primaryAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DataGridColumn.primary._set");
    DataGridColumn* imp = V8DataGridColumn::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setPrimary(v);
    return;
  }

} // namespace DataGridColumnInternal

static const BatchedAttribute DataGridColumn_attrs[] = {
    {
        // Attribute 'id' (Type: 'attribute' ExtAttr: '')
        "id",
        DataGridColumnInternal::idAttrGetter,
        DataGridColumnInternal::idAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'label' (Type: 'attribute' ExtAttr: '')
        "label",
        DataGridColumnInternal::labelAttrGetter,
        DataGridColumnInternal::labelAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'type' (Type: 'attribute' ExtAttr: '')
        "type",
        DataGridColumnInternal::typeAttrGetter,
        DataGridColumnInternal::typeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'sortable' (Type: 'attribute' ExtAttr: '')
        "sortable",
        DataGridColumnInternal::sortableAttrGetter,
        DataGridColumnInternal::sortableAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'sortDirection' (Type: 'attribute' ExtAttr: '')
        "sortDirection",
        DataGridColumnInternal::sortDirectionAttrGetter,
        DataGridColumnInternal::sortDirectionAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'primary' (Type: 'attribute' ExtAttr: '')
        "primary",
        DataGridColumnInternal::primaryAttrGetter,
        DataGridColumnInternal::primaryAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedConstant DataGridColumn_consts[] = {
  { "NEVER_SORTED", static_cast<signed int>(0) },
  { "ALWAYS_SORTED", static_cast<signed int>(1) },
  { "SOMETIMES_SORTED", static_cast<signed int>(2) },
  { "NATURAL_SORT", static_cast<signed int>(0) },
  { "SORT_ASCENDING", static_cast<signed int>(1) },
  { "SORC_DESCENDING", static_cast<signed int>(2) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DataGridColumnTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "DataGridColumn",
      v8::Persistent<v8::FunctionTemplate>(), V8DataGridColumn::internalFieldCount,
      DataGridColumn_attrs, sizeof(DataGridColumn_attrs)/sizeof(*DataGridColumn_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  batchConfigureConstants(desc, proto, DataGridColumn_consts, sizeof(DataGridColumn_consts)/sizeof(*DataGridColumn_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DataGridColumn::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DataGridColumn_raw_cache_ = createRawTemplate();
  return V8DataGridColumn_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8DataGridColumn::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DataGridColumn_cache_ = ConfigureV8DataGridColumnTemplate(GetRawTemplate());
  return V8DataGridColumn_cache_;
}

DataGridColumn* V8DataGridColumn::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<DataGridColumn*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8DataGridColumn::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DataGridColumn::wrap(DataGridColumn* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::DATAGRIDCOLUMN, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<DataGridColumn > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(DataGridColumn* impl) {
  if (!impl)
    return v8::Null();
  return V8DataGridColumn::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(DATAGRID)

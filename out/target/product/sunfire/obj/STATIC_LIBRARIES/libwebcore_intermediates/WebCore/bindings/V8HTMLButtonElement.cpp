/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8HTMLButtonElement.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8ValidityState.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace HTMLButtonElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.form._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return toV8(imp->form());
  }

  static v8::Handle<v8::Value> formNoValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.formNoValidate._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->formNoValidate());
  }

  static void formNoValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.formNoValidate._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setFormNoValidate(v);
    return;
  }

  static v8::Handle<v8::Value> validityAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.validity._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return toV8(imp->validity());
  }

  static v8::Handle<v8::Value> accessKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.accessKey._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->accessKey());
  }

  static void accessKeyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.accessKey._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAccessKey(v);
    return;
  }

  static v8::Handle<v8::Value> disabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.disabled._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->disabled());
  }

  static void disabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.disabled._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setDisabled(v);
    return;
  }

  static v8::Handle<v8::Value> autofocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.autofocus._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->autofocus());
  }

  static void autofocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.autofocus._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setAutofocus(v);
    return;
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.name._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->name());
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.name._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setName(v);
    return;
  }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.type._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->type());
  }

  static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.value._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->value());
  }

  static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.value._set");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setValue(v);
    return;
  }

  static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.willValidate._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate());
  }

  static v8::Handle<v8::Value> validationMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLButtonElement.validationMessage._get");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(info.Holder());
    return v8String(imp->validationMessage());
  }

  static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLButtonElement.checkValidity");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity());
  }

  static v8::Handle<v8::Value> setCustomValidityCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLButtonElement.setCustomValidity");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(args.Holder());
    V8Parameter<WithUndefinedOrNullCheck> error = args[0];
    imp->setCustomValidity(error);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clickCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLButtonElement.click");
    HTMLButtonElement* imp = V8HTMLButtonElement::toNative(args.Holder());
    imp->click();
    return v8::Handle<v8::Value>();
  }

} // namespace HTMLButtonElementInternal

static const BatchedAttribute HTMLButtonElement_attrs[] = {
    {
        // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
        "form",
        HTMLButtonElementInternal::formAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'formNoValidate' (Type: 'attribute' ExtAttr: '')
        "formNoValidate",
        HTMLButtonElementInternal::formNoValidateAttrGetter,
        HTMLButtonElementInternal::formNoValidateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'validity' (Type: 'readonly attribute' ExtAttr: '')
        "validity",
        HTMLButtonElementInternal::validityAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'accessKey' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "accessKey",
        HTMLButtonElementInternal::accessKeyAttrGetter,
        HTMLButtonElementInternal::accessKeyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'disabled' (Type: 'attribute' ExtAttr: '')
        "disabled",
        HTMLButtonElementInternal::disabledAttrGetter,
        HTMLButtonElementInternal::disabledAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'autofocus' (Type: 'attribute' ExtAttr: '')
        "autofocus",
        HTMLButtonElementInternal::autofocusAttrGetter,
        HTMLButtonElementInternal::autofocusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "name",
        HTMLButtonElementInternal::nameAttrGetter,
        HTMLButtonElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
        "type",
        HTMLButtonElementInternal::typeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'value' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "value",
        HTMLButtonElementInternal::valueAttrGetter,
        HTMLButtonElementInternal::valueAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
        "willValidate",
        HTMLButtonElementInternal::willValidateAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'validationMessage' (Type: 'readonly attribute' ExtAttr: '')
        "validationMessage",
        HTMLButtonElementInternal::validationMessageAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback HTMLButtonElement_callbacks[] = {
  {"checkValidity", HTMLButtonElementInternal::checkValidityCallback},
  {"setCustomValidity", HTMLButtonElementInternal::setCustomValidityCallback},
  {"click", HTMLButtonElementInternal::clickCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLButtonElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLButtonElement",
      V8HTMLElement::GetTemplate(), V8HTMLButtonElement::internalFieldCount,
      HTMLButtonElement_attrs, sizeof(HTMLButtonElement_attrs)/sizeof(*HTMLButtonElement_attrs),
      HTMLButtonElement_callbacks, sizeof(HTMLButtonElement_callbacks)/sizeof(*HTMLButtonElement_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLButtonElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLButtonElement_raw_cache_ = createRawTemplate();
  return V8HTMLButtonElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLButtonElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLButtonElement_cache_ = ConfigureV8HTMLButtonElementTemplate(GetRawTemplate());
  return V8HTMLButtonElement_cache_;
}

HTMLButtonElement* V8HTMLButtonElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLButtonElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLButtonElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLButtonElement::wrap(HTMLButtonElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLBUTTONELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLButtonElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLButtonElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLButtonElement::wrap(impl);
}
} // namespace WebCore

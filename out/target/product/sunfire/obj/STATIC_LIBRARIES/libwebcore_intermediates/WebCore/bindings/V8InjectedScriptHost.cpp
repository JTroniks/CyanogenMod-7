/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(INSPECTOR)

#include "V8InjectedScriptHost.h"

namespace WebCore {
namespace InjectedScriptHostInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> clearConsoleMessagesCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InjectedScriptHost.clearConsoleMessages");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    imp->clearConsoleMessages();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> copyTextCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InjectedScriptHost.copyText");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    V8Parameter<> text = args[0];
    imp->copyText(text);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> addNodesToSearchResultCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InjectedScriptHost.addNodesToSearchResult");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    V8Parameter<> nodeIds = args[0];
    imp->addNodesToSearchResult(nodeIds);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> pushNodeByPathToFrontendCallback(const v8::Arguments& args) {
    INC_STATS("DOM.InjectedScriptHost.pushNodeByPathToFrontend");
    InjectedScriptHost* imp = V8InjectedScriptHost::toNative(args.Holder());
    V8Parameter<> path = args[0];
    return v8::Integer::New(imp->pushNodeByPathToFrontend(path));
  }

} // namespace InjectedScriptHostInternal

static const BatchedCallback InjectedScriptHost_callbacks[] = {
  {"clearConsoleMessages", InjectedScriptHostInternal::clearConsoleMessagesCallback},
  {"copyText", InjectedScriptHostInternal::copyTextCallback},
  {"nodeForId", V8InjectedScriptHost::nodeForIdCallback},
  {"pushNodePathToFrontend", V8InjectedScriptHost::pushNodePathToFrontendCallback},
  {"addNodesToSearchResult", InjectedScriptHostInternal::addNodesToSearchResultCallback},
  {"pushNodeByPathToFrontend", InjectedScriptHostInternal::pushNodeByPathToFrontendCallback},
  {"databaseForId", V8InjectedScriptHost::databaseForIdCallback},
  {"selectDatabase", V8InjectedScriptHost::selectDatabaseCallback},
  {"selectDOMStorage", V8InjectedScriptHost::selectDOMStorageCallback},
  {"reportDidDispatchOnInjectedScript", V8InjectedScriptHost::reportDidDispatchOnInjectedScriptCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8InjectedScriptHostTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "InjectedScriptHost",
      v8::Persistent<v8::FunctionTemplate>(), V8InjectedScriptHost::internalFieldCount,
      NULL, 0,
      InjectedScriptHost_callbacks, sizeof(InjectedScriptHost_callbacks)/sizeof(*InjectedScriptHost_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHost::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHost_raw_cache_ = createRawTemplate();
  return V8InjectedScriptHost_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHost::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8InjectedScriptHost_cache_ = ConfigureV8InjectedScriptHostTemplate(GetRawTemplate());
  return V8InjectedScriptHost_cache_;
}

InjectedScriptHost* V8InjectedScriptHost::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<InjectedScriptHost*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8InjectedScriptHost::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8InjectedScriptHost::wrap(InjectedScriptHost* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::INJECTEDSCRIPTHOST, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<InjectedScriptHost > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(InjectedScriptHost* impl) {
  if (!impl)
    return v8::Null();
  return V8InjectedScriptHost::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(INSPECTOR)

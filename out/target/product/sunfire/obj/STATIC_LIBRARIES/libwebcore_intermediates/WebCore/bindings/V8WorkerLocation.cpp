/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(WORKERS)

#include "V8WorkerLocation.h"

namespace WebCore {
namespace WorkerLocationInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> hrefAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.href._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->href());
  }

  static v8::Handle<v8::Value> protocolAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.protocol._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->protocol());
  }

  static v8::Handle<v8::Value> hostAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.host._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->host());
  }

  static v8::Handle<v8::Value> hostnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.hostname._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->hostname());
  }

  static v8::Handle<v8::Value> portAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.port._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->port());
  }

  static v8::Handle<v8::Value> pathnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.pathname._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->pathname());
  }

  static v8::Handle<v8::Value> searchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.search._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->search());
  }

  static v8::Handle<v8::Value> hashAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WorkerLocation.hash._get");
    WorkerLocation* imp = V8WorkerLocation::toNative(info.Holder());
    return v8String(imp->hash());
  }

  static v8::Handle<v8::Value> toStringCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WorkerLocation.toString");
    WorkerLocation* imp = V8WorkerLocation::toNative(args.Holder());
    return v8String(imp->toString());
  }

} // namespace WorkerLocationInternal

static const BatchedAttribute WorkerLocation_attrs[] = {
    {
        // Attribute 'href' (Type: 'readonly attribute' ExtAttr: '')
        "href",
        WorkerLocationInternal::hrefAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'protocol' (Type: 'readonly attribute' ExtAttr: '')
        "protocol",
        WorkerLocationInternal::protocolAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'host' (Type: 'readonly attribute' ExtAttr: '')
        "host",
        WorkerLocationInternal::hostAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'hostname' (Type: 'readonly attribute' ExtAttr: '')
        "hostname",
        WorkerLocationInternal::hostnameAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'port' (Type: 'readonly attribute' ExtAttr: '')
        "port",
        WorkerLocationInternal::portAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pathname' (Type: 'readonly attribute' ExtAttr: '')
        "pathname",
        WorkerLocationInternal::pathnameAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'search' (Type: 'readonly attribute' ExtAttr: '')
        "search",
        WorkerLocationInternal::searchAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'hash' (Type: 'readonly attribute' ExtAttr: '')
        "hash",
        WorkerLocationInternal::hashAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WorkerLocationTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WorkerLocation",
      v8::Persistent<v8::FunctionTemplate>(), V8WorkerLocation::internalFieldCount,
      WorkerLocation_attrs, sizeof(WorkerLocation_attrs)/sizeof(*WorkerLocation_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  proto->Set(v8::String::New("toString"), v8::FunctionTemplate::New(WorkerLocationInternal::toStringCallback, v8::Handle<v8::Value>(), default_signature), static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::DontEnum));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WorkerLocation::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WorkerLocation_raw_cache_ = createRawTemplate();
  return V8WorkerLocation_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WorkerLocation::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WorkerLocation_cache_ = ConfigureV8WorkerLocationTemplate(GetRawTemplate());
  return V8WorkerLocation_cache_;
}

WorkerLocation* V8WorkerLocation::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WorkerLocation*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WorkerLocation::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WorkerLocation::wrap(WorkerLocation* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WORKERLOCATION, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WorkerLocation > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(WorkerLocation* impl) {
  if (!impl)
    return v8::Null();
  return V8WorkerLocation::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(WORKERS)

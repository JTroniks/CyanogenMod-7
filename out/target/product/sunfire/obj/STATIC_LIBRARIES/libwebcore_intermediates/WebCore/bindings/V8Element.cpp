/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "CSSMutableStyleDeclaration.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8Attr.h"
#include "V8CSSStyleDeclaration.h"
#include "V8ClientRect.h"
#include "V8ClientRectList.h"
#include "V8Element.h"
#include "V8Node.h"
#include "V8NodeList.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace ElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> tagNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.tagName._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8StringOrNull(imp->tagName());
  }

  static v8::Handle<v8::Value> styleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.style._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->style());
  }

  static v8::Handle<v8::Value> offsetLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.offsetLeft._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetLeft());
  }

  static v8::Handle<v8::Value> offsetTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.offsetTop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetTop());
  }

  static v8::Handle<v8::Value> offsetWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.offsetWidth._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetWidth());
  }

  static v8::Handle<v8::Value> offsetHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.offsetHeight._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->offsetHeight());
  }

  static v8::Handle<v8::Value> offsetParentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.offsetParent._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->offsetParent());
  }

  static v8::Handle<v8::Value> clientLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.clientLeft._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientLeft());
  }

  static v8::Handle<v8::Value> clientTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.clientTop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientTop());
  }

  static v8::Handle<v8::Value> clientWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.clientWidth._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientWidth());
  }

  static v8::Handle<v8::Value> clientHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.clientHeight._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->clientHeight());
  }

  static v8::Handle<v8::Value> scrollLeftAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.scrollLeft._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollLeft());
  }

  static void scrollLeftAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.scrollLeft._set");
    Element* imp = V8Element::toNative(info.Holder());
    int v = toInt32(value);
    imp->setScrollLeft(v);
    return;
  }

  static v8::Handle<v8::Value> scrollTopAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.scrollTop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollTop());
  }

  static void scrollTopAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.scrollTop._set");
    Element* imp = V8Element::toNative(info.Holder());
    int v = toInt32(value);
    imp->setScrollTop(v);
    return;
  }

  static v8::Handle<v8::Value> scrollWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.scrollWidth._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollWidth());
  }

  static v8::Handle<v8::Value> scrollHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.scrollHeight._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::New(imp->scrollHeight());
  }

  static v8::Handle<v8::Value> firstElementChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.firstElementChild._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->firstElementChild());
  }

  static v8::Handle<v8::Value> lastElementChildAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.lastElementChild._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->lastElementChild());
  }

  static v8::Handle<v8::Value> previousElementSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.previousElementSibling._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->previousElementSibling());
  }

  static v8::Handle<v8::Value> nextElementSiblingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.nextElementSibling._get");
    Element* imp = V8Element::toNative(info.Holder());
    return toV8(imp->nextElementSibling());
  }

  static v8::Handle<v8::Value> childElementCountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.childElementCount._get");
    Element* imp = V8Element::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->childElementCount());
  }

  static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onabort._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onabort._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8Element::cacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onblurAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onblur._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onblur() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onblur())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onblurAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onblur._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onblur(), value, V8Element::cacheIndex);
    imp->setOnblur(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onchangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onchange._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onchange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onchangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onchange._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onchange(), value, V8Element::cacheIndex);
    imp->setOnchange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onclick._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onclick._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onclick(), value, V8Element::cacheIndex);
    imp->setOnclick(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncontextmenuAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oncontextmenu._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncontextmenu() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncontextmenu())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncontextmenuAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oncontextmenu._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncontextmenu(), value, V8Element::cacheIndex);
    imp->setOncontextmenu(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondblclickAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondblclick._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondblclick() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondblclick())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondblclickAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondblclick._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondblclick(), value, V8Element::cacheIndex);
    imp->setOndblclick(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondrag._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondrag() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrag())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondrag._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondrag(), value, V8Element::cacheIndex);
    imp->setOndrag(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragend._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragend._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragend(), value, V8Element::cacheIndex);
    imp->setOndragend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragenterAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragenter._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragenter() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragenter())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragenterAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragenter._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragenter(), value, V8Element::cacheIndex);
    imp->setOndragenter(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragleaveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragleave._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragleave() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragleave())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragleaveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragleave._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragleave(), value, V8Element::cacheIndex);
    imp->setOndragleave(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragover._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragover._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragover(), value, V8Element::cacheIndex);
    imp->setOndragover(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondragstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragstart._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondragstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondragstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondragstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondragstart._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondragstart(), value, V8Element::cacheIndex);
    imp->setOndragstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondropAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondrop._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ondrop() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondrop())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondropAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ondrop._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondrop(), value, V8Element::cacheIndex);
    imp->setOndrop(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onerror._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onerror._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8Element::cacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onfocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onfocus._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onfocus() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onfocus())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onfocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onfocus._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onfocus(), value, V8Element::cacheIndex);
    imp->setOnfocus(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oninputAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oninput._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oninput() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninput())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oninputAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oninput._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oninput(), value, V8Element::cacheIndex);
    imp->setOninput(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oninvalidAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oninvalid._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oninvalid() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oninvalid())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oninvalidAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oninvalid._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oninvalid(), value, V8Element::cacheIndex);
    imp->setOninvalid(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeydownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onkeydown._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeydown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeydown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeydownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onkeydown._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeydown(), value, V8Element::cacheIndex);
    imp->setOnkeydown(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeypressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onkeypress._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeypress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeypress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeypressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onkeypress._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeypress(), value, V8Element::cacheIndex);
    imp->setOnkeypress(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onkeyupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onkeyup._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onkeyup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onkeyup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onkeyupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onkeyup._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onkeyup(), value, V8Element::cacheIndex);
    imp->setOnkeyup(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onload._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onload._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8Element::cacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousedownAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmousedown._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousedown() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousedown())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousedownAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmousedown._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousedown(), value, V8Element::cacheIndex);
    imp->setOnmousedown(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousemoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmousemove._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousemove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousemove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousemoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmousemove._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousemove(), value, V8Element::cacheIndex);
    imp->setOnmousemove(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseoutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmouseout._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseout() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseout())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseoutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmouseout._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseout(), value, V8Element::cacheIndex);
    imp->setOnmouseout(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseoverAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmouseover._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseover() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseover())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseoverAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmouseover._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseover(), value, V8Element::cacheIndex);
    imp->setOnmouseover(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmouseupAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmouseup._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmouseup() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmouseup())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmouseupAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmouseup._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmouseup(), value, V8Element::cacheIndex);
    imp->setOnmouseup(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmousewheelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmousewheel._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onmousewheel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmousewheel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmousewheelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onmousewheel._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmousewheel(), value, V8Element::cacheIndex);
    imp->setOnmousewheel(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onscrollAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onscroll._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onscroll() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onscroll())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onscrollAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onscroll._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onscroll(), value, V8Element::cacheIndex);
    imp->setOnscroll(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onselectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onselect._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onselect() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselect())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onselectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onselect._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onselect(), value, V8Element::cacheIndex);
    imp->setOnselect(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onsubmitAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onsubmit._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onsubmit() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsubmit())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onsubmitAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onsubmit._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onsubmit(), value, V8Element::cacheIndex);
    imp->setOnsubmit(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onbeforecutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onbeforecut._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforecut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforecutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onbeforecut._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforecut(), value, V8Element::cacheIndex);
    imp->setOnbeforecut(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncutAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oncut._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncut() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncut())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncutAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oncut._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncut(), value, V8Element::cacheIndex);
    imp->setOncut(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onbeforecopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onbeforecopy._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforecopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforecopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforecopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onbeforecopy._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforecopy(), value, V8Element::cacheIndex);
    imp->setOnbeforecopy(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncopyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oncopy._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->oncopy() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncopy())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncopyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.oncopy._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncopy(), value, V8Element::cacheIndex);
    imp->setOncopy(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onbeforepasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onbeforepaste._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onbeforepaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onbeforepaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onbeforepasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onbeforepaste._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onbeforepaste(), value, V8Element::cacheIndex);
    imp->setOnbeforepaste(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onpasteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onpaste._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onpaste() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onpaste())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onpasteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onpaste._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onpaste(), value, V8Element::cacheIndex);
    imp->setOnpaste(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onresetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onreset._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onreset() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreset())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onresetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onreset._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onreset(), value, V8Element::cacheIndex);
    imp->setOnreset(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onsearchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onsearch._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onsearch() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onsearch())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onsearchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onsearch._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onsearch(), value, V8Element::cacheIndex);
    imp->setOnsearch(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onselectstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onselectstart._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->onselectstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onselectstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onselectstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.onselectstart._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onselectstart(), value, V8Element::cacheIndex);
    imp->setOnselectstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchstart._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchstart._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchstart(), value, V8Element::cacheIndex);
    imp->setOntouchstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchmoveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchmove._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchmove() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchmove())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchmoveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchmove._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchmove(), value, V8Element::cacheIndex);
    imp->setOntouchmove(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchendAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchend._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchend() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchend())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchendAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchend._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchend(), value, V8Element::cacheIndex);
    imp->setOntouchend(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ontouchcancelAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchcancel._get");
    Element* imp = V8Element::toNative(info.Holder());
    return imp->ontouchcancel() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ontouchcancel())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ontouchcancelAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Element.ontouchcancel._set");
    Element* imp = V8Element::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ontouchcancel(), value, V8Element::cacheIndex);
    imp->setOntouchcancel(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> getAttributeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getAttribute");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<> name = args[0];
    return v8StringOrNull(imp->getAttribute(name));
  }

  static v8::Handle<v8::Value> removeAttributeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.removeAttribute");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> name = args[0];
    imp->removeAttribute(name, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getAttributeNodeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getAttributeNode");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<> name = args[0];
    return toV8(imp->getAttributeNode(name));
  }

  static v8::Handle<v8::Value> removeAttributeNodeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.removeAttributeNode");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Attr* oldAttr = V8Attr::HasInstance(args[0]) ? V8Attr::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    if (UNLIKELY(!oldAttr)) {
      ec = TYPE_MISMATCH_ERR;
      goto fail;
    }
    RefPtr<Attr> result = imp->removeAttributeNode(oldAttr, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getElementsByTagNameCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getElementsByTagName");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<> name = args[0];
    return toV8(imp->getElementsByTagName(name));
  }

  static v8::Handle<v8::Value> getAttributeNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getAttributeNS");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<> localName = args[1];
    return v8String(imp->getAttributeNS(namespaceURI, localName));
  }

  static v8::Handle<v8::Value> removeAttributeNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.removeAttributeNS");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<> localName = args[1];
    imp->removeAttributeNS(namespaceURI, localName, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getElementsByTagNameNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getElementsByTagNameNS");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<> localName = args[1];
    return toV8(imp->getElementsByTagNameNS(namespaceURI, localName));
  }

  static v8::Handle<v8::Value> getAttributeNodeNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getAttributeNodeNS");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<> localName = args[1];
    return toV8(imp->getAttributeNodeNS(namespaceURI, localName));
  }

  static v8::Handle<v8::Value> hasAttributeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.hasAttribute");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<> name = args[0];
    return v8Boolean(imp->hasAttribute(name));
  }

  static v8::Handle<v8::Value> hasAttributeNSCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.hasAttributeNS");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<WithNullCheck> namespaceURI = args[0];
    V8Parameter<> localName = args[1];
    return v8Boolean(imp->hasAttributeNS(namespaceURI, localName));
  }

  static v8::Handle<v8::Value> focusCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.focus");
    Element* imp = V8Element::toNative(args.Holder());
    imp->focus();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> blurCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.blur");
    Element* imp = V8Element::toNative(args.Holder());
    imp->blur();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> scrollIntoViewCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.scrollIntoView");
    Element* imp = V8Element::toNative(args.Holder());
    if (args.Length() <= 0) {
        imp->scrollIntoView();
        return v8::Handle<v8::Value>();
    }
    bool alignWithTop = args[0]->BooleanValue();
    imp->scrollIntoView(alignWithTop);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> containsCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.contains");
    Element* imp = V8Element::toNative(args.Holder());
    Element* element = V8Element::HasInstance(args[0]) ? V8Element::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    return v8Boolean(imp->contains(element));
  }

  static v8::Handle<v8::Value> scrollIntoViewIfNeededCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.scrollIntoViewIfNeeded");
    Element* imp = V8Element::toNative(args.Holder());
    if (args.Length() <= 0) {
        imp->scrollIntoViewIfNeeded();
        return v8::Handle<v8::Value>();
    }
    bool centerIfNeeded = args[0]->BooleanValue();
    imp->scrollIntoViewIfNeeded(centerIfNeeded);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> scrollByLinesCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.scrollByLines");
    Element* imp = V8Element::toNative(args.Holder());
    int lines = toInt32(args[0]);
    imp->scrollByLines(lines);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> scrollByPagesCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.scrollByPages");
    Element* imp = V8Element::toNative(args.Holder());
    int pages = toInt32(args[0]);
    imp->scrollByPages(pages);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getElementsByClassNameCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getElementsByClassName");
    Element* imp = V8Element::toNative(args.Holder());
    V8Parameter<> name = args[0];
    return toV8(imp->getElementsByClassName(name));
  }

  static v8::Handle<v8::Value> querySelectorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.querySelector");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> selectors = args[0];
    RefPtr<Element> result = imp->querySelector(selectors, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> querySelectorAllCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.querySelectorAll");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> selectors = args[0];
    RefPtr<NodeList> result = imp->querySelectorAll(selectors, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> webkitMatchesSelectorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.webkitMatchesSelector");
    Element* imp = V8Element::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> selectors = args[0];
    bool result = imp->webkitMatchesSelector(selectors, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8Boolean(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getClientRectsCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getClientRects");
    Element* imp = V8Element::toNative(args.Holder());
    return toV8(imp->getClientRects());
  }

  static v8::Handle<v8::Value> getBoundingClientRectCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Element.getBoundingClientRect");
    Element* imp = V8Element::toNative(args.Holder());
    return toV8(imp->getBoundingClientRect());
  }

} // namespace ElementInternal

static const BatchedAttribute Element_attrs[] = {
    {
        // Attribute 'tagName' (Type: 'readonly attribute' ExtAttr: 'ConvertNullStringTo')
        "tagName",
        ElementInternal::tagNameAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'style' (Type: 'readonly attribute' ExtAttr: '')
        "style",
        ElementInternal::styleAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offsetLeft' (Type: 'readonly attribute' ExtAttr: '')
        "offsetLeft",
        ElementInternal::offsetLeftAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offsetTop' (Type: 'readonly attribute' ExtAttr: '')
        "offsetTop",
        ElementInternal::offsetTopAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offsetWidth' (Type: 'readonly attribute' ExtAttr: '')
        "offsetWidth",
        ElementInternal::offsetWidthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offsetHeight' (Type: 'readonly attribute' ExtAttr: '')
        "offsetHeight",
        ElementInternal::offsetHeightAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offsetParent' (Type: 'readonly attribute' ExtAttr: '')
        "offsetParent",
        ElementInternal::offsetParentAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clientLeft' (Type: 'readonly attribute' ExtAttr: '')
        "clientLeft",
        ElementInternal::clientLeftAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clientTop' (Type: 'readonly attribute' ExtAttr: '')
        "clientTop",
        ElementInternal::clientTopAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clientWidth' (Type: 'readonly attribute' ExtAttr: '')
        "clientWidth",
        ElementInternal::clientWidthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clientHeight' (Type: 'readonly attribute' ExtAttr: '')
        "clientHeight",
        ElementInternal::clientHeightAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'scrollLeft' (Type: 'attribute' ExtAttr: '')
        "scrollLeft",
        ElementInternal::scrollLeftAttrGetter,
        ElementInternal::scrollLeftAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'scrollTop' (Type: 'attribute' ExtAttr: '')
        "scrollTop",
        ElementInternal::scrollTopAttrGetter,
        ElementInternal::scrollTopAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'scrollWidth' (Type: 'readonly attribute' ExtAttr: '')
        "scrollWidth",
        ElementInternal::scrollWidthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'scrollHeight' (Type: 'readonly attribute' ExtAttr: '')
        "scrollHeight",
        ElementInternal::scrollHeightAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'firstElementChild' (Type: 'readonly attribute' ExtAttr: '')
        "firstElementChild",
        ElementInternal::firstElementChildAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'lastElementChild' (Type: 'readonly attribute' ExtAttr: '')
        "lastElementChild",
        ElementInternal::lastElementChildAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'previousElementSibling' (Type: 'readonly attribute' ExtAttr: '')
        "previousElementSibling",
        ElementInternal::previousElementSiblingAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'nextElementSibling' (Type: 'readonly attribute' ExtAttr: '')
        "nextElementSibling",
        ElementInternal::nextElementSiblingAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'childElementCount' (Type: 'readonly attribute' ExtAttr: '')
        "childElementCount",
        ElementInternal::childElementCountAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onabort' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onabort",
        ElementInternal::onabortAttrGetter,
        ElementInternal::onabortAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onblur' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onblur",
        ElementInternal::onblurAttrGetter,
        ElementInternal::onblurAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onchange' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onchange",
        ElementInternal::onchangeAttrGetter,
        ElementInternal::onchangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onclick' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onclick",
        ElementInternal::onclickAttrGetter,
        ElementInternal::onclickAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oncontextmenu' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oncontextmenu",
        ElementInternal::oncontextmenuAttrGetter,
        ElementInternal::oncontextmenuAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondblclick' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondblclick",
        ElementInternal::ondblclickAttrGetter,
        ElementInternal::ondblclickAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondrag' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondrag",
        ElementInternal::ondragAttrGetter,
        ElementInternal::ondragAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragend' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragend",
        ElementInternal::ondragendAttrGetter,
        ElementInternal::ondragendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragenter' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragenter",
        ElementInternal::ondragenterAttrGetter,
        ElementInternal::ondragenterAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragleave' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragleave",
        ElementInternal::ondragleaveAttrGetter,
        ElementInternal::ondragleaveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragover' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragover",
        ElementInternal::ondragoverAttrGetter,
        ElementInternal::ondragoverAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondragstart' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondragstart",
        ElementInternal::ondragstartAttrGetter,
        ElementInternal::ondragstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ondrop' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ondrop",
        ElementInternal::ondropAttrGetter,
        ElementInternal::ondropAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onerror' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onerror",
        ElementInternal::onerrorAttrGetter,
        ElementInternal::onerrorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onfocus' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onfocus",
        ElementInternal::onfocusAttrGetter,
        ElementInternal::onfocusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oninput' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oninput",
        ElementInternal::oninputAttrGetter,
        ElementInternal::oninputAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oninvalid' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oninvalid",
        ElementInternal::oninvalidAttrGetter,
        ElementInternal::oninvalidAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onkeydown' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onkeydown",
        ElementInternal::onkeydownAttrGetter,
        ElementInternal::onkeydownAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onkeypress' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onkeypress",
        ElementInternal::onkeypressAttrGetter,
        ElementInternal::onkeypressAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onkeyup' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onkeyup",
        ElementInternal::onkeyupAttrGetter,
        ElementInternal::onkeyupAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onload' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onload",
        ElementInternal::onloadAttrGetter,
        ElementInternal::onloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmousedown' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmousedown",
        ElementInternal::onmousedownAttrGetter,
        ElementInternal::onmousedownAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmousemove' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmousemove",
        ElementInternal::onmousemoveAttrGetter,
        ElementInternal::onmousemoveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmouseout' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmouseout",
        ElementInternal::onmouseoutAttrGetter,
        ElementInternal::onmouseoutAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmouseover' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmouseover",
        ElementInternal::onmouseoverAttrGetter,
        ElementInternal::onmouseoverAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmouseup' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmouseup",
        ElementInternal::onmouseupAttrGetter,
        ElementInternal::onmouseupAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onmousewheel' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onmousewheel",
        ElementInternal::onmousewheelAttrGetter,
        ElementInternal::onmousewheelAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onscroll' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onscroll",
        ElementInternal::onscrollAttrGetter,
        ElementInternal::onscrollAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onselect' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onselect",
        ElementInternal::onselectAttrGetter,
        ElementInternal::onselectAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onsubmit' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onsubmit",
        ElementInternal::onsubmitAttrGetter,
        ElementInternal::onsubmitAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforecut' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforecut",
        ElementInternal::onbeforecutAttrGetter,
        ElementInternal::onbeforecutAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oncut' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oncut",
        ElementInternal::oncutAttrGetter,
        ElementInternal::oncutAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforecopy' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforecopy",
        ElementInternal::onbeforecopyAttrGetter,
        ElementInternal::onbeforecopyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'oncopy' (Type: 'attribute' ExtAttr: 'DontEnum')
        "oncopy",
        ElementInternal::oncopyAttrGetter,
        ElementInternal::oncopyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onbeforepaste' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onbeforepaste",
        ElementInternal::onbeforepasteAttrGetter,
        ElementInternal::onbeforepasteAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onpaste' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onpaste",
        ElementInternal::onpasteAttrGetter,
        ElementInternal::onpasteAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onreset' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onreset",
        ElementInternal::onresetAttrGetter,
        ElementInternal::onresetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onsearch' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onsearch",
        ElementInternal::onsearchAttrGetter,
        ElementInternal::onsearchAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'onselectstart' (Type: 'attribute' ExtAttr: 'DontEnum')
        "onselectstart",
        ElementInternal::onselectstartAttrGetter,
        ElementInternal::onselectstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchstart' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchstart",
        ElementInternal::ontouchstartAttrGetter,
        ElementInternal::ontouchstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchmove' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchmove",
        ElementInternal::ontouchmoveAttrGetter,
        ElementInternal::ontouchmoveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchend' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchend",
        ElementInternal::ontouchendAttrGetter,
        ElementInternal::ontouchendAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
    {
        // Attribute 'ontouchcancel' (Type: 'attribute' ExtAttr: 'DontEnum')
        "ontouchcancel",
        ElementInternal::ontouchcancelAttrGetter,
        ElementInternal::ontouchcancelAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None|v8::DontEnum),
        0 /* on instance */
    },
};
static const BatchedCallback Element_callbacks[] = {
  {"getAttribute", ElementInternal::getAttributeCallback},
  {"setAttribute", V8Element::setAttributeCallback},
  {"removeAttribute", ElementInternal::removeAttributeCallback},
  {"getAttributeNode", ElementInternal::getAttributeNodeCallback},
  {"setAttributeNode", V8Element::setAttributeNodeCallback},
  {"getElementsByTagName", ElementInternal::getElementsByTagNameCallback},
  {"getAttributeNS", ElementInternal::getAttributeNSCallback},
  {"setAttributeNS", V8Element::setAttributeNSCallback},
  {"removeAttributeNS", ElementInternal::removeAttributeNSCallback},
  {"getElementsByTagNameNS", ElementInternal::getElementsByTagNameNSCallback},
  {"getAttributeNodeNS", ElementInternal::getAttributeNodeNSCallback},
  {"setAttributeNodeNS", V8Element::setAttributeNodeNSCallback},
  {"hasAttribute", ElementInternal::hasAttributeCallback},
  {"hasAttributeNS", ElementInternal::hasAttributeNSCallback},
  {"focus", ElementInternal::focusCallback},
  {"blur", ElementInternal::blurCallback},
  {"scrollIntoView", ElementInternal::scrollIntoViewCallback},
  {"scrollIntoViewIfNeeded", ElementInternal::scrollIntoViewIfNeededCallback},
  {"scrollByLines", ElementInternal::scrollByLinesCallback},
  {"scrollByPages", ElementInternal::scrollByPagesCallback},
  {"getElementsByClassName", ElementInternal::getElementsByClassNameCallback},
  {"querySelector", ElementInternal::querySelectorCallback},
  {"querySelectorAll", ElementInternal::querySelectorAllCallback},
  {"webkitMatchesSelector", ElementInternal::webkitMatchesSelectorCallback},
  {"getClientRects", ElementInternal::getClientRectsCallback},
  {"getBoundingClientRect", ElementInternal::getBoundingClientRectCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8ElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "Element",
      V8Node::GetTemplate(), V8Element::internalFieldCount,
      Element_attrs, sizeof(Element_attrs)/sizeof(*Element_attrs),
      Element_callbacks, sizeof(Element_callbacks)/sizeof(*Element_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'removeAttributeNode'
  const int removeAttributeNode_argc = 1;
  v8::Handle<v8::FunctionTemplate> removeAttributeNode_argv[removeAttributeNode_argc] = { V8Attr::GetRawTemplate() };
  v8::Handle<v8::Signature> removeAttributeNode_signature = v8::Signature::New(desc, removeAttributeNode_argc, removeAttributeNode_argv);
  proto->Set(v8::String::New("removeAttributeNode"), v8::FunctionTemplate::New(ElementInternal::removeAttributeNodeCallback, v8::Handle<v8::Value>(), removeAttributeNode_signature));

  // Custom Signature 'contains'
  const int contains_argc = 1;
  v8::Handle<v8::FunctionTemplate> contains_argv[contains_argc] = { V8Element::GetRawTemplate() };
  v8::Handle<v8::Signature> contains_signature = v8::Signature::New(desc, contains_argc, contains_argv);
  proto->Set(v8::String::New("contains"), v8::FunctionTemplate::New(ElementInternal::containsCallback, v8::Handle<v8::Value>(), contains_signature));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Element::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Element_raw_cache_ = createRawTemplate();
  return V8Element_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8Element::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Element_cache_ = ConfigureV8ElementTemplate(GetRawTemplate());
  return V8Element_cache_;
}

Element* V8Element::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<Element*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Element::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Element::wrap(Element* impl, bool forceNewObject) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  if (!forceNewObject) {
  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  }

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::ELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Element > impl, bool forceNewObject) {
  return toV8(impl.get(), forceNewObject);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "V8CSSRule.h"
#include "V8CSSStyleSheet.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace CSSRuleInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSRule.type._get");
    CSSRule* imp = V8CSSRule::toNative(info.Holder());
    return v8::Integer::New(imp->type());
  }

  static v8::Handle<v8::Value> cssTextAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSRule.cssText._get");
    CSSRule* imp = V8CSSRule::toNative(info.Holder());
    return v8StringOrNull(imp->cssText());
  }

  static void cssTextAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSRule.cssText._set");
    CSSRule* imp = V8CSSRule::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    ExceptionCode ec = 0;
    imp->setCssText(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> parentStyleSheetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSRule.parentStyleSheet._get");
    CSSRule* imp = V8CSSRule::toNative(info.Holder());
    return toV8(imp->parentStyleSheet());
  }

  static v8::Handle<v8::Value> parentRuleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSRule.parentRule._get");
    CSSRule* imp = V8CSSRule::toNative(info.Holder());
    return toV8(imp->parentRule());
  }

} // namespace CSSRuleInternal

static const BatchedAttribute CSSRule_attrs[] = {
    {
        // Attribute 'type' (Type: 'readonly attribute' ExtAttr: '')
        "type",
        CSSRuleInternal::typeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'cssText' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString ConvertNullStringTo')
        "cssText",
        CSSRuleInternal::cssTextAttrGetter,
        CSSRuleInternal::cssTextAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'parentStyleSheet' (Type: 'readonly attribute' ExtAttr: '')
        "parentStyleSheet",
        CSSRuleInternal::parentStyleSheetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'parentRule' (Type: 'readonly attribute' ExtAttr: '')
        "parentRule",
        CSSRuleInternal::parentRuleAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedConstant CSSRule_consts[] = {
  { "UNKNOWN_RULE", static_cast<signed int>(0) },
  { "STYLE_RULE", static_cast<signed int>(1) },
  { "CHARSET_RULE", static_cast<signed int>(2) },
  { "IMPORT_RULE", static_cast<signed int>(3) },
  { "MEDIA_RULE", static_cast<signed int>(4) },
  { "FONT_FACE_RULE", static_cast<signed int>(5) },
  { "PAGE_RULE", static_cast<signed int>(6) },
  { "VARIABLES_RULE", static_cast<signed int>(7) },
  { "WEBKIT_KEYFRAMES_RULE", static_cast<signed int>(8) },
  { "WEBKIT_KEYFRAME_RULE", static_cast<signed int>(9) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8CSSRuleTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "CSSRule",
      v8::Persistent<v8::FunctionTemplate>(), V8CSSRule::internalFieldCount,
      CSSRule_attrs, sizeof(CSSRule_attrs)/sizeof(*CSSRule_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  batchConfigureConstants(desc, proto, CSSRule_consts, sizeof(CSSRule_consts)/sizeof(*CSSRule_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CSSRule::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CSSRule_raw_cache_ = createRawTemplate();
  return V8CSSRule_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8CSSRule::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CSSRule_cache_ = ConfigureV8CSSRuleTemplate(GetRawTemplate());
  return V8CSSRule_cache_;
}

CSSRule* V8CSSRule::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<CSSRule*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8CSSRule::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CSSRule::wrap(CSSRule* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::CSSRULE, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<CSSRule > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

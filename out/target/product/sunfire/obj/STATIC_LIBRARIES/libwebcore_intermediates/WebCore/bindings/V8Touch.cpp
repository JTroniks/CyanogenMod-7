/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(TOUCH_EVENTS)

#include "EventTarget.h"
#include "V8Touch.h"

namespace WebCore {
namespace TouchInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> clientXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.clientX._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->clientX());
  }

  static v8::Handle<v8::Value> clientYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.clientY._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->clientY());
  }

  static v8::Handle<v8::Value> screenXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.screenX._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->screenX());
  }

  static v8::Handle<v8::Value> screenYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.screenY._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->screenY());
  }

  static v8::Handle<v8::Value> pageXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.pageX._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->pageX());
  }

  static v8::Handle<v8::Value> pageYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.pageY._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::New(imp->pageY());
  }

  static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.target._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return V8DOMWrapper::convertEventTargetToV8Object(imp->target());
  }

  static v8::Handle<v8::Value> identifierAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Touch.identifier._get");
    Touch* imp = V8Touch::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->identifier());
  }

} // namespace TouchInternal

static const BatchedAttribute Touch_attrs[] = {
    {
        // Attribute 'clientX' (Type: 'readonly attribute' ExtAttr: '')
        "clientX",
        TouchInternal::clientXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clientY' (Type: 'readonly attribute' ExtAttr: '')
        "clientY",
        TouchInternal::clientYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'screenX' (Type: 'readonly attribute' ExtAttr: '')
        "screenX",
        TouchInternal::screenXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'screenY' (Type: 'readonly attribute' ExtAttr: '')
        "screenY",
        TouchInternal::screenYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pageX' (Type: 'readonly attribute' ExtAttr: '')
        "pageX",
        TouchInternal::pageXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pageY' (Type: 'readonly attribute' ExtAttr: '')
        "pageY",
        TouchInternal::pageYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'target' (Type: 'readonly attribute' ExtAttr: '')
        "target",
        TouchInternal::targetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'identifier' (Type: 'readonly attribute' ExtAttr: '')
        "identifier",
        TouchInternal::identifierAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8TouchTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "Touch",
      v8::Persistent<v8::FunctionTemplate>(), V8Touch::internalFieldCount,
      Touch_attrs, sizeof(Touch_attrs)/sizeof(*Touch_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Touch::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Touch_raw_cache_ = createRawTemplate();
  return V8Touch_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8Touch::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Touch_cache_ = ConfigureV8TouchTemplate(GetRawTemplate());
  return V8Touch_cache_;
}

Touch* V8Touch::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<Touch*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Touch::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Touch::wrap(Touch* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::TOUCH, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Touch > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(Touch* impl) {
  if (!impl)
    return v8::Null();
  return V8Touch::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(TOUCH_EVENTS)

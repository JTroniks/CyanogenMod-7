/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(3D_CANVAS)

#include "V8WebGLArray.h"
#include "V8WebGLArrayBuffer.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace WebGLArrayInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> bufferAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLArray.buffer._get");
    WebGLArray* imp = V8WebGLArray::toNative(info.Holder());
    return toV8(imp->buffer());
  }

  static v8::Handle<v8::Value> byteOffsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLArray.byteOffset._get");
    WebGLArray* imp = V8WebGLArray::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->byteOffset());
  }

  static v8::Handle<v8::Value> byteLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLArray.byteLength._get");
    WebGLArray* imp = V8WebGLArray::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->byteLength());
  }

  static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLArray.length._get");
    WebGLArray* imp = V8WebGLArray::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->length());
  }

  static v8::Handle<v8::Value> sliceCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLArray.slice");
    WebGLArray* imp = V8WebGLArray::toNative(args.Holder());
    unsigned offset = toInt32(args[0]);
    unsigned length = toInt32(args[1]);
    return toV8(imp->slice(offset, length));
  }

} // namespace WebGLArrayInternal

static const BatchedAttribute WebGLArray_attrs[] = {
    {
        // Attribute 'buffer' (Type: 'readonly attribute' ExtAttr: '')
        "buffer",
        WebGLArrayInternal::bufferAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'byteOffset' (Type: 'readonly attribute' ExtAttr: '')
        "byteOffset",
        WebGLArrayInternal::byteOffsetAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'byteLength' (Type: 'readonly attribute' ExtAttr: '')
        "byteLength",
        WebGLArrayInternal::byteLengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
        "length",
        WebGLArrayInternal::lengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback WebGLArray_callbacks[] = {
  {"slice", WebGLArrayInternal::sliceCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebGLArrayTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WebGLArray",
      v8::Persistent<v8::FunctionTemplate>(), V8WebGLArray::internalFieldCount,
      WebGLArray_attrs, sizeof(WebGLArray_attrs)/sizeof(*WebGLArray_attrs),
      WebGLArray_callbacks, sizeof(WebGLArray_callbacks)/sizeof(*WebGLArray_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLArray::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLArray_raw_cache_ = createRawTemplate();
  return V8WebGLArray_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLArray::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLArray_cache_ = ConfigureV8WebGLArrayTemplate(GetRawTemplate());
  return V8WebGLArray_cache_;
}

WebGLArray* V8WebGLArray::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WebGLArray*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WebGLArray::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebGLArray::wrap(WebGLArray* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WEBGLARRAY, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WebGLArray > impl) {
  return toV8(impl.get());
}
} // namespace WebCore

#endif // ENABLE(3D_CANVAS)

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "AtomicString.h"
#include "V8Collection.h"
#include "V8Plugin.h"
#include "V8PluginArray.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace PluginArrayInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.PluginArray.length._get");
    PluginArray* imp = V8PluginArray::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->length());
  }

  static v8::Handle<v8::Value> itemCallback(const v8::Arguments& args) {
    INC_STATS("DOM.PluginArray.item");
    PluginArray* imp = V8PluginArray::toNative(args.Holder());
    unsigned index = toInt32(args[0]);
    return toV8(imp->item(index));
  }

  static v8::Handle<v8::Value> namedItemCallback(const v8::Arguments& args) {
    INC_STATS("DOM.PluginArray.namedItem");
    PluginArray* imp = V8PluginArray::toNative(args.Holder());
    V8Parameter<> name = args[0];
    return toV8(imp->namedItem(name));
  }

  static v8::Handle<v8::Value> refreshCallback(const v8::Arguments& args) {
    INC_STATS("DOM.PluginArray.refresh");
    PluginArray* imp = V8PluginArray::toNative(args.Holder());
    bool reload = args[0]->BooleanValue();
    imp->refresh(reload);
    return v8::Handle<v8::Value>();
  }

} // namespace PluginArrayInternal

static const BatchedAttribute PluginArray_attrs[] = {
    {
        // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
        "length",
        PluginArrayInternal::lengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback PluginArray_callbacks[] = {
  {"item", PluginArrayInternal::itemCallback},
  {"namedItem", PluginArrayInternal::namedItemCallback},
  {"refresh", PluginArrayInternal::refreshCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8PluginArrayTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "PluginArray",
      v8::Persistent<v8::FunctionTemplate>(), V8PluginArray::internalFieldCount,
      PluginArray_attrs, sizeof(PluginArray_attrs)/sizeof(*PluginArray_attrs),
      PluginArray_callbacks, sizeof(PluginArray_callbacks)/sizeof(*PluginArray_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  setCollectionIndexedGetter<PluginArray, Plugin>(desc, V8ClassIndex::PLUGIN);
  setCollectionNamedGetter<PluginArray, Plugin>(desc, V8ClassIndex::PLUGIN);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8PluginArray::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8PluginArray_raw_cache_ = createRawTemplate();
  return V8PluginArray_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8PluginArray::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8PluginArray_cache_ = ConfigureV8PluginArrayTemplate(GetRawTemplate());
  return V8PluginArray_cache_;
}

PluginArray* V8PluginArray::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<PluginArray*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8PluginArray::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8PluginArray::wrap(PluginArray* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::PLUGINARRAY, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<PluginArray > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(PluginArray* impl) {
  if (!impl)
    return v8::Null();
  return V8PluginArray::wrap(impl);
}
} // namespace WebCore

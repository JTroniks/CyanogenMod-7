/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(3D_CANVAS)

#include "V8WebGLContextAttributes.h"

namespace WebCore {
namespace WebGLContextAttributesInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> alphaAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.alpha._get");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    return v8Boolean(imp->alpha());
  }

  static void alphaAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.alpha._set");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setAlpha(v);
    return;
  }

  static v8::Handle<v8::Value> depthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.depth._get");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    return v8Boolean(imp->depth());
  }

  static void depthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.depth._set");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setDepth(v);
    return;
  }

  static v8::Handle<v8::Value> stencilAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.stencil._get");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    return v8Boolean(imp->stencil());
  }

  static void stencilAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.stencil._set");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setStencil(v);
    return;
  }

  static v8::Handle<v8::Value> antialiasAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.antialias._get");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    return v8Boolean(imp->antialias());
  }

  static void antialiasAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.antialias._set");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setAntialias(v);
    return;
  }

  static v8::Handle<v8::Value> premultipliedAlphaAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.premultipliedAlpha._get");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    return v8Boolean(imp->premultipliedAlpha());
  }

  static void premultipliedAlphaAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebGLContextAttributes.premultipliedAlpha._set");
    WebGLContextAttributes* imp = V8WebGLContextAttributes::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setPremultipliedAlpha(v);
    return;
  }

} // namespace WebGLContextAttributesInternal

static const BatchedAttribute WebGLContextAttributes_attrs[] = {
    {
        // Attribute 'alpha' (Type: 'attribute' ExtAttr: '')
        "alpha",
        WebGLContextAttributesInternal::alphaAttrGetter,
        WebGLContextAttributesInternal::alphaAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'depth' (Type: 'attribute' ExtAttr: '')
        "depth",
        WebGLContextAttributesInternal::depthAttrGetter,
        WebGLContextAttributesInternal::depthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'stencil' (Type: 'attribute' ExtAttr: '')
        "stencil",
        WebGLContextAttributesInternal::stencilAttrGetter,
        WebGLContextAttributesInternal::stencilAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'antialias' (Type: 'attribute' ExtAttr: '')
        "antialias",
        WebGLContextAttributesInternal::antialiasAttrGetter,
        WebGLContextAttributesInternal::antialiasAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'premultipliedAlpha' (Type: 'attribute' ExtAttr: '')
        "premultipliedAlpha",
        WebGLContextAttributesInternal::premultipliedAlphaAttrGetter,
        WebGLContextAttributesInternal::premultipliedAlphaAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebGLContextAttributesTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WebGLContextAttributes",
      v8::Persistent<v8::FunctionTemplate>(), V8WebGLContextAttributes::internalFieldCount,
      WebGLContextAttributes_attrs, sizeof(WebGLContextAttributes_attrs)/sizeof(*WebGLContextAttributes_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLContextAttributes::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLContextAttributes_raw_cache_ = createRawTemplate();
  return V8WebGLContextAttributes_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLContextAttributes::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLContextAttributes_cache_ = ConfigureV8WebGLContextAttributesTemplate(GetRawTemplate());
  return V8WebGLContextAttributes_cache_;
}

WebGLContextAttributes* V8WebGLContextAttributes::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WebGLContextAttributes*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WebGLContextAttributes::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebGLContextAttributes::wrap(WebGLContextAttributes* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WEBGLCONTEXTATTRIBUTES, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WebGLContextAttributes > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(WebGLContextAttributes* impl) {
  if (!impl)
    return v8::Null();
  return V8WebGLContextAttributes::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(3D_CANVAS)

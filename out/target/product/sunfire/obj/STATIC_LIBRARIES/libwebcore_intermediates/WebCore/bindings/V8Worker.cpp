/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(WORKERS)

#include "EventListener.h"
#include "V8AbstractEventListener.h"
#include "V8AbstractWorker.h"
#include "V8Worker.h"

namespace WebCore {
namespace WorkerInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Worker.onmessage._get");
    Worker* imp = V8Worker::toNative(info.Holder());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.Worker.onmessage._set");
    Worker* imp = V8Worker::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8Worker::cacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> terminateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.Worker.terminate");
    Worker* imp = V8Worker::toNative(args.Holder());
    imp->terminate();
    return v8::Handle<v8::Value>();
  }

} // namespace WorkerInternal

static const BatchedAttribute Worker_attrs[] = {
    {
        // Attribute 'onmessage' (Type: 'attribute' ExtAttr: '')
        "onmessage",
        WorkerInternal::onmessageAttrGetter,
        WorkerInternal::onmessageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback Worker_callbacks[] = {
  {"postMessage", V8Worker::postMessageCallback},
  {"terminate", WorkerInternal::terminateCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WorkerTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "Worker",
      V8AbstractWorker::GetTemplate(), V8Worker::internalFieldCount,
      Worker_attrs, sizeof(Worker_attrs)/sizeof(*Worker_attrs),
      Worker_callbacks, sizeof(Worker_callbacks)/sizeof(*Worker_callbacks));
      desc->SetCallHandler(V8Worker::constructorCallback);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8Worker::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Worker_raw_cache_ = createRawTemplate();
  return V8Worker_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8Worker::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8Worker_cache_ = ConfigureV8WorkerTemplate(GetRawTemplate());
  return V8Worker_cache_;
}

Worker* V8Worker::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<Worker*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8Worker::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8Worker::wrap(Worker* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getActiveDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WORKER, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getActiveDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<Worker > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(Worker* impl) {
  if (!impl)
    return v8::Null();
  return V8Worker::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(WORKERS)

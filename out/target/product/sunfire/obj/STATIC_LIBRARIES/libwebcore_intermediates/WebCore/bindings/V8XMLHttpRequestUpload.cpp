/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8Event.h"
#include "V8XMLHttpRequestUpload.h"

namespace WebCore {
namespace XMLHttpRequestUploadInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onabort._get");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onabort._set");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8XMLHttpRequestUpload::cacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onerror._get");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onerror._set");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8XMLHttpRequestUpload::cacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onload._get");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onload._set");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8XMLHttpRequestUpload::cacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onloadstart._get");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    return imp->onloadstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onloadstart._set");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onloadstart(), value, V8XMLHttpRequestUpload::cacheIndex);
    imp->setOnloadstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onprogress._get");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequestUpload.onprogress._set");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8XMLHttpRequestUpload::cacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.XMLHttpRequestUpload.dispatchEvent");
    XMLHttpRequestUpload* imp = V8XMLHttpRequestUpload::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Event* evt = V8Event::HasInstance(args[0]) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8Boolean(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace XMLHttpRequestUploadInternal

static const BatchedAttribute XMLHttpRequestUpload_attrs[] = {
    {
        // Attribute 'onabort' (Type: 'attribute' ExtAttr: '')
        "onabort",
        XMLHttpRequestUploadInternal::onabortAttrGetter,
        XMLHttpRequestUploadInternal::onabortAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
        "onerror",
        XMLHttpRequestUploadInternal::onerrorAttrGetter,
        XMLHttpRequestUploadInternal::onerrorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onload' (Type: 'attribute' ExtAttr: '')
        "onload",
        XMLHttpRequestUploadInternal::onloadAttrGetter,
        XMLHttpRequestUploadInternal::onloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onloadstart' (Type: 'attribute' ExtAttr: '')
        "onloadstart",
        XMLHttpRequestUploadInternal::onloadstartAttrGetter,
        XMLHttpRequestUploadInternal::onloadstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onprogress' (Type: 'attribute' ExtAttr: '')
        "onprogress",
        XMLHttpRequestUploadInternal::onprogressAttrGetter,
        XMLHttpRequestUploadInternal::onprogressAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback XMLHttpRequestUpload_callbacks[] = {
  {"addEventListener", V8XMLHttpRequestUpload::addEventListenerCallback},
  {"removeEventListener", V8XMLHttpRequestUpload::removeEventListenerCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8XMLHttpRequestUploadTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "XMLHttpRequestUpload",
      v8::Persistent<v8::FunctionTemplate>(), V8XMLHttpRequestUpload::internalFieldCount,
      XMLHttpRequestUpload_attrs, sizeof(XMLHttpRequestUpload_attrs)/sizeof(*XMLHttpRequestUpload_attrs),
      XMLHttpRequestUpload_callbacks, sizeof(XMLHttpRequestUpload_callbacks)/sizeof(*XMLHttpRequestUpload_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'dispatchEvent'
  const int dispatchEvent_argc = 1;
  v8::Handle<v8::FunctionTemplate> dispatchEvent_argv[dispatchEvent_argc] = { V8Event::GetRawTemplate() };
  v8::Handle<v8::Signature> dispatchEvent_signature = v8::Signature::New(desc, dispatchEvent_argc, dispatchEvent_argv);
  proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(XMLHttpRequestUploadInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEvent_signature));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequestUpload::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequestUpload_raw_cache_ = createRawTemplate();
  return V8XMLHttpRequestUpload_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequestUpload::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequestUpload_cache_ = ConfigureV8XMLHttpRequestUploadTemplate(GetRawTemplate());
  return V8XMLHttpRequestUpload_cache_;
}

XMLHttpRequestUpload* V8XMLHttpRequestUpload::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<XMLHttpRequestUpload*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8XMLHttpRequestUpload::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8XMLHttpRequestUpload::wrap(XMLHttpRequestUpload* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::XMLHTTPREQUESTUPLOAD, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<XMLHttpRequestUpload > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(XMLHttpRequestUpload* impl) {
  if (!impl)
    return v8::Null();
  return V8XMLHttpRequestUpload::wrap(impl);
}
} // namespace WebCore

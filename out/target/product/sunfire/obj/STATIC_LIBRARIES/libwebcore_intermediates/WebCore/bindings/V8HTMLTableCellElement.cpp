/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8HTMLElement.h"
#include "V8HTMLTableCellElement.h"

namespace WebCore {
namespace HTMLTableCellElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> cellIndexAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.cellIndex._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8::Integer::New(imp->cellIndex());
  }

  static v8::Handle<v8::Value> abbrAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.abbr._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->abbr());
  }

  static void abbrAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.abbr._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAbbr(v);
    return;
  }

  static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.align._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->align());
  }

  static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.align._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAlign(v);
    return;
  }

  static v8::Handle<v8::Value> axisAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.axis._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->axis());
  }

  static void axisAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.axis._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAxis(v);
    return;
  }

  static v8::Handle<v8::Value> bgColorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.bgColor._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->bgColor());
  }

  static void bgColorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.bgColor._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setBgColor(v);
    return;
  }

  static v8::Handle<v8::Value> chAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.ch._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->ch());
  }

  static void chAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.ch._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setCh(v);
    return;
  }

  static v8::Handle<v8::Value> chOffAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.chOff._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->chOff());
  }

  static void chOffAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.chOff._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setChOff(v);
    return;
  }

  static v8::Handle<v8::Value> colSpanAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.colSpan._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8::Integer::New(imp->colSpan());
  }

  static void colSpanAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.colSpan._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setColSpan(v);
    return;
  }

  static v8::Handle<v8::Value> headersAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.headers._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->headers());
  }

  static void headersAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.headers._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setHeaders(v);
    return;
  }

  static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.height._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->height());
  }

  static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.height._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setHeight(v);
    return;
  }

  static v8::Handle<v8::Value> noWrapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.noWrap._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8Boolean(imp->noWrap());
  }

  static void noWrapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.noWrap._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setNoWrap(v);
    return;
  }

  static v8::Handle<v8::Value> rowSpanAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.rowSpan._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8::Integer::New(imp->rowSpan());
  }

  static void rowSpanAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.rowSpan._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setRowSpan(v);
    return;
  }

  static v8::Handle<v8::Value> scopeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.scope._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->scope());
  }

  static void scopeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.scope._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setScope(v);
    return;
  }

  static v8::Handle<v8::Value> vAlignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.vAlign._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->vAlign());
  }

  static void vAlignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.vAlign._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setVAlign(v);
    return;
  }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.width._get");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    return v8String(imp->width());
  }

  static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLTableCellElement.width._set");
    HTMLTableCellElement* imp = V8HTMLTableCellElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setWidth(v);
    return;
  }

} // namespace HTMLTableCellElementInternal

static const BatchedAttribute HTMLTableCellElement_attrs[] = {
    {
        // Attribute 'cellIndex' (Type: 'readonly attribute' ExtAttr: '')
        "cellIndex",
        HTMLTableCellElementInternal::cellIndexAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'abbr' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "abbr",
        HTMLTableCellElementInternal::abbrAttrGetter,
        HTMLTableCellElementInternal::abbrAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'align' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "align",
        HTMLTableCellElementInternal::alignAttrGetter,
        HTMLTableCellElementInternal::alignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'axis' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "axis",
        HTMLTableCellElementInternal::axisAttrGetter,
        HTMLTableCellElementInternal::axisAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'bgColor' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "bgColor",
        HTMLTableCellElementInternal::bgColorAttrGetter,
        HTMLTableCellElementInternal::bgColorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'ch' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "ch",
        HTMLTableCellElementInternal::chAttrGetter,
        HTMLTableCellElementInternal::chAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'chOff' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "chOff",
        HTMLTableCellElementInternal::chOffAttrGetter,
        HTMLTableCellElementInternal::chOffAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'colSpan' (Type: 'attribute' ExtAttr: '')
        "colSpan",
        HTMLTableCellElementInternal::colSpanAttrGetter,
        HTMLTableCellElementInternal::colSpanAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'headers' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "headers",
        HTMLTableCellElementInternal::headersAttrGetter,
        HTMLTableCellElementInternal::headersAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'height' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "height",
        HTMLTableCellElementInternal::heightAttrGetter,
        HTMLTableCellElementInternal::heightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'noWrap' (Type: 'attribute' ExtAttr: '')
        "noWrap",
        HTMLTableCellElementInternal::noWrapAttrGetter,
        HTMLTableCellElementInternal::noWrapAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rowSpan' (Type: 'attribute' ExtAttr: '')
        "rowSpan",
        HTMLTableCellElementInternal::rowSpanAttrGetter,
        HTMLTableCellElementInternal::rowSpanAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'scope' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "scope",
        HTMLTableCellElementInternal::scopeAttrGetter,
        HTMLTableCellElementInternal::scopeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'vAlign' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "vAlign",
        HTMLTableCellElementInternal::vAlignAttrGetter,
        HTMLTableCellElementInternal::vAlignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'width' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "width",
        HTMLTableCellElementInternal::widthAttrGetter,
        HTMLTableCellElementInternal::widthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLTableCellElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLTableCellElement",
      V8HTMLElement::GetTemplate(), V8HTMLTableCellElement::internalFieldCount,
      HTMLTableCellElement_attrs, sizeof(HTMLTableCellElement_attrs)/sizeof(*HTMLTableCellElement_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableCellElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLTableCellElement_raw_cache_ = createRawTemplate();
  return V8HTMLTableCellElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLTableCellElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLTableCellElement_cache_ = ConfigureV8HTMLTableCellElementTemplate(GetRawTemplate());
  return V8HTMLTableCellElement_cache_;
}

HTMLTableCellElement* V8HTMLTableCellElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLTableCellElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLTableCellElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLTableCellElement::wrap(HTMLTableCellElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLTABLECELLELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLTableCellElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLTableCellElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLTableCellElement::wrap(impl);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "HTMLNames.h"
#include "V8Collection.h"
#include "V8Document.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8HTMLObjectElement.h"

namespace WebCore {
namespace HTMLObjectElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.form._get");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    return toV8(imp->form());
  }

  static v8::Handle<v8::Value> codeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.code._get");
    return getElementStringAttr(info, HTMLNames::codeAttr);
  }

  static void codeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.code._set");
    setElementStringAttr(info, HTMLNames::codeAttr, value);
  }

  static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.align._get");
    return getElementStringAttr(info, HTMLNames::alignAttr);
  }

  static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.align._set");
    setElementStringAttr(info, HTMLNames::alignAttr, value);
  }

  static v8::Handle<v8::Value> archiveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.archive._get");
    return getElementStringAttr(info, HTMLNames::archiveAttr);
  }

  static void archiveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.archive._set");
    setElementStringAttr(info, HTMLNames::archiveAttr, value);
  }

  static v8::Handle<v8::Value> borderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.border._get");
    return getElementStringAttr(info, HTMLNames::borderAttr);
  }

  static void borderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.border._set");
    setElementStringAttr(info, HTMLNames::borderAttr, value);
  }

  static v8::Handle<v8::Value> codeBaseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.codeBase._get");
    return getElementStringAttr(info, HTMLNames::codebaseAttr);
  }

  static void codeBaseAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.codeBase._set");
    setElementStringAttr(info, HTMLNames::codebaseAttr, value);
  }

  static v8::Handle<v8::Value> codeTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.codeType._get");
    return getElementStringAttr(info, HTMLNames::codetypeAttr);
  }

  static void codeTypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.codeType._set");
    setElementStringAttr(info, HTMLNames::codetypeAttr, value);
  }

  static v8::Handle<v8::Value> dataAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.data._get");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(HTMLNames::dataAttr));
  }

  static void dataAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.data._set");
    setElementStringAttr(info, HTMLNames::dataAttr, value);
  }

  static v8::Handle<v8::Value> declareAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.declare._get");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    return v8Boolean(imp->declare());
  }

  static void declareAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.declare._set");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setDeclare(v);
    return;
  }

  static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.height._get");
    return getElementStringAttr(info, HTMLNames::heightAttr);
  }

  static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.height._set");
    setElementStringAttr(info, HTMLNames::heightAttr, value);
  }

  static v8::Handle<v8::Value> hspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.hspace._get");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    return v8::Integer::New(imp->hspace());
  }

  static void hspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.hspace._set");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setHspace(v);
    return;
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
  }

  static v8::Handle<v8::Value> standbyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.standby._get");
    return getElementStringAttr(info, HTMLNames::standbyAttr);
  }

  static void standbyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.standby._set");
    setElementStringAttr(info, HTMLNames::standbyAttr, value);
  }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.type._get");
    return getElementStringAttr(info, HTMLNames::typeAttr);
  }

  static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.type._set");
    setElementStringAttr(info, HTMLNames::typeAttr, value);
  }

  static v8::Handle<v8::Value> useMapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.useMap._get");
    return getElementStringAttr(info, HTMLNames::usemapAttr);
  }

  static void useMapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.useMap._set");
    setElementStringAttr(info, HTMLNames::usemapAttr, value);
  }

  static v8::Handle<v8::Value> vspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.vspace._get");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    return v8::Integer::New(imp->vspace());
  }

  static void vspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.vspace._set");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    int v = toInt32(value);
    imp->setVspace(v);
    return;
  }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.width._get");
    return getElementStringAttr(info, HTMLNames::widthAttr);
  }

  static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.width._set");
    setElementStringAttr(info, HTMLNames::widthAttr, value);
  }

  static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.willValidate._get");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate());
  }

  static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLObjectElement.contentDocument._get");
    HTMLObjectElement* imp = V8HTMLObjectElement::toNative(info.Holder());
    if (!V8BindingSecurity::checkNodeSecurity(V8BindingState::Only(), imp->contentDocument())) return v8::Handle<v8::Value>();

    return toV8(imp->contentDocument());
  }

} // namespace HTMLObjectElementInternal

static const BatchedAttribute HTMLObjectElement_attrs[] = {
    {
        // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
        "form",
        HTMLObjectElementInternal::formAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'code' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "code",
        HTMLObjectElementInternal::codeAttrGetter,
        HTMLObjectElementInternal::codeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'align' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "align",
        HTMLObjectElementInternal::alignAttrGetter,
        HTMLObjectElementInternal::alignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'archive' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "archive",
        HTMLObjectElementInternal::archiveAttrGetter,
        HTMLObjectElementInternal::archiveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'border' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "border",
        HTMLObjectElementInternal::borderAttrGetter,
        HTMLObjectElementInternal::borderAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'codeBase' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "codeBase",
        HTMLObjectElementInternal::codeBaseAttrGetter,
        HTMLObjectElementInternal::codeBaseAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'codeType' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "codeType",
        HTMLObjectElementInternal::codeTypeAttrGetter,
        HTMLObjectElementInternal::codeTypeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'data' (Type: 'attribute' ExtAttr: 'ReflectURL ConvertNullToNullString')
        "data",
        HTMLObjectElementInternal::dataAttrGetter,
        HTMLObjectElementInternal::dataAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'declare' (Type: 'attribute' ExtAttr: '')
        "declare",
        HTMLObjectElementInternal::declareAttrGetter,
        HTMLObjectElementInternal::declareAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'height' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "height",
        HTMLObjectElementInternal::heightAttrGetter,
        HTMLObjectElementInternal::heightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'hspace' (Type: 'attribute' ExtAttr: '')
        "hspace",
        HTMLObjectElementInternal::hspaceAttrGetter,
        HTMLObjectElementInternal::hspaceAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "name",
        HTMLObjectElementInternal::nameAttrGetter,
        HTMLObjectElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'standby' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "standby",
        HTMLObjectElementInternal::standbyAttrGetter,
        HTMLObjectElementInternal::standbyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'type' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "type",
        HTMLObjectElementInternal::typeAttrGetter,
        HTMLObjectElementInternal::typeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'useMap' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "useMap",
        HTMLObjectElementInternal::useMapAttrGetter,
        HTMLObjectElementInternal::useMapAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'vspace' (Type: 'attribute' ExtAttr: '')
        "vspace",
        HTMLObjectElementInternal::vspaceAttrGetter,
        HTMLObjectElementInternal::vspaceAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'width' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "width",
        HTMLObjectElementInternal::widthAttrGetter,
        HTMLObjectElementInternal::widthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
        "willValidate",
        HTMLObjectElementInternal::willValidateAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'contentDocument' (Type: 'readonly attribute' ExtAttr: 'CheckFrameSecurity')
        "contentDocument",
        HTMLObjectElementInternal::contentDocumentAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLObjectElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLObjectElement",
      V8HTMLElement::GetTemplate(), V8HTMLObjectElement::internalFieldCount,
      HTMLObjectElement_attrs, sizeof(HTMLObjectElement_attrs)/sizeof(*HTMLObjectElement_attrs),
      NULL, 0);
  
  desc->InstanceTemplate()->SetIndexedPropertyHandler(V8HTMLObjectElement::indexedPropertyGetter, V8HTMLObjectElement::indexedPropertySetter, 0, 0);
  desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLObjectElement::namedPropertyGetter, V8HTMLObjectElement::namedPropertySetter, 0, 0, 0);
  desc->InstanceTemplate()->SetCallAsFunctionHandler(V8HTMLObjectElement::callAsFunctionCallback);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLObjectElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLObjectElement_raw_cache_ = createRawTemplate();
  return V8HTMLObjectElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLObjectElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLObjectElement_cache_ = ConfigureV8HTMLObjectElementTemplate(GetRawTemplate());
  return V8HTMLObjectElement_cache_;
}

HTMLObjectElement* V8HTMLObjectElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLObjectElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLObjectElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLObjectElement::wrap(HTMLObjectElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLOBJECTELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLObjectElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLObjectElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLObjectElement::wrap(impl);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8UIEvent.h"
#include "V8WheelEvent.h"

namespace WebCore {
namespace WheelEventInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> screenXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.screenX._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->screenX());
  }

  static v8::Handle<v8::Value> screenYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.screenY._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->screenY());
  }

  static v8::Handle<v8::Value> clientXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.clientX._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->clientX());
  }

  static v8::Handle<v8::Value> clientYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.clientY._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->clientY());
  }

  static v8::Handle<v8::Value> ctrlKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.ctrlKey._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8Boolean(imp->ctrlKey());
  }

  static v8::Handle<v8::Value> shiftKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.shiftKey._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8Boolean(imp->shiftKey());
  }

  static v8::Handle<v8::Value> altKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.altKey._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8Boolean(imp->altKey());
  }

  static v8::Handle<v8::Value> metaKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.metaKey._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8Boolean(imp->metaKey());
  }

  static v8::Handle<v8::Value> wheelDeltaAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.wheelDelta._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->wheelDelta());
  }

  static v8::Handle<v8::Value> wheelDeltaXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.wheelDeltaX._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->wheelDeltaX());
  }

  static v8::Handle<v8::Value> wheelDeltaYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.wheelDeltaY._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->wheelDeltaY());
  }

  static v8::Handle<v8::Value> offsetXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.offsetX._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->offsetX());
  }

  static v8::Handle<v8::Value> offsetYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.offsetY._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->offsetY());
  }

  static v8::Handle<v8::Value> xAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.x._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->x());
  }

  static v8::Handle<v8::Value> yAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WheelEvent.y._get");
    WheelEvent* imp = V8WheelEvent::toNative(info.Holder());
    return v8::Integer::New(imp->y());
  }

} // namespace WheelEventInternal

static const BatchedAttribute WheelEvent_attrs[] = {
    {
        // Attribute 'screenX' (Type: 'readonly attribute' ExtAttr: '')
        "screenX",
        WheelEventInternal::screenXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'screenY' (Type: 'readonly attribute' ExtAttr: '')
        "screenY",
        WheelEventInternal::screenYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clientX' (Type: 'readonly attribute' ExtAttr: '')
        "clientX",
        WheelEventInternal::clientXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'clientY' (Type: 'readonly attribute' ExtAttr: '')
        "clientY",
        WheelEventInternal::clientYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'ctrlKey' (Type: 'readonly attribute' ExtAttr: '')
        "ctrlKey",
        WheelEventInternal::ctrlKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'shiftKey' (Type: 'readonly attribute' ExtAttr: '')
        "shiftKey",
        WheelEventInternal::shiftKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'altKey' (Type: 'readonly attribute' ExtAttr: '')
        "altKey",
        WheelEventInternal::altKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'metaKey' (Type: 'readonly attribute' ExtAttr: '')
        "metaKey",
        WheelEventInternal::metaKeyAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'wheelDelta' (Type: 'readonly attribute' ExtAttr: '')
        "wheelDelta",
        WheelEventInternal::wheelDeltaAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'wheelDeltaX' (Type: 'readonly attribute' ExtAttr: '')
        "wheelDeltaX",
        WheelEventInternal::wheelDeltaXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'wheelDeltaY' (Type: 'readonly attribute' ExtAttr: '')
        "wheelDeltaY",
        WheelEventInternal::wheelDeltaYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offsetX' (Type: 'readonly attribute' ExtAttr: '')
        "offsetX",
        WheelEventInternal::offsetXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'offsetY' (Type: 'readonly attribute' ExtAttr: '')
        "offsetY",
        WheelEventInternal::offsetYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'x' (Type: 'readonly attribute' ExtAttr: '')
        "x",
        WheelEventInternal::xAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'y' (Type: 'readonly attribute' ExtAttr: '')
        "y",
        WheelEventInternal::yAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WheelEventTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WheelEvent",
      V8UIEvent::GetTemplate(), V8WheelEvent::internalFieldCount,
      WheelEvent_attrs, sizeof(WheelEvent_attrs)/sizeof(*WheelEvent_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WheelEvent::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WheelEvent_raw_cache_ = createRawTemplate();
  return V8WheelEvent_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WheelEvent::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WheelEvent_cache_ = ConfigureV8WheelEventTemplate(GetRawTemplate());
  return V8WheelEvent_cache_;
}

WheelEvent* V8WheelEvent::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WheelEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WheelEvent::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WheelEvent::wrap(WheelEvent* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WHEELEVENT, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WheelEvent > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(WheelEvent* impl) {
  if (!impl)
    return v8::Null();
  return V8WheelEvent::wrap(impl);
}
} // namespace WebCore

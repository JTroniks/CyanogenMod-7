/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(WEB_SOCKETS)

#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8Event.h"
#include "V8WebSocket.h"

namespace WebCore {
namespace WebSocketInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> URLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.URL._get");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8String(imp->url());
  }

  static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.readyState._get");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8::Integer::New(imp->readyState());
  }

  static v8::Handle<v8::Value> bufferedAmountAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.bufferedAmount._get");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->bufferedAmount());
  }

  static v8::Handle<v8::Value> onopenAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.onopen._get");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return imp->onopen() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onopen())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onopenAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.onopen._set");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onopen(), value, V8WebSocket::cacheIndex);
    imp->setOnopen(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onmessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.onmessage._get");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return imp->onmessage() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onmessage())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onmessageAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.onmessage._set");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onmessage(), value, V8WebSocket::cacheIndex);
    imp->setOnmessage(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncloseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.onclose._get");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    return imp->onclose() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onclose())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncloseAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebSocket.onclose._set");
    WebSocket* imp = V8WebSocket::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onclose(), value, V8WebSocket::cacheIndex);
    imp->setOnclose(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> closeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebSocket.close");
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    imp->close();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebSocket.dispatchEvent");
    WebSocket* imp = V8WebSocket::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Event* evt = V8Event::HasInstance(args[0]) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8Boolean(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace WebSocketInternal

static const BatchedAttribute WebSocket_attrs[] = {
    {
        // Attribute 'URL' (Type: 'readonly attribute' ExtAttr: '')
        "URL",
        WebSocketInternal::URLAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
        "readyState",
        WebSocketInternal::readyStateAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'bufferedAmount' (Type: 'readonly attribute' ExtAttr: '')
        "bufferedAmount",
        WebSocketInternal::bufferedAmountAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onopen' (Type: 'attribute' ExtAttr: '')
        "onopen",
        WebSocketInternal::onopenAttrGetter,
        WebSocketInternal::onopenAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onmessage' (Type: 'attribute' ExtAttr: '')
        "onmessage",
        WebSocketInternal::onmessageAttrGetter,
        WebSocketInternal::onmessageAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onclose' (Type: 'attribute' ExtAttr: '')
        "onclose",
        WebSocketInternal::oncloseAttrGetter,
        WebSocketInternal::oncloseAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback WebSocket_callbacks[] = {
  {"send", V8WebSocket::sendCallback},
  {"close", WebSocketInternal::closeCallback},
  {"addEventListener", V8WebSocket::addEventListenerCallback},
  {"removeEventListener", V8WebSocket::removeEventListenerCallback},
};
static const BatchedConstant WebSocket_consts[] = {
  { "CONNECTING", static_cast<signed int>(0) },
  { "OPEN", static_cast<signed int>(1) },
  { "CLOSED", static_cast<signed int>(2) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebSocketTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WebSocket",
      v8::Persistent<v8::FunctionTemplate>(), V8WebSocket::internalFieldCount,
      WebSocket_attrs, sizeof(WebSocket_attrs)/sizeof(*WebSocket_attrs),
      WebSocket_callbacks, sizeof(WebSocket_callbacks)/sizeof(*WebSocket_callbacks));
      desc->SetCallHandler(V8WebSocket::constructorCallback);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'dispatchEvent'
  const int dispatchEvent_argc = 1;
  v8::Handle<v8::FunctionTemplate> dispatchEvent_argv[dispatchEvent_argc] = { V8Event::GetRawTemplate() };
  v8::Handle<v8::Signature> dispatchEvent_signature = v8::Signature::New(desc, dispatchEvent_argc, dispatchEvent_argv);
  proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(WebSocketInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEvent_signature));
  batchConfigureConstants(desc, proto, WebSocket_consts, sizeof(WebSocket_consts)/sizeof(*WebSocket_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebSocket::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebSocket_raw_cache_ = createRawTemplate();
  return V8WebSocket_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WebSocket::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebSocket_cache_ = ConfigureV8WebSocketTemplate(GetRawTemplate());
  return V8WebSocket_cache_;
}

WebSocket* V8WebSocket::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WebSocket*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WebSocket::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebSocket::wrap(WebSocket* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getActiveDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WEBSOCKET, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getActiveDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WebSocket > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(WebSocket* impl) {
  if (!impl)
    return v8::Null();
  return V8WebSocket::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(WEB_SOCKETS)

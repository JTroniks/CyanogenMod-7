/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef V8Console_H
#define V8Console_H

#include <v8.h>
#include <wtf/HashMap.h>
#include "StringHash.h"
#include "V8Index.h"
#include "Console.h"

namespace WebCore {

class V8Console {

 public:
  static bool HasInstance(v8::Handle<v8::Value> value);
  static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
  static v8::Persistent<v8::FunctionTemplate> GetTemplate();
  static Console* toNative(v8::Handle<v8::Object>);
  static v8::Handle<v8::Object> wrap(Console*);
  static v8::Handle<v8::Value> debugCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> errorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> infoCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> logCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> warnCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> dirCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> dirxmlCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> traceCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> assertCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> countCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> markTimelineCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> timeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> timeEndCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> groupCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> groupEndCallback(const v8::Arguments&);
  static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 0;
};

  v8::Handle<v8::Value> toV8(Console*);
  v8::Handle<v8::Value> toV8(PassRefPtr<Console >);
}

#endif // V8Console_H

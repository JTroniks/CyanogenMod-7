/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "HTMLNames.h"
#include "V8DOMWindow.h"
#include "V8Document.h"
#include "V8HTMLElement.h"
#include "V8HTMLIFrameElement.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace HTMLIFrameElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.align._get");
    return getElementStringAttr(info, HTMLNames::alignAttr);
  }

  static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.align._set");
    setElementStringAttr(info, HTMLNames::alignAttr, value);
  }

  static v8::Handle<v8::Value> frameBorderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.frameBorder._get");
    return getElementStringAttr(info, HTMLNames::frameborderAttr);
  }

  static void frameBorderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.frameBorder._set");
    setElementStringAttr(info, HTMLNames::frameborderAttr, value);
  }

  static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.height._get");
    return getElementStringAttr(info, HTMLNames::heightAttr);
  }

  static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.height._set");
    setElementStringAttr(info, HTMLNames::heightAttr, value);
  }

  static v8::Handle<v8::Value> longDescAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.longDesc._get");
    return getElementStringAttr(info, HTMLNames::longdescAttr);
  }

  static void longDescAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.longDesc._set");
    setElementStringAttr(info, HTMLNames::longdescAttr, value);
  }

  static v8::Handle<v8::Value> marginHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.marginHeight._get");
    return getElementStringAttr(info, HTMLNames::marginheightAttr);
  }

  static void marginHeightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.marginHeight._set");
    setElementStringAttr(info, HTMLNames::marginheightAttr, value);
  }

  static v8::Handle<v8::Value> marginWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.marginWidth._get");
    return getElementStringAttr(info, HTMLNames::marginwidthAttr);
  }

  static void marginWidthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.marginWidth._set");
    setElementStringAttr(info, HTMLNames::marginwidthAttr, value);
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
  }

  static v8::Handle<v8::Value> sandboxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.sandbox._get");
    return getElementStringAttr(info, HTMLNames::sandboxAttr);
  }

  static void sandboxAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.sandbox._set");
    setElementStringAttr(info, HTMLNames::sandboxAttr, value);
  }

  static v8::Handle<v8::Value> scrollingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.scrolling._get");
    return getElementStringAttr(info, HTMLNames::scrollingAttr);
  }

  static void scrollingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.scrolling._set");
    setElementStringAttr(info, HTMLNames::scrollingAttr, value);
  }

  static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.src._get");
    return getElementStringAttr(info, HTMLNames::srcAttr);
  }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.width._get");
    return getElementStringAttr(info, HTMLNames::widthAttr);
  }

  static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.width._set");
    setElementStringAttr(info, HTMLNames::widthAttr, value);
  }

  static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.contentDocument._get");
    HTMLIFrameElement* imp = V8HTMLIFrameElement::toNative(info.Holder());
    if (!V8BindingSecurity::checkNodeSecurity(V8BindingState::Only(), imp->contentDocument())) return v8::Handle<v8::Value>();

    return toV8(imp->contentDocument());
  }

  static v8::Handle<v8::Value> contentWindowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLIFrameElement.contentWindow._get");
    HTMLIFrameElement* imp = V8HTMLIFrameElement::toNative(info.Holder());
    return toV8(imp->contentWindow());
  }

} // namespace HTMLIFrameElementInternal

static const BatchedAttribute HTMLIFrameElement_attrs[] = {
    {
        // Attribute 'align' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "align",
        HTMLIFrameElementInternal::alignAttrGetter,
        HTMLIFrameElementInternal::alignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'frameBorder' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "frameBorder",
        HTMLIFrameElementInternal::frameBorderAttrGetter,
        HTMLIFrameElementInternal::frameBorderAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'height' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "height",
        HTMLIFrameElementInternal::heightAttrGetter,
        HTMLIFrameElementInternal::heightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'longDesc' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "longDesc",
        HTMLIFrameElementInternal::longDescAttrGetter,
        HTMLIFrameElementInternal::longDescAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'marginHeight' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "marginHeight",
        HTMLIFrameElementInternal::marginHeightAttrGetter,
        HTMLIFrameElementInternal::marginHeightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'marginWidth' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "marginWidth",
        HTMLIFrameElementInternal::marginWidthAttrGetter,
        HTMLIFrameElementInternal::marginWidthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "name",
        HTMLIFrameElementInternal::nameAttrGetter,
        HTMLIFrameElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'sandbox' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "sandbox",
        HTMLIFrameElementInternal::sandboxAttrGetter,
        HTMLIFrameElementInternal::sandboxAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'scrolling' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "scrolling",
        HTMLIFrameElementInternal::scrollingAttrGetter,
        HTMLIFrameElementInternal::scrollingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'src' (Type: 'attribute' ExtAttr: 'CustomSetter ConvertNullToNullString Reflect')
        "src",
        HTMLIFrameElementInternal::srcAttrGetter,
        V8HTMLIFrameElement::srcAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'width' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "width",
        HTMLIFrameElementInternal::widthAttrGetter,
        HTMLIFrameElementInternal::widthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'contentDocument' (Type: 'readonly attribute' ExtAttr: 'CheckFrameSecurity')
        "contentDocument",
        HTMLIFrameElementInternal::contentDocumentAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'contentWindow' (Type: 'readonly attribute' ExtAttr: '')
        "contentWindow",
        HTMLIFrameElementInternal::contentWindowAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLIFrameElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLIFrameElement",
      V8HTMLElement::GetTemplate(), V8HTMLIFrameElement::internalFieldCount,
      HTMLIFrameElement_attrs, sizeof(HTMLIFrameElement_attrs)/sizeof(*HTMLIFrameElement_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLIFrameElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLIFrameElement_raw_cache_ = createRawTemplate();
  return V8HTMLIFrameElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLIFrameElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLIFrameElement_cache_ = ConfigureV8HTMLIFrameElementTemplate(GetRawTemplate());
  return V8HTMLIFrameElement_cache_;
}

HTMLIFrameElement* V8HTMLIFrameElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLIFrameElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLIFrameElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLIFrameElement::wrap(HTMLIFrameElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLIFRAMEELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLIFrameElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLIFrameElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLIFrameElement::wrap(impl);
}
} // namespace WebCore

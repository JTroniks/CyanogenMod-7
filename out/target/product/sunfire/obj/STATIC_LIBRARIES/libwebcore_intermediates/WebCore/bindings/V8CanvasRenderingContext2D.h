/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/

#ifndef V8CanvasRenderingContext2D_H
#define V8CanvasRenderingContext2D_H

#include <v8.h>
#include <wtf/HashMap.h>
#include "StringHash.h"
#include "V8Index.h"
#include "CanvasRenderingContext2D.h"

namespace WebCore {

class V8CanvasRenderingContext2D {

 public:
  static bool HasInstance(v8::Handle<v8::Value> value);
  static v8::Persistent<v8::FunctionTemplate> GetRawTemplate();
  static v8::Persistent<v8::FunctionTemplate> GetTemplate();
  static CanvasRenderingContext2D* toNative(v8::Handle<v8::Object>);
  static v8::Handle<v8::Object> wrap(CanvasRenderingContext2D*);
  static v8::Handle<v8::Value> saveCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> restoreCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> scaleCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> rotateCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> translateCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> transformCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setTransformCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createLinearGradientCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createRadialGradientCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearRectCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> fillRectCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> beginPathCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> closePathCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> moveToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> lineToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> quadraticCurveToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> bezierCurveToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> arcToCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> rectCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> arcCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> fillCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> strokeCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clipCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> isPointInPathCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> fillTextCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> strokeTextCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> measureTextCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setAlphaCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setCompositeOperationCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setLineWidthCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setLineCapCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setLineJoinCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setMiterLimitCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> clearShadowCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setStrokeColorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setFillColorCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> strokeRectCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> drawImageCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> drawImageFromRectCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> setShadowCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createPatternCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> createImageDataCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> getImageDataCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> putImageDataCallback(const v8::Arguments&);
  static v8::Handle<v8::Value> strokeStyleAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static void strokeStyleAccessorSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
  static v8::Handle<v8::Value> fillStyleAccessorGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info);
  static void fillStyleAccessorSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info);
  static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + 0;
};

  v8::Handle<v8::Value> toV8(CanvasRenderingContext2D*);
  v8::Handle<v8::Value> toV8(PassRefPtr<CanvasRenderingContext2D >);
}

#endif // V8CanvasRenderingContext2D_H

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(OFFLINE_WEB_APPLICATIONS)

#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8DOMApplicationCache.h"
#include "V8Event.h"

namespace WebCore {
namespace DOMApplicationCacheInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> statusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.status._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return v8::Integer::New(imp->status());
  }

  static v8::Handle<v8::Value> oncheckingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onchecking._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->onchecking() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onchecking())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncheckingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onchecking._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onchecking(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOnchecking(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onerror._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onerror._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onnoupdateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onnoupdate._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->onnoupdate() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onnoupdate())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onnoupdateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onnoupdate._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onnoupdate(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOnnoupdate(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> ondownloadingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.ondownloading._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->ondownloading() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->ondownloading())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void ondownloadingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.ondownloading._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->ondownloading(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOndownloading(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onprogress._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onprogress._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onupdatereadyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onupdateready._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->onupdateready() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onupdateready())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onupdatereadyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onupdateready._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onupdateready(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOnupdateready(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> oncachedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.oncached._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->oncached() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->oncached())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void oncachedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.oncached._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->oncached(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOncached(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onobsoleteAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onobsolete._get");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    return imp->onobsolete() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onobsolete())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onobsoleteAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.DOMApplicationCache.onobsolete._set");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onobsolete(), value, V8DOMApplicationCache::cacheIndex);
    imp->setOnobsolete(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> updateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMApplicationCache.update");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->update(ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> swapCacheCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMApplicationCache.swapCache");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    imp->swapCache(ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.DOMApplicationCache.dispatchEvent");
    DOMApplicationCache* imp = V8DOMApplicationCache::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Event* evt = V8Event::HasInstance(args[0]) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8Boolean(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace DOMApplicationCacheInternal

static const BatchedAttribute DOMApplicationCache_attrs[] = {
    {
        // Attribute 'status' (Type: 'readonly attribute' ExtAttr: '')
        "status",
        DOMApplicationCacheInternal::statusAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onchecking' (Type: 'attribute' ExtAttr: '')
        "onchecking",
        DOMApplicationCacheInternal::oncheckingAttrGetter,
        DOMApplicationCacheInternal::oncheckingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
        "onerror",
        DOMApplicationCacheInternal::onerrorAttrGetter,
        DOMApplicationCacheInternal::onerrorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onnoupdate' (Type: 'attribute' ExtAttr: '')
        "onnoupdate",
        DOMApplicationCacheInternal::onnoupdateAttrGetter,
        DOMApplicationCacheInternal::onnoupdateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'ondownloading' (Type: 'attribute' ExtAttr: '')
        "ondownloading",
        DOMApplicationCacheInternal::ondownloadingAttrGetter,
        DOMApplicationCacheInternal::ondownloadingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onprogress' (Type: 'attribute' ExtAttr: '')
        "onprogress",
        DOMApplicationCacheInternal::onprogressAttrGetter,
        DOMApplicationCacheInternal::onprogressAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onupdateready' (Type: 'attribute' ExtAttr: '')
        "onupdateready",
        DOMApplicationCacheInternal::onupdatereadyAttrGetter,
        DOMApplicationCacheInternal::onupdatereadyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'oncached' (Type: 'attribute' ExtAttr: '')
        "oncached",
        DOMApplicationCacheInternal::oncachedAttrGetter,
        DOMApplicationCacheInternal::oncachedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onobsolete' (Type: 'attribute' ExtAttr: '')
        "onobsolete",
        DOMApplicationCacheInternal::onobsoleteAttrGetter,
        DOMApplicationCacheInternal::onobsoleteAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback DOMApplicationCache_callbacks[] = {
  {"update", DOMApplicationCacheInternal::updateCallback},
  {"swapCache", DOMApplicationCacheInternal::swapCacheCallback},
  {"addEventListener", V8DOMApplicationCache::addEventListenerCallback},
  {"removeEventListener", V8DOMApplicationCache::removeEventListenerCallback},
};
static const BatchedConstant DOMApplicationCache_consts[] = {
  { "UNCACHED", static_cast<signed int>(0) },
  { "IDLE", static_cast<signed int>(1) },
  { "CHECKING", static_cast<signed int>(2) },
  { "DOWNLOADING", static_cast<signed int>(3) },
  { "UPDATEREADY", static_cast<signed int>(4) },
  { "OBSOLETE", static_cast<signed int>(5) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8DOMApplicationCacheTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "DOMApplicationCache",
      v8::Persistent<v8::FunctionTemplate>(), V8DOMApplicationCache::internalFieldCount,
      DOMApplicationCache_attrs, sizeof(DOMApplicationCache_attrs)/sizeof(*DOMApplicationCache_attrs),
      DOMApplicationCache_callbacks, sizeof(DOMApplicationCache_callbacks)/sizeof(*DOMApplicationCache_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'dispatchEvent'
  const int dispatchEvent_argc = 1;
  v8::Handle<v8::FunctionTemplate> dispatchEvent_argv[dispatchEvent_argc] = { V8Event::GetRawTemplate() };
  v8::Handle<v8::Signature> dispatchEvent_signature = v8::Signature::New(desc, dispatchEvent_argc, dispatchEvent_argv);
  proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(DOMApplicationCacheInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEvent_signature));
  batchConfigureConstants(desc, proto, DOMApplicationCache_consts, sizeof(DOMApplicationCache_consts)/sizeof(*DOMApplicationCache_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8DOMApplicationCache::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DOMApplicationCache_raw_cache_ = createRawTemplate();
  return V8DOMApplicationCache_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8DOMApplicationCache::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8DOMApplicationCache_cache_ = ConfigureV8DOMApplicationCacheTemplate(GetRawTemplate());
  return V8DOMApplicationCache_cache_;
}

DOMApplicationCache* V8DOMApplicationCache::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<DOMApplicationCache*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8DOMApplicationCache::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8DOMApplicationCache::wrap(DOMApplicationCache* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::DOMAPPLICATIONCACHE, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<DOMApplicationCache > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(DOMApplicationCache* impl) {
  if (!impl)
    return v8::Null();
  return V8DOMApplicationCache::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(OFFLINE_WEB_APPLICATIONS)

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "HTMLNames.h"
#include "V8Collection.h"
#include "V8HTMLAppletElement.h"
#include "V8HTMLElement.h"

namespace WebCore {
namespace HTMLAppletElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.align._get");
    return getElementStringAttr(info, HTMLNames::alignAttr);
  }

  static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.align._set");
    setElementStringAttr(info, HTMLNames::alignAttr, value);
  }

  static v8::Handle<v8::Value> altAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.alt._get");
    return getElementStringAttr(info, HTMLNames::altAttr);
  }

  static void altAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.alt._set");
    setElementStringAttr(info, HTMLNames::altAttr, value);
  }

  static v8::Handle<v8::Value> archiveAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.archive._get");
    return getElementStringAttr(info, HTMLNames::archiveAttr);
  }

  static void archiveAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.archive._set");
    setElementStringAttr(info, HTMLNames::archiveAttr, value);
  }

  static v8::Handle<v8::Value> codeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.code._get");
    return getElementStringAttr(info, HTMLNames::codeAttr);
  }

  static void codeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.code._set");
    setElementStringAttr(info, HTMLNames::codeAttr, value);
  }

  static v8::Handle<v8::Value> codeBaseAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.codeBase._get");
    return getElementStringAttr(info, HTMLNames::codebaseAttr);
  }

  static void codeBaseAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.codeBase._set");
    setElementStringAttr(info, HTMLNames::codebaseAttr, value);
  }

  static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.height._get");
    return getElementStringAttr(info, HTMLNames::heightAttr);
  }

  static void heightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.height._set");
    setElementStringAttr(info, HTMLNames::heightAttr, value);
  }

  static v8::Handle<v8::Value> hspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.hspace._get");
    return getElementStringAttr(info, HTMLNames::hspaceAttr);
  }

  static void hspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.hspace._set");
    setElementStringAttr(info, HTMLNames::hspaceAttr, value);
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
  }

  static v8::Handle<v8::Value> objectAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.object._get");
    return getElementStringAttr(info, HTMLNames::objectAttr);
  }

  static void objectAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.object._set");
    setElementStringAttr(info, HTMLNames::objectAttr, value);
  }

  static v8::Handle<v8::Value> vspaceAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.vspace._get");
    return getElementStringAttr(info, HTMLNames::vspaceAttr);
  }

  static void vspaceAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.vspace._set");
    setElementStringAttr(info, HTMLNames::vspaceAttr, value);
  }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.width._get");
    return getElementStringAttr(info, HTMLNames::widthAttr);
  }

  static void widthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAppletElement.width._set");
    setElementStringAttr(info, HTMLNames::widthAttr, value);
  }

} // namespace HTMLAppletElementInternal

static const BatchedAttribute HTMLAppletElement_attrs[] = {
    {
        // Attribute 'align' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "align",
        HTMLAppletElementInternal::alignAttrGetter,
        HTMLAppletElementInternal::alignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'alt' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "alt",
        HTMLAppletElementInternal::altAttrGetter,
        HTMLAppletElementInternal::altAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'archive' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "archive",
        HTMLAppletElementInternal::archiveAttrGetter,
        HTMLAppletElementInternal::archiveAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'code' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "code",
        HTMLAppletElementInternal::codeAttrGetter,
        HTMLAppletElementInternal::codeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'codeBase' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "codeBase",
        HTMLAppletElementInternal::codeBaseAttrGetter,
        HTMLAppletElementInternal::codeBaseAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'height' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "height",
        HTMLAppletElementInternal::heightAttrGetter,
        HTMLAppletElementInternal::heightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'hspace' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "hspace",
        HTMLAppletElementInternal::hspaceAttrGetter,
        HTMLAppletElementInternal::hspaceAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "name",
        HTMLAppletElementInternal::nameAttrGetter,
        HTMLAppletElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'object' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "object",
        HTMLAppletElementInternal::objectAttrGetter,
        HTMLAppletElementInternal::objectAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'vspace' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "vspace",
        HTMLAppletElementInternal::vspaceAttrGetter,
        HTMLAppletElementInternal::vspaceAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'width' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "width",
        HTMLAppletElementInternal::widthAttrGetter,
        HTMLAppletElementInternal::widthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLAppletElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLAppletElement",
      V8HTMLElement::GetTemplate(), V8HTMLAppletElement::internalFieldCount,
      HTMLAppletElement_attrs, sizeof(HTMLAppletElement_attrs)/sizeof(*HTMLAppletElement_attrs),
      NULL, 0);
  
  desc->InstanceTemplate()->SetIndexedPropertyHandler(V8HTMLAppletElement::indexedPropertyGetter, V8HTMLAppletElement::indexedPropertySetter, 0, 0);
  desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLAppletElement::namedPropertyGetter, V8HTMLAppletElement::namedPropertySetter, 0, 0, 0);
  desc->InstanceTemplate()->SetCallAsFunctionHandler(V8HTMLAppletElement::callAsFunctionCallback);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLAppletElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLAppletElement_raw_cache_ = createRawTemplate();
  return V8HTMLAppletElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLAppletElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLAppletElement_cache_ = ConfigureV8HTMLAppletElementTemplate(GetRawTemplate());
  return V8HTMLAppletElement_cache_;
}

HTMLAppletElement* V8HTMLAppletElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLAppletElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLAppletElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLAppletElement::wrap(HTMLAppletElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLAPPLETELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLAppletElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLAppletElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLAppletElement::wrap(impl);
}
} // namespace WebCore

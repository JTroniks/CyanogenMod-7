/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "HTMLNames.h"
#include "V8FileList.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "V8HTMLInputElement.h"
#include "V8ValidityState.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace HTMLInputElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> defaultValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.defaultValue._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->defaultValue());
  }

  static void defaultValueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.defaultValue._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setDefaultValue(v);
    return;
  }

  static v8::Handle<v8::Value> defaultCheckedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.defaultChecked._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->defaultChecked());
  }

  static void defaultCheckedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.defaultChecked._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setDefaultChecked(v);
    return;
  }

  static v8::Handle<v8::Value> formAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.form._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->form());
  }

  static v8::Handle<v8::Value> formNoValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.formNoValidate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->formNoValidate());
  }

  static void formNoValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.formNoValidate._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setFormNoValidate(v);
    return;
  }

  static v8::Handle<v8::Value> validityAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.validity._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->validity());
  }

  static v8::Handle<v8::Value> acceptAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.accept._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->accept());
  }

  static void acceptAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.accept._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAccept(v);
    return;
  }

  static v8::Handle<v8::Value> accessKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.accessKey._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->accessKey());
  }

  static void accessKeyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.accessKey._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAccessKey(v);
    return;
  }

  static v8::Handle<v8::Value> alignAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.align._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->align());
  }

  static void alignAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.align._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAlign(v);
    return;
  }

  static v8::Handle<v8::Value> altAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.alt._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->alt());
  }

  static void altAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.alt._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAlt(v);
    return;
  }

  static v8::Handle<v8::Value> checkedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.checked._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->checked());
  }

  static void checkedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.checked._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setChecked(v);
    return;
  }

  static v8::Handle<v8::Value> disabledAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.disabled._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->disabled());
  }

  static void disabledAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.disabled._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setDisabled(v);
    return;
  }

  static v8::Handle<v8::Value> autofocusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.autofocus._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->autofocus());
  }

  static void autofocusAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.autofocus._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setAutofocus(v);
    return;
  }

  static v8::Handle<v8::Value> maxAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.max._get");
    return getElementStringAttr(info, HTMLNames::maxAttr);
  }

  static void maxAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.max._set");
    setElementStringAttr(info, HTMLNames::maxAttr, value);
  }

  static v8::Handle<v8::Value> maxLengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.maxLength._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8::Integer::New(imp->maxLength());
  }

  static void maxLengthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.maxLength._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    int v = toInt32(value);
    ExceptionCode ec = 0;
    imp->setMaxLength(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> minAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.min._get");
    return getElementStringAttr(info, HTMLNames::minAttr);
  }

  static void minAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.min._set");
    setElementStringAttr(info, HTMLNames::minAttr, value);
  }

  static v8::Handle<v8::Value> multipleAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.multiple._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->multiple());
  }

  static void multipleAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.multiple._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setMultiple(v);
    return;
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.name._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->name());
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.name._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setName(v);
    return;
  }

  static v8::Handle<v8::Value> patternAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.pattern._get");
    return getElementStringAttr(info, HTMLNames::patternAttr);
  }

  static void patternAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.pattern._set");
    setElementStringAttr(info, HTMLNames::patternAttr, value);
  }

  static v8::Handle<v8::Value> placeholderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.placeholder._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->placeholder());
  }

  static void placeholderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.placeholder._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<> v = value;
    imp->setPlaceholder(v);
    return;
  }

  static v8::Handle<v8::Value> readOnlyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.readOnly._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->readOnly());
  }

  static void readOnlyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.readOnly._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setReadOnly(v);
    return;
  }

  static v8::Handle<v8::Value> requiredAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.required._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->required());
  }

  static void requiredAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.required._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setRequired(v);
    return;
  }

  static v8::Handle<v8::Value> sizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.size._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->size());
  }

  static void sizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.size._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    unsigned v = toInt32(value);
    imp->setSize(v);
    return;
  }

  static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.src._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->src());
  }

  static void srcAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.src._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setSrc(v);
    return;
  }

  static v8::Handle<v8::Value> stepAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.step._get");
    return getElementStringAttr(info, HTMLNames::stepAttr);
  }

  static void stepAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.step._set");
    setElementStringAttr(info, HTMLNames::stepAttr, value);
  }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.type._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->type());
  }

  static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.type._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setType(v);
    return;
  }

  static v8::Handle<v8::Value> useMapAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.useMap._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->useMap());
  }

  static void useMapAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.useMap._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setUseMap(v);
    return;
  }

  static v8::Handle<v8::Value> valueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.value._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->value());
  }

  static void valueAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.value._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setValue(v);
    return;
  }

  static v8::Handle<v8::Value> valueAsDateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.valueAsDate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8DateOrNull(imp->valueAsDate());;
  }

  static void valueAsDateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.valueAsDate._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    double v = toWebCoreDate(value);
    ExceptionCode ec = 0;
    imp->setValueAsDate(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> valueAsNumberAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.valueAsNumber._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8::Number::New(imp->valueAsNumber());
  }

  static void valueAsNumberAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.valueAsNumber._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    double v = static_cast<double>(value->NumberValue());
    ExceptionCode ec = 0;
    imp->setValueAsNumber(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> willValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.willValidate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->willValidate());
  }

  static v8::Handle<v8::Value> validationMessageAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.validationMessage._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8String(imp->validationMessage());
  }

  static v8::Handle<v8::Value> indeterminateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.indeterminate._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return v8Boolean(imp->indeterminate());
  }

  static void indeterminateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.indeterminate._set");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setIndeterminate(v);
    return;
  }

  static v8::Handle<v8::Value> filesAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLInputElement.files._get");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(info.Holder());
    return toV8(imp->files());
  }

  static v8::Handle<v8::Value> stepUpCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLInputElement.stepUp");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->stepUp(ec);
        if (UNLIKELY(ec)) goto fail;
        return v8::Handle<v8::Value>();
    }
    int n = toInt32(args[0]);
    imp->stepUp(n, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stepDownCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLInputElement.stepDown");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    if (args.Length() <= 0) {
        imp->stepDown(ec);
        if (UNLIKELY(ec)) goto fail;
        return v8::Handle<v8::Value>();
    }
    int n = toInt32(args[0]);
    imp->stepDown(n, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLInputElement.checkValidity");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity());
  }

  static v8::Handle<v8::Value> setCustomValidityCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLInputElement.setCustomValidity");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    V8Parameter<WithUndefinedOrNullCheck> error = args[0];
    imp->setCustomValidity(error);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> selectCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLInputElement.select");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    imp->select();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clickCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLInputElement.click");
    HTMLInputElement* imp = V8HTMLInputElement::toNative(args.Holder());
    imp->click();
    return v8::Handle<v8::Value>();
  }

} // namespace HTMLInputElementInternal

static const BatchedAttribute HTMLInputElement_attrs[] = {
    {
        // Attribute 'defaultValue' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "defaultValue",
        HTMLInputElementInternal::defaultValueAttrGetter,
        HTMLInputElementInternal::defaultValueAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'defaultChecked' (Type: 'attribute' ExtAttr: '')
        "defaultChecked",
        HTMLInputElementInternal::defaultCheckedAttrGetter,
        HTMLInputElementInternal::defaultCheckedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'form' (Type: 'readonly attribute' ExtAttr: '')
        "form",
        HTMLInputElementInternal::formAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'formNoValidate' (Type: 'attribute' ExtAttr: '')
        "formNoValidate",
        HTMLInputElementInternal::formNoValidateAttrGetter,
        HTMLInputElementInternal::formNoValidateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'validity' (Type: 'readonly attribute' ExtAttr: '')
        "validity",
        HTMLInputElementInternal::validityAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'accept' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "accept",
        HTMLInputElementInternal::acceptAttrGetter,
        HTMLInputElementInternal::acceptAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'accessKey' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "accessKey",
        HTMLInputElementInternal::accessKeyAttrGetter,
        HTMLInputElementInternal::accessKeyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'align' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "align",
        HTMLInputElementInternal::alignAttrGetter,
        HTMLInputElementInternal::alignAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'alt' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "alt",
        HTMLInputElementInternal::altAttrGetter,
        HTMLInputElementInternal::altAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'checked' (Type: 'attribute' ExtAttr: '')
        "checked",
        HTMLInputElementInternal::checkedAttrGetter,
        HTMLInputElementInternal::checkedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'disabled' (Type: 'attribute' ExtAttr: '')
        "disabled",
        HTMLInputElementInternal::disabledAttrGetter,
        HTMLInputElementInternal::disabledAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'autofocus' (Type: 'attribute' ExtAttr: '')
        "autofocus",
        HTMLInputElementInternal::autofocusAttrGetter,
        HTMLInputElementInternal::autofocusAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'max' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "max",
        HTMLInputElementInternal::maxAttrGetter,
        HTMLInputElementInternal::maxAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'maxLength' (Type: 'attribute' ExtAttr: '')
        "maxLength",
        HTMLInputElementInternal::maxLengthAttrGetter,
        HTMLInputElementInternal::maxLengthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'min' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "min",
        HTMLInputElementInternal::minAttrGetter,
        HTMLInputElementInternal::minAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'multiple' (Type: 'attribute' ExtAttr: '')
        "multiple",
        HTMLInputElementInternal::multipleAttrGetter,
        HTMLInputElementInternal::multipleAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "name",
        HTMLInputElementInternal::nameAttrGetter,
        HTMLInputElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pattern' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "pattern",
        HTMLInputElementInternal::patternAttrGetter,
        HTMLInputElementInternal::patternAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'placeholder' (Type: 'attribute' ExtAttr: '')
        "placeholder",
        HTMLInputElementInternal::placeholderAttrGetter,
        HTMLInputElementInternal::placeholderAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'readOnly' (Type: 'attribute' ExtAttr: '')
        "readOnly",
        HTMLInputElementInternal::readOnlyAttrGetter,
        HTMLInputElementInternal::readOnlyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'required' (Type: 'attribute' ExtAttr: '')
        "required",
        HTMLInputElementInternal::requiredAttrGetter,
        HTMLInputElementInternal::requiredAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'size' (Type: 'attribute' ExtAttr: '')
        "size",
        HTMLInputElementInternal::sizeAttrGetter,
        HTMLInputElementInternal::sizeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'src' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "src",
        HTMLInputElementInternal::srcAttrGetter,
        HTMLInputElementInternal::srcAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'step' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "step",
        HTMLInputElementInternal::stepAttrGetter,
        HTMLInputElementInternal::stepAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'type' (Type: 'attribute' ExtAttr: 'JSCCustomGetter ConvertNullToNullString')
        "type",
        HTMLInputElementInternal::typeAttrGetter,
        HTMLInputElementInternal::typeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'useMap' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "useMap",
        HTMLInputElementInternal::useMapAttrGetter,
        HTMLInputElementInternal::useMapAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'value' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "value",
        HTMLInputElementInternal::valueAttrGetter,
        HTMLInputElementInternal::valueAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'valueAsDate' (Type: 'attribute' ExtAttr: '')
        "valueAsDate",
        HTMLInputElementInternal::valueAsDateAttrGetter,
        HTMLInputElementInternal::valueAsDateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'valueAsNumber' (Type: 'attribute' ExtAttr: '')
        "valueAsNumber",
        HTMLInputElementInternal::valueAsNumberAttrGetter,
        HTMLInputElementInternal::valueAsNumberAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'willValidate' (Type: 'readonly attribute' ExtAttr: '')
        "willValidate",
        HTMLInputElementInternal::willValidateAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'validationMessage' (Type: 'readonly attribute' ExtAttr: '')
        "validationMessage",
        HTMLInputElementInternal::validationMessageAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'indeterminate' (Type: 'attribute' ExtAttr: '')
        "indeterminate",
        HTMLInputElementInternal::indeterminateAttrGetter,
        HTMLInputElementInternal::indeterminateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'selectionStart' (Type: 'attribute' ExtAttr: 'Custom')
        "selectionStart",
        V8HTMLInputElement::selectionStartAccessorGetter,
        V8HTMLInputElement::selectionStartAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'selectionEnd' (Type: 'attribute' ExtAttr: 'Custom')
        "selectionEnd",
        V8HTMLInputElement::selectionEndAccessorGetter,
        V8HTMLInputElement::selectionEndAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'files' (Type: 'readonly attribute' ExtAttr: '')
        "files",
        HTMLInputElementInternal::filesAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback HTMLInputElement_callbacks[] = {
  {"stepUp", HTMLInputElementInternal::stepUpCallback},
  {"stepDown", HTMLInputElementInternal::stepDownCallback},
  {"checkValidity", HTMLInputElementInternal::checkValidityCallback},
  {"setCustomValidity", HTMLInputElementInternal::setCustomValidityCallback},
  {"select", HTMLInputElementInternal::selectCallback},
  {"click", HTMLInputElementInternal::clickCallback},
  {"setSelectionRange", V8HTMLInputElement::setSelectionRangeCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLInputElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLInputElement",
      V8HTMLElement::GetTemplate(), V8HTMLInputElement::internalFieldCount,
      HTMLInputElement_attrs, sizeof(HTMLInputElement_attrs)/sizeof(*HTMLInputElement_attrs),
      HTMLInputElement_callbacks, sizeof(HTMLInputElement_callbacks)/sizeof(*HTMLInputElement_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement_raw_cache_ = createRawTemplate();
  return V8HTMLInputElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLInputElement_cache_ = ConfigureV8HTMLInputElementTemplate(GetRawTemplate());
  return V8HTMLInputElement_cache_;
}

HTMLInputElement* V8HTMLInputElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLInputElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLInputElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLInputElement::wrap(HTMLInputElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLINPUTELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLInputElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLInputElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLInputElement::wrap(impl);
}
} // namespace WebCore

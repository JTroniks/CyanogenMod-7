/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(DATAGRID)

#include "V8HTMLDataGridRowElement.h"
#include "V8HTMLElement.h"

namespace WebCore {
namespace HTMLDataGridRowElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> selectedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLDataGridRowElement.selected._get");
    HTMLDataGridRowElement* imp = V8HTMLDataGridRowElement::toNative(info.Holder());
    return v8Boolean(imp->selected());
  }

  static void selectedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLDataGridRowElement.selected._set");
    HTMLDataGridRowElement* imp = V8HTMLDataGridRowElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setSelected(v);
    return;
  }

  static v8::Handle<v8::Value> focusedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLDataGridRowElement.focused._get");
    HTMLDataGridRowElement* imp = V8HTMLDataGridRowElement::toNative(info.Holder());
    return v8Boolean(imp->focused());
  }

  static void focusedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLDataGridRowElement.focused._set");
    HTMLDataGridRowElement* imp = V8HTMLDataGridRowElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setFocused(v);
    return;
  }

  static v8::Handle<v8::Value> expandedAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLDataGridRowElement.expanded._get");
    HTMLDataGridRowElement* imp = V8HTMLDataGridRowElement::toNative(info.Holder());
    return v8Boolean(imp->expanded());
  }

  static void expandedAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLDataGridRowElement.expanded._set");
    HTMLDataGridRowElement* imp = V8HTMLDataGridRowElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setExpanded(v);
    return;
  }

} // namespace HTMLDataGridRowElementInternal

static const BatchedAttribute HTMLDataGridRowElement_attrs[] = {
    {
        // Attribute 'selected' (Type: 'attribute' ExtAttr: '')
        "selected",
        HTMLDataGridRowElementInternal::selectedAttrGetter,
        HTMLDataGridRowElementInternal::selectedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'focused' (Type: 'attribute' ExtAttr: '')
        "focused",
        HTMLDataGridRowElementInternal::focusedAttrGetter,
        HTMLDataGridRowElementInternal::focusedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'expanded' (Type: 'attribute' ExtAttr: '')
        "expanded",
        HTMLDataGridRowElementInternal::expandedAttrGetter,
        HTMLDataGridRowElementInternal::expandedAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLDataGridRowElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLDataGridRowElement",
      V8HTMLElement::GetTemplate(), V8HTMLDataGridRowElement::internalFieldCount,
      HTMLDataGridRowElement_attrs, sizeof(HTMLDataGridRowElement_attrs)/sizeof(*HTMLDataGridRowElement_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridRowElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridRowElement_raw_cache_ = createRawTemplate();
  return V8HTMLDataGridRowElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridRowElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLDataGridRowElement_cache_ = ConfigureV8HTMLDataGridRowElementTemplate(GetRawTemplate());
  return V8HTMLDataGridRowElement_cache_;
}

HTMLDataGridRowElement* V8HTMLDataGridRowElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLDataGridRowElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLDataGridRowElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLDataGridRowElement::wrap(HTMLDataGridRowElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLDATAGRIDROWELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLDataGridRowElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLDataGridRowElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLDataGridRowElement::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(DATAGRID)

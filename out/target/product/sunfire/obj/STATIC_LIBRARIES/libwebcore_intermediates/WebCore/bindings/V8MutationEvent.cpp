/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8Event.h"
#include "V8MutationEvent.h"
#include "V8Node.h"

namespace WebCore {
namespace MutationEventInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> relatedNodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.MutationEvent.relatedNode._get");
    MutationEvent* imp = V8MutationEvent::toNative(info.Holder());
    return toV8(imp->relatedNode());
  }

  static v8::Handle<v8::Value> prevValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.MutationEvent.prevValue._get");
    MutationEvent* imp = V8MutationEvent::toNative(info.Holder());
    return v8String(imp->prevValue());
  }

  static v8::Handle<v8::Value> newValueAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.MutationEvent.newValue._get");
    MutationEvent* imp = V8MutationEvent::toNative(info.Holder());
    return v8String(imp->newValue());
  }

  static v8::Handle<v8::Value> attrNameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.MutationEvent.attrName._get");
    MutationEvent* imp = V8MutationEvent::toNative(info.Holder());
    return v8String(imp->attrName());
  }

  static v8::Handle<v8::Value> attrChangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.MutationEvent.attrChange._get");
    MutationEvent* imp = V8MutationEvent::toNative(info.Holder());
    return v8::Integer::New(imp->attrChange());
  }

  static v8::Handle<v8::Value> initMutationEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.MutationEvent.initMutationEvent");
    MutationEvent* imp = V8MutationEvent::toNative(args.Holder());
    V8Parameter<> type = args[0];
    bool canBubble = args[1]->BooleanValue();
    bool cancelable = args[2]->BooleanValue();
    Node* relatedNode = V8Node::HasInstance(args[3]) ? V8Node::toNative(v8::Handle<v8::Object>::Cast(args[3])) : 0;
    V8Parameter<> prevValue = args[4];
    V8Parameter<> newValue = args[5];
    V8Parameter<> attrName = args[6];
    int attrChange = toInt32(args[7]);
    imp->initMutationEvent(type, canBubble, cancelable, relatedNode, prevValue, newValue, attrName, attrChange);
    return v8::Handle<v8::Value>();
  }

} // namespace MutationEventInternal

static const BatchedAttribute MutationEvent_attrs[] = {
    {
        // Attribute 'relatedNode' (Type: 'readonly attribute' ExtAttr: '')
        "relatedNode",
        MutationEventInternal::relatedNodeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'prevValue' (Type: 'readonly attribute' ExtAttr: '')
        "prevValue",
        MutationEventInternal::prevValueAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'newValue' (Type: 'readonly attribute' ExtAttr: '')
        "newValue",
        MutationEventInternal::newValueAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'attrName' (Type: 'readonly attribute' ExtAttr: '')
        "attrName",
        MutationEventInternal::attrNameAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'attrChange' (Type: 'readonly attribute' ExtAttr: '')
        "attrChange",
        MutationEventInternal::attrChangeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedConstant MutationEvent_consts[] = {
  { "MODIFICATION", static_cast<signed int>(1) },
  { "ADDITION", static_cast<signed int>(2) },
  { "REMOVAL", static_cast<signed int>(3) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8MutationEventTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "MutationEvent",
      V8Event::GetTemplate(), V8MutationEvent::internalFieldCount,
      MutationEvent_attrs, sizeof(MutationEvent_attrs)/sizeof(*MutationEvent_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'initMutationEvent'
  const int initMutationEvent_argc = 8;
  v8::Handle<v8::FunctionTemplate> initMutationEvent_argv[initMutationEvent_argc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8Node::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> initMutationEvent_signature = v8::Signature::New(desc, initMutationEvent_argc, initMutationEvent_argv);
  proto->Set(v8::String::New("initMutationEvent"), v8::FunctionTemplate::New(MutationEventInternal::initMutationEventCallback, v8::Handle<v8::Value>(), initMutationEvent_signature));
  batchConfigureConstants(desc, proto, MutationEvent_consts, sizeof(MutationEvent_consts)/sizeof(*MutationEvent_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8MutationEvent::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8MutationEvent_raw_cache_ = createRawTemplate();
  return V8MutationEvent_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8MutationEvent::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8MutationEvent_cache_ = ConfigureV8MutationEventTemplate(GetRawTemplate());
  return V8MutationEvent_cache_;
}

MutationEvent* V8MutationEvent::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<MutationEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8MutationEvent::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8MutationEvent::wrap(MutationEvent* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::MUTATIONEVENT, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<MutationEvent > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(MutationEvent* impl) {
  if (!impl)
    return v8::Null();
  return V8MutationEvent::wrap(impl);
}
} // namespace WebCore

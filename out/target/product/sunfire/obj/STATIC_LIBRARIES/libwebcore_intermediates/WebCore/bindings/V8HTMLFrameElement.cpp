/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "HTMLNames.h"
#include "V8DOMWindow.h"
#include "V8Document.h"
#include "V8HTMLElement.h"
#include "V8HTMLFrameElement.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace HTMLFrameElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> frameBorderAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.frameBorder._get");
    return getElementStringAttr(info, HTMLNames::frameborderAttr);
  }

  static void frameBorderAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.frameBorder._set");
    setElementStringAttr(info, HTMLNames::frameborderAttr, value);
  }

  static v8::Handle<v8::Value> longDescAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.longDesc._get");
    return getElementStringAttr(info, HTMLNames::longdescAttr);
  }

  static void longDescAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.longDesc._set");
    setElementStringAttr(info, HTMLNames::longdescAttr, value);
  }

  static v8::Handle<v8::Value> marginHeightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.marginHeight._get");
    return getElementStringAttr(info, HTMLNames::marginheightAttr);
  }

  static void marginHeightAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.marginHeight._set");
    setElementStringAttr(info, HTMLNames::marginheightAttr, value);
  }

  static v8::Handle<v8::Value> marginWidthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.marginWidth._get");
    return getElementStringAttr(info, HTMLNames::marginwidthAttr);
  }

  static void marginWidthAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.marginWidth._set");
    setElementStringAttr(info, HTMLNames::marginwidthAttr, value);
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
  }

  static v8::Handle<v8::Value> noResizeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.noResize._get");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    return v8Boolean(imp->noResize());
  }

  static void noResizeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.noResize._set");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setNoResize(v);
    return;
  }

  static v8::Handle<v8::Value> scrollingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.scrolling._get");
    return getElementStringAttr(info, HTMLNames::scrollingAttr);
  }

  static void scrollingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.scrolling._set");
    setElementStringAttr(info, HTMLNames::scrollingAttr, value);
  }

  static v8::Handle<v8::Value> srcAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.src._get");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(HTMLNames::srcAttr));
  }

  static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.contentDocument._get");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    if (!V8BindingSecurity::checkNodeSecurity(V8BindingState::Only(), imp->contentDocument())) return v8::Handle<v8::Value>();

    return toV8(imp->contentDocument());
  }

  static v8::Handle<v8::Value> contentWindowAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.contentWindow._get");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    return toV8(imp->contentWindow());
  }

  static v8::Handle<v8::Value> locationAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.location._get");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    return v8String(imp->location());
  }

  static v8::Handle<v8::Value> widthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.width._get");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    return v8::Integer::New(imp->width());
  }

  static v8::Handle<v8::Value> heightAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFrameElement.height._get");
    HTMLFrameElement* imp = V8HTMLFrameElement::toNative(info.Holder());
    return v8::Integer::New(imp->height());
  }

} // namespace HTMLFrameElementInternal

static const BatchedAttribute HTMLFrameElement_attrs[] = {
    {
        // Attribute 'frameBorder' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "frameBorder",
        HTMLFrameElementInternal::frameBorderAttrGetter,
        HTMLFrameElementInternal::frameBorderAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'longDesc' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "longDesc",
        HTMLFrameElementInternal::longDescAttrGetter,
        HTMLFrameElementInternal::longDescAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'marginHeight' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "marginHeight",
        HTMLFrameElementInternal::marginHeightAttrGetter,
        HTMLFrameElementInternal::marginHeightAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'marginWidth' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "marginWidth",
        HTMLFrameElementInternal::marginWidthAttrGetter,
        HTMLFrameElementInternal::marginWidthAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "name",
        HTMLFrameElementInternal::nameAttrGetter,
        HTMLFrameElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'noResize' (Type: 'attribute' ExtAttr: '')
        "noResize",
        HTMLFrameElementInternal::noResizeAttrGetter,
        HTMLFrameElementInternal::noResizeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'scrolling' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "scrolling",
        HTMLFrameElementInternal::scrollingAttrGetter,
        HTMLFrameElementInternal::scrollingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'src' (Type: 'attribute' ExtAttr: 'ReflectURL CustomSetter ConvertNullToNullString')
        "src",
        HTMLFrameElementInternal::srcAttrGetter,
        V8HTMLFrameElement::srcAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'contentDocument' (Type: 'readonly attribute' ExtAttr: 'CheckFrameSecurity')
        "contentDocument",
        HTMLFrameElementInternal::contentDocumentAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'contentWindow' (Type: 'readonly attribute' ExtAttr: '')
        "contentWindow",
        HTMLFrameElementInternal::contentWindowAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'location' (Type: 'attribute' ExtAttr: 'CustomSetter ConvertNullToNullString')
        "location",
        HTMLFrameElementInternal::locationAttrGetter,
        V8HTMLFrameElement::locationAccessorSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'width' (Type: 'readonly attribute' ExtAttr: '')
        "width",
        HTMLFrameElementInternal::widthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'height' (Type: 'readonly attribute' ExtAttr: '')
        "height",
        HTMLFrameElementInternal::heightAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLFrameElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLFrameElement",
      V8HTMLElement::GetTemplate(), V8HTMLFrameElement::internalFieldCount,
      HTMLFrameElement_attrs, sizeof(HTMLFrameElement_attrs)/sizeof(*HTMLFrameElement_attrs),
      NULL, 0);
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLFrameElement_raw_cache_ = createRawTemplate();
  return V8HTMLFrameElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFrameElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLFrameElement_cache_ = ConfigureV8HTMLFrameElementTemplate(GetRawTemplate());
  return V8HTMLFrameElement_cache_;
}

HTMLFrameElement* V8HTMLFrameElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLFrameElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLFrameElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLFrameElement::wrap(HTMLFrameElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLFRAMEELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLFrameElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLFrameElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLFrameElement::wrap(impl);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "EventListener.h"
#include "ExceptionCode.h"
#include "V8AbstractEventListener.h"
#include "V8Document.h"
#include "V8Event.h"
#include "V8XMLHttpRequest.h"
#include "V8XMLHttpRequestUpload.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace XMLHttpRequestInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> onabortAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onabort._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onabort() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onabort())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onabortAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onabort._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onabort(), value, V8XMLHttpRequest::cacheIndex);
    imp->setOnabort(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onerrorAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onerror._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onerror() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onerror())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onerrorAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onerror._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onerror(), value, V8XMLHttpRequest::cacheIndex);
    imp->setOnerror(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onload._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onload() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onload())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onload._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onload(), value, V8XMLHttpRequest::cacheIndex);
    imp->setOnload(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onloadstartAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onloadstart._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onloadstart() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onloadstart())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onloadstartAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onloadstart._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onloadstart(), value, V8XMLHttpRequest::cacheIndex);
    imp->setOnloadstart(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onprogressAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onprogress._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onprogress() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onprogress())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onprogressAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onprogress._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onprogress(), value, V8XMLHttpRequest::cacheIndex);
    imp->setOnprogress(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> onreadystatechangeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onreadystatechange._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return imp->onreadystatechange() ? v8::Handle<v8::Value>(static_cast<V8AbstractEventListener*>(imp->onreadystatechange())->getListenerObject(imp->scriptExecutionContext())) : v8::Handle<v8::Value>(v8::Null());
  }

  static void onreadystatechangeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.onreadystatechange._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    transferHiddenDependency(info.Holder(), imp->onreadystatechange(), value, V8XMLHttpRequest::cacheIndex);
    imp->setOnreadystatechange(V8DOMWrapper::getEventListener(imp, value, true, ListenerFindOrCreate));
    return;
  }

  static v8::Handle<v8::Value> readyStateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.readyState._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return v8::Integer::New(imp->readyState());
  }

  static v8::Handle<v8::Value> withCredentialsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.withCredentials._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return v8Boolean(imp->withCredentials());
  }

  static void withCredentialsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.withCredentials._set");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    bool v = value->BooleanValue();
    ExceptionCode ec = 0;
    imp->setWithCredentials(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> uploadAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.upload._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return toV8(imp->upload());
  }

  static v8::Handle<v8::Value> responseXMLAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.responseXML._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    return toV8(imp->responseXML());
  }

  static v8::Handle<v8::Value> statusAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.status._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    ExceptionCode ec = 0;
    int v = imp->status(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    return v8::Integer::New(v);
  }

  static v8::Handle<v8::Value> statusTextAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.XMLHttpRequest.statusText._get");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(info.Holder());
    ExceptionCode ec = 0;
    String v = imp->statusText(ec);
    if (UNLIKELY(ec)) {
        V8Proxy::setDOMException(ec);
        return v8::Handle<v8::Value>();
    }
    return v8String(v);
  }

  static v8::Handle<v8::Value> abortCallback(const v8::Arguments& args) {
    INC_STATS("DOM.XMLHttpRequest.abort");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    imp->abort();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getAllResponseHeadersCallback(const v8::Arguments& args) {
    INC_STATS("DOM.XMLHttpRequest.getAllResponseHeaders");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    String result = imp->getAllResponseHeaders(ec);
    if (UNLIKELY(ec)) goto fail;
    return v8StringOrUndefined(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> dispatchEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.XMLHttpRequest.dispatchEvent");
    XMLHttpRequest* imp = V8XMLHttpRequest::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    Event* evt = V8Event::HasInstance(args[0]) ? V8Event::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    bool result = imp->dispatchEvent(evt, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8Boolean(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace XMLHttpRequestInternal

static const BatchedAttribute XMLHttpRequest_attrs[] = {
    {
        // Attribute 'onabort' (Type: 'attribute' ExtAttr: '')
        "onabort",
        XMLHttpRequestInternal::onabortAttrGetter,
        XMLHttpRequestInternal::onabortAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onerror' (Type: 'attribute' ExtAttr: '')
        "onerror",
        XMLHttpRequestInternal::onerrorAttrGetter,
        XMLHttpRequestInternal::onerrorAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onload' (Type: 'attribute' ExtAttr: '')
        "onload",
        XMLHttpRequestInternal::onloadAttrGetter,
        XMLHttpRequestInternal::onloadAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onloadstart' (Type: 'attribute' ExtAttr: '')
        "onloadstart",
        XMLHttpRequestInternal::onloadstartAttrGetter,
        XMLHttpRequestInternal::onloadstartAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onprogress' (Type: 'attribute' ExtAttr: '')
        "onprogress",
        XMLHttpRequestInternal::onprogressAttrGetter,
        XMLHttpRequestInternal::onprogressAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'onreadystatechange' (Type: 'attribute' ExtAttr: '')
        "onreadystatechange",
        XMLHttpRequestInternal::onreadystatechangeAttrGetter,
        XMLHttpRequestInternal::onreadystatechangeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'readyState' (Type: 'readonly attribute' ExtAttr: '')
        "readyState",
        XMLHttpRequestInternal::readyStateAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'withCredentials' (Type: 'attribute' ExtAttr: '')
        "withCredentials",
        XMLHttpRequestInternal::withCredentialsAttrGetter,
        XMLHttpRequestInternal::withCredentialsAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'upload' (Type: 'readonly attribute' ExtAttr: '')
        "upload",
        XMLHttpRequestInternal::uploadAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'responseText' (Type: 'readonly attribute' ExtAttr: 'CustomGetter')
        "responseText",
        V8XMLHttpRequest::responseTextAccessorGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'responseXML' (Type: 'readonly attribute' ExtAttr: '')
        "responseXML",
        XMLHttpRequestInternal::responseXMLAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'status' (Type: 'readonly attribute' ExtAttr: '')
        "status",
        XMLHttpRequestInternal::statusAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'statusText' (Type: 'readonly attribute' ExtAttr: '')
        "statusText",
        XMLHttpRequestInternal::statusTextAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback XMLHttpRequest_callbacks[] = {
  {"open", V8XMLHttpRequest::openCallback},
  {"setRequestHeader", V8XMLHttpRequest::setRequestHeaderCallback},
  {"send", V8XMLHttpRequest::sendCallback},
  {"abort", XMLHttpRequestInternal::abortCallback},
  {"getAllResponseHeaders", XMLHttpRequestInternal::getAllResponseHeadersCallback},
  {"getResponseHeader", V8XMLHttpRequest::getResponseHeaderCallback},
  {"overrideMimeType", V8XMLHttpRequest::overrideMimeTypeCallback},
  {"addEventListener", V8XMLHttpRequest::addEventListenerCallback},
  {"removeEventListener", V8XMLHttpRequest::removeEventListenerCallback},
};
static const BatchedConstant XMLHttpRequest_consts[] = {
  { "UNSENT", static_cast<signed int>(0) },
  { "OPENED", static_cast<signed int>(1) },
  { "HEADERS_RECEIVED", static_cast<signed int>(2) },
  { "LOADING", static_cast<signed int>(3) },
  { "DONE", static_cast<signed int>(4) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8XMLHttpRequestTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "XMLHttpRequest",
      v8::Persistent<v8::FunctionTemplate>(), V8XMLHttpRequest::internalFieldCount,
      XMLHttpRequest_attrs, sizeof(XMLHttpRequest_attrs)/sizeof(*XMLHttpRequest_attrs),
      XMLHttpRequest_callbacks, sizeof(XMLHttpRequest_callbacks)/sizeof(*XMLHttpRequest_callbacks));
      desc->SetCallHandler(V8XMLHttpRequest::constructorCallback);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'dispatchEvent'
  const int dispatchEvent_argc = 1;
  v8::Handle<v8::FunctionTemplate> dispatchEvent_argv[dispatchEvent_argc] = { V8Event::GetRawTemplate() };
  v8::Handle<v8::Signature> dispatchEvent_signature = v8::Signature::New(desc, dispatchEvent_argc, dispatchEvent_argv);
  proto->Set(v8::String::New("dispatchEvent"), v8::FunctionTemplate::New(XMLHttpRequestInternal::dispatchEventCallback, v8::Handle<v8::Value>(), dispatchEvent_signature));
  batchConfigureConstants(desc, proto, XMLHttpRequest_consts, sizeof(XMLHttpRequest_consts)/sizeof(*XMLHttpRequest_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequest::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequest_raw_cache_ = createRawTemplate();
  return V8XMLHttpRequest_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequest::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8XMLHttpRequest_cache_ = ConfigureV8XMLHttpRequestTemplate(GetRawTemplate());
  return V8XMLHttpRequest_cache_;
}

XMLHttpRequest* V8XMLHttpRequest::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<XMLHttpRequest*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8XMLHttpRequest::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8XMLHttpRequest::wrap(XMLHttpRequest* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getActiveDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::XMLHTTPREQUEST, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getActiveDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<XMLHttpRequest > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(XMLHttpRequest* impl) {
  if (!impl)
    return v8::Null();
  return V8XMLHttpRequest::wrap(impl);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "V8CSSPrimitiveValue.h"
#include "V8CSSValue.h"
#include "V8Counter.h"
#include "V8RGBColor.h"
#include "V8Rect.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace CSSPrimitiveValueInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> primitiveTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CSSPrimitiveValue.primitiveType._get");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(info.Holder());
    return v8::Integer::New(imp->primitiveType());
  }

  static v8::Handle<v8::Value> setFloatValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSPrimitiveValue.setFloatValue");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int unitType = toInt32(args[0]);
    float floatValue = static_cast<float>(args[1]->NumberValue());
    imp->setFloatValue(unitType, floatValue, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getFloatValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSPrimitiveValue.getFloatValue");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int unitType = toInt32(args[0]);
    float result = imp->getFloatValue(unitType, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Number::New(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> setStringValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSPrimitiveValue.setStringValue");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int stringType = toInt32(args[0]);
    V8Parameter<> stringValue = args[1];
    imp->setStringValue(stringType, stringValue, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getStringValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSPrimitiveValue.getStringValue");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    String result = imp->getStringValue(ec);
    if (UNLIKELY(ec)) goto fail;
    return v8String(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getCounterValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSPrimitiveValue.getCounterValue");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<Counter> result = imp->getCounterValue(ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getRectValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSPrimitiveValue.getRectValue");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<Rect> result = imp->getRectValue(ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getRGBColorValueCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CSSPrimitiveValue.getRGBColorValue");
    CSSPrimitiveValue* imp = V8CSSPrimitiveValue::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    RefPtr<RGBColor> result = imp->getRGBColorValue(ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace CSSPrimitiveValueInternal

static const BatchedAttribute CSSPrimitiveValue_attrs[] = {
    {
        // Attribute 'primitiveType' (Type: 'readonly attribute' ExtAttr: '')
        "primitiveType",
        CSSPrimitiveValueInternal::primitiveTypeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback CSSPrimitiveValue_callbacks[] = {
  {"setFloatValue", CSSPrimitiveValueInternal::setFloatValueCallback},
  {"getFloatValue", CSSPrimitiveValueInternal::getFloatValueCallback},
  {"setStringValue", CSSPrimitiveValueInternal::setStringValueCallback},
  {"getStringValue", CSSPrimitiveValueInternal::getStringValueCallback},
  {"getCounterValue", CSSPrimitiveValueInternal::getCounterValueCallback},
  {"getRectValue", CSSPrimitiveValueInternal::getRectValueCallback},
  {"getRGBColorValue", CSSPrimitiveValueInternal::getRGBColorValueCallback},
};
static const BatchedConstant CSSPrimitiveValue_consts[] = {
  { "CSS_UNKNOWN", static_cast<signed int>(0) },
  { "CSS_NUMBER", static_cast<signed int>(1) },
  { "CSS_PERCENTAGE", static_cast<signed int>(2) },
  { "CSS_EMS", static_cast<signed int>(3) },
  { "CSS_EXS", static_cast<signed int>(4) },
  { "CSS_PX", static_cast<signed int>(5) },
  { "CSS_CM", static_cast<signed int>(6) },
  { "CSS_MM", static_cast<signed int>(7) },
  { "CSS_IN", static_cast<signed int>(8) },
  { "CSS_PT", static_cast<signed int>(9) },
  { "CSS_PC", static_cast<signed int>(10) },
  { "CSS_DEG", static_cast<signed int>(11) },
  { "CSS_RAD", static_cast<signed int>(12) },
  { "CSS_GRAD", static_cast<signed int>(13) },
  { "CSS_MS", static_cast<signed int>(14) },
  { "CSS_S", static_cast<signed int>(15) },
  { "CSS_HZ", static_cast<signed int>(16) },
  { "CSS_KHZ", static_cast<signed int>(17) },
  { "CSS_DIMENSION", static_cast<signed int>(18) },
  { "CSS_STRING", static_cast<signed int>(19) },
  { "CSS_URI", static_cast<signed int>(20) },
  { "CSS_IDENT", static_cast<signed int>(21) },
  { "CSS_ATTR", static_cast<signed int>(22) },
  { "CSS_COUNTER", static_cast<signed int>(23) },
  { "CSS_RECT", static_cast<signed int>(24) },
  { "CSS_RGBCOLOR", static_cast<signed int>(25) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8CSSPrimitiveValueTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "CSSPrimitiveValue",
      V8CSSValue::GetTemplate(), V8CSSPrimitiveValue::internalFieldCount,
      CSSPrimitiveValue_attrs, sizeof(CSSPrimitiveValue_attrs)/sizeof(*CSSPrimitiveValue_attrs),
      CSSPrimitiveValue_callbacks, sizeof(CSSPrimitiveValue_callbacks)/sizeof(*CSSPrimitiveValue_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  batchConfigureConstants(desc, proto, CSSPrimitiveValue_consts, sizeof(CSSPrimitiveValue_consts)/sizeof(*CSSPrimitiveValue_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CSSPrimitiveValue::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CSSPrimitiveValue_raw_cache_ = createRawTemplate();
  return V8CSSPrimitiveValue_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8CSSPrimitiveValue::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CSSPrimitiveValue_cache_ = ConfigureV8CSSPrimitiveValueTemplate(GetRawTemplate());
  return V8CSSPrimitiveValue_cache_;
}

CSSPrimitiveValue* V8CSSPrimitiveValue::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<CSSPrimitiveValue*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8CSSPrimitiveValue::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CSSPrimitiveValue::wrap(CSSPrimitiveValue* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::CSSPRIMITIVEVALUE, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<CSSPrimitiveValue > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(CSSPrimitiveValue* impl) {
  if (!impl)
    return v8::Null();
  return V8CSSPrimitiveValue::wrap(impl);
}
} // namespace WebCore

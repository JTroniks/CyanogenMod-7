/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8DOMWindow.h"
#include "V8Event.h"
#include "V8UIEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace UIEventInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> viewAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.view._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return toV8(imp->view());
  }

  static v8::Handle<v8::Value> detailAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.detail._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->detail());
  }

  static v8::Handle<v8::Value> keyCodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.keyCode._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->keyCode());
  }

  static v8::Handle<v8::Value> charCodeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.charCode._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->charCode());
  }

  static v8::Handle<v8::Value> layerXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.layerX._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->layerX());
  }

  static v8::Handle<v8::Value> layerYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.layerY._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->layerY());
  }

  static v8::Handle<v8::Value> pageXAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.pageX._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->pageX());
  }

  static v8::Handle<v8::Value> pageYAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.pageY._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->pageY());
  }

  static v8::Handle<v8::Value> whichAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.UIEvent.which._get");
    UIEvent* imp = V8UIEvent::toNative(info.Holder());
    return v8::Integer::New(imp->which());
  }

  static v8::Handle<v8::Value> initUIEventCallback(const v8::Arguments& args) {
    INC_STATS("DOM.UIEvent.initUIEvent");
    UIEvent* imp = V8UIEvent::toNative(args.Holder());
    V8Parameter<> type = args[0];
    bool canBubble = args[1]->BooleanValue();
    bool cancelable = args[2]->BooleanValue();
    DOMWindow* view = V8DOMWindow::HasInstance(args[3]) ? V8DOMWindow::toNative(v8::Handle<v8::Object>::Cast(args[3])) : 0;
    int detail = toInt32(args[4]);
    imp->initUIEvent(type, canBubble, cancelable, view, detail);
    return v8::Handle<v8::Value>();
  }

} // namespace UIEventInternal

static const BatchedAttribute UIEvent_attrs[] = {
    {
        // Attribute 'view' (Type: 'readonly attribute' ExtAttr: '')
        "view",
        UIEventInternal::viewAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'detail' (Type: 'readonly attribute' ExtAttr: '')
        "detail",
        UIEventInternal::detailAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'keyCode' (Type: 'readonly attribute' ExtAttr: '')
        "keyCode",
        UIEventInternal::keyCodeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'charCode' (Type: 'readonly attribute' ExtAttr: '')
        "charCode",
        UIEventInternal::charCodeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'layerX' (Type: 'readonly attribute' ExtAttr: '')
        "layerX",
        UIEventInternal::layerXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'layerY' (Type: 'readonly attribute' ExtAttr: '')
        "layerY",
        UIEventInternal::layerYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pageX' (Type: 'readonly attribute' ExtAttr: '')
        "pageX",
        UIEventInternal::pageXAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pageY' (Type: 'readonly attribute' ExtAttr: '')
        "pageY",
        UIEventInternal::pageYAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'which' (Type: 'readonly attribute' ExtAttr: '')
        "which",
        UIEventInternal::whichAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8UIEventTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "UIEvent",
      V8Event::GetTemplate(), V8UIEvent::internalFieldCount,
      UIEvent_attrs, sizeof(UIEvent_attrs)/sizeof(*UIEvent_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'initUIEvent'
  const int initUIEvent_argc = 5;
  v8::Handle<v8::FunctionTemplate> initUIEvent_argv[initUIEvent_argc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8DOMWindow::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> initUIEvent_signature = v8::Signature::New(desc, initUIEvent_argc, initUIEvent_argv);
  proto->Set(v8::String::New("initUIEvent"), v8::FunctionTemplate::New(UIEventInternal::initUIEventCallback, v8::Handle<v8::Value>(), initUIEvent_signature));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8UIEvent::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8UIEvent_raw_cache_ = createRawTemplate();
  return V8UIEvent_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8UIEvent::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8UIEvent_cache_ = ConfigureV8UIEventTemplate(GetRawTemplate());
  return V8UIEvent_cache_;
}

UIEvent* V8UIEvent::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<UIEvent*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8UIEvent::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8UIEvent::wrap(UIEvent* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::UIEVENT, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<UIEvent > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(UIEvent* impl) {
  if (!impl)
    return v8::Null();
  return V8UIEvent::wrap(impl);
}
} // namespace WebCore

/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8Collection.h"
#include "V8HTMLCollection.h"
#include "V8HTMLElement.h"
#include "V8HTMLFormElement.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace HTMLFormElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> elementsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.elements._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return toV8(imp->elements());
  }

  static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.length._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8::Integer::New(imp->length());
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.name._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->name());
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.name._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setName(v);
    return;
  }

  static v8::Handle<v8::Value> noValidateAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.noValidate._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8Boolean(imp->noValidate());
  }

  static void noValidateAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.noValidate._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    bool v = value->BooleanValue();
    imp->setNoValidate(v);
    return;
  }

  static v8::Handle<v8::Value> acceptCharsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.acceptCharset._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->acceptCharset());
  }

  static void acceptCharsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.acceptCharset._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAcceptCharset(v);
    return;
  }

  static v8::Handle<v8::Value> actionAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.action._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->action());
  }

  static void actionAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.action._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setAction(v);
    return;
  }

  static v8::Handle<v8::Value> encodingAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.encoding._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->encoding());
  }

  static void encodingAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.encoding._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setEncoding(v);
    return;
  }

  static v8::Handle<v8::Value> enctypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.enctype._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->enctype());
  }

  static void enctypeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.enctype._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setEnctype(v);
    return;
  }

  static v8::Handle<v8::Value> methodAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.method._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->method());
  }

  static void methodAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.method._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setMethod(v);
    return;
  }

  static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.target._get");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    return v8String(imp->target());
  }

  static void targetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLFormElement.target._set");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setTarget(v);
    return;
  }

  static v8::Handle<v8::Value> resetCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLFormElement.reset");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    imp->reset();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> checkValidityCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLFormElement.checkValidity");
    HTMLFormElement* imp = V8HTMLFormElement::toNative(args.Holder());
    return v8Boolean(imp->checkValidity());
  }

} // namespace HTMLFormElementInternal

static const BatchedAttribute HTMLFormElement_attrs[] = {
    {
        // Attribute 'elements' (Type: 'readonly attribute' ExtAttr: '')
        "elements",
        HTMLFormElementInternal::elementsAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
        "length",
        HTMLFormElementInternal::lengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "name",
        HTMLFormElementInternal::nameAttrGetter,
        HTMLFormElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'noValidate' (Type: 'attribute' ExtAttr: '')
        "noValidate",
        HTMLFormElementInternal::noValidateAttrGetter,
        HTMLFormElementInternal::noValidateAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'acceptCharset' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "acceptCharset",
        HTMLFormElementInternal::acceptCharsetAttrGetter,
        HTMLFormElementInternal::acceptCharsetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'action' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "action",
        HTMLFormElementInternal::actionAttrGetter,
        HTMLFormElementInternal::actionAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'encoding' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "encoding",
        HTMLFormElementInternal::encodingAttrGetter,
        HTMLFormElementInternal::encodingAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'enctype' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "enctype",
        HTMLFormElementInternal::enctypeAttrGetter,
        HTMLFormElementInternal::enctypeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'method' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "method",
        HTMLFormElementInternal::methodAttrGetter,
        HTMLFormElementInternal::methodAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'target' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "target",
        HTMLFormElementInternal::targetAttrGetter,
        HTMLFormElementInternal::targetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback HTMLFormElement_callbacks[] = {
  {"submit", V8HTMLFormElement::submitCallback},
  {"reset", HTMLFormElementInternal::resetCallback},
  {"checkValidity", HTMLFormElementInternal::checkValidityCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLFormElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLFormElement",
      V8HTMLElement::GetTemplate(), V8HTMLFormElement::internalFieldCount,
      HTMLFormElement_attrs, sizeof(HTMLFormElement_attrs)/sizeof(*HTMLFormElement_attrs),
      HTMLFormElement_callbacks, sizeof(HTMLFormElement_callbacks)/sizeof(*HTMLFormElement_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  desc->InstanceTemplate()->SetIndexedPropertyHandler(V8HTMLFormElement::indexedPropertyGetter, 0, 0, 0, nodeCollectionIndexedPropertyEnumerator<HTMLFormElement>, v8::Integer::New(V8ClassIndex::NODE));
  desc->InstanceTemplate()->SetNamedPropertyHandler(V8HTMLFormElement::namedPropertyGetter, 0, 0, 0, 0);

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement_raw_cache_ = createRawTemplate();
  return V8HTMLFormElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLFormElement_cache_ = ConfigureV8HTMLFormElementTemplate(GetRawTemplate());
  return V8HTMLFormElement_cache_;
}

HTMLFormElement* V8HTMLFormElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLFormElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLFormElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLFormElement::wrap(HTMLFormElement* impl, bool forceNewObject) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  if (!forceNewObject) {
  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  }

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLFORMELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLFormElement > impl, bool forceNewObject) {
  return toV8(impl.get(), forceNewObject);
}

v8::Handle<v8::Value> toV8(HTMLFormElement* impl, bool forceNewObject) {
  if (!impl)
    return v8::Null();
  return V8HTMLFormElement::wrap(impl, forceNewObject);
}
} // namespace WebCore

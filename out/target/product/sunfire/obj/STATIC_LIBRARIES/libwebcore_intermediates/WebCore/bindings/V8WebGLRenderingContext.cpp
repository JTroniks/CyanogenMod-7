/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG


#if ENABLE(3D_CANVAS)

#include "ExceptionCode.h"
#include "V8CanvasRenderingContext.h"
#include "V8WebGLActiveInfo.h"
#include "V8WebGLArray.h"
#include "V8WebGLBuffer.h"
#include "V8WebGLContextAttributes.h"
#include "V8WebGLFramebuffer.h"
#include "V8WebGLProgram.h"
#include "V8WebGLRenderbuffer.h"
#include "V8WebGLRenderingContext.h"
#include "V8WebGLShader.h"
#include "V8WebGLTexture.h"
#include "V8WebGLUniformLocation.h"
#include "wtf/GetPtr.h"
#include "wtf/RefCounted.h"
#include "wtf/RefPtr.h"

namespace WebCore {
namespace WebGLRenderingContextInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> sizeInBytesCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.sizeInBytes");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned type = toInt32(args[0]);
    int result = imp->sizeInBytes(type, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Integer::New(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> activeTextureCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.activeTexture");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned texture = toInt32(args[0]);
    imp->activeTexture(texture, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> attachShaderCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.attachShader");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    WebGLShader* shader = V8WebGLShader::HasInstance(args[1]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    imp->attachShader(program, shader, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> bindAttribLocationCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.bindAttribLocation");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    unsigned index = toInt32(args[1]);
    V8Parameter<> name = args[2];
    imp->bindAttribLocation(program, index, name, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> bindBufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.bindBuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned target = toInt32(args[0]);
    WebGLBuffer* buffer = V8WebGLBuffer::HasInstance(args[1]) ? V8WebGLBuffer::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    imp->bindBuffer(target, buffer, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> bindFramebufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.bindFramebuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned target = toInt32(args[0]);
    WebGLFramebuffer* framebuffer = V8WebGLFramebuffer::HasInstance(args[1]) ? V8WebGLFramebuffer::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    imp->bindFramebuffer(target, framebuffer, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> bindRenderbufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.bindRenderbuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned target = toInt32(args[0]);
    WebGLRenderbuffer* renderbuffer = V8WebGLRenderbuffer::HasInstance(args[1]) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    imp->bindRenderbuffer(target, renderbuffer, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> bindTextureCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.bindTexture");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned target = toInt32(args[0]);
    WebGLTexture* texture = V8WebGLTexture::HasInstance(args[1]) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    imp->bindTexture(target, texture, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> blendColorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.blendColor");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    double red = static_cast<double>(args[0]->NumberValue());
    double green = static_cast<double>(args[1]->NumberValue());
    double blue = static_cast<double>(args[2]->NumberValue());
    double alpha = static_cast<double>(args[3]->NumberValue());
    imp->blendColor(red, green, blue, alpha);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> blendEquationCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.blendEquation");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned mode = toInt32(args[0]);
    imp->blendEquation(mode);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> blendEquationSeparateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.blendEquationSeparate");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned modeRGB = toInt32(args[0]);
    unsigned modeAlpha = toInt32(args[1]);
    imp->blendEquationSeparate(modeRGB, modeAlpha);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> blendFuncCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.blendFunc");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned sfactor = toInt32(args[0]);
    unsigned dfactor = toInt32(args[1]);
    imp->blendFunc(sfactor, dfactor);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> blendFuncSeparateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.blendFuncSeparate");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned srcRGB = toInt32(args[0]);
    unsigned dstRGB = toInt32(args[1]);
    unsigned srcAlpha = toInt32(args[2]);
    unsigned dstAlpha = toInt32(args[3]);
    imp->blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> checkFramebufferStatusCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.checkFramebufferStatus");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    return v8::Integer::NewFromUnsigned(imp->checkFramebufferStatus(target));
  }

  static v8::Handle<v8::Value> clearCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.clear");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned mask = toInt32(args[0]);
    imp->clear(mask);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clearColorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.clearColor");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    double red = static_cast<double>(args[0]->NumberValue());
    double green = static_cast<double>(args[1]->NumberValue());
    double blue = static_cast<double>(args[2]->NumberValue());
    double alpha = static_cast<double>(args[3]->NumberValue());
    imp->clearColor(red, green, blue, alpha);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clearDepthCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.clearDepth");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    double depth = static_cast<double>(args[0]->NumberValue());
    imp->clearDepth(depth);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> clearStencilCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.clearStencil");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    int s = toInt32(args[0]);
    imp->clearStencil(s);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> colorMaskCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.colorMask");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    bool red = args[0]->BooleanValue();
    bool green = args[1]->BooleanValue();
    bool blue = args[2]->BooleanValue();
    bool alpha = args[3]->BooleanValue();
    imp->colorMask(red, green, blue, alpha);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> compileShaderCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.compileShader");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLShader* shader = V8WebGLShader::HasInstance(args[0]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->compileShader(shader, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> copyTexImage2DCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.copyTexImage2D");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    int level = toInt32(args[1]);
    unsigned internalformat = toInt32(args[2]);
    int x = toInt32(args[3]);
    int y = toInt32(args[4]);
    unsigned width = toInt32(args[5]);
    unsigned height = toInt32(args[6]);
    int border = toInt32(args[7]);
    imp->copyTexImage2D(target, level, internalformat, x, y, width, height, border);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> copyTexSubImage2DCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.copyTexSubImage2D");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    int level = toInt32(args[1]);
    int xoffset = toInt32(args[2]);
    int yoffset = toInt32(args[3]);
    int x = toInt32(args[4]);
    int y = toInt32(args[5]);
    unsigned width = toInt32(args[6]);
    unsigned height = toInt32(args[7]);
    imp->copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createBufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.createBuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createBuffer());
  }

  static v8::Handle<v8::Value> createFramebufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.createFramebuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createFramebuffer());
  }

  static v8::Handle<v8::Value> createProgramCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.createProgram");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createProgram());
  }

  static v8::Handle<v8::Value> createRenderbufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.createRenderbuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createRenderbuffer());
  }

  static v8::Handle<v8::Value> createShaderCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.createShader");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned type = toInt32(args[0]);
    RefPtr<WebGLShader> result = imp->createShader(type, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> createTextureCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.createTexture");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->createTexture());
  }

  static v8::Handle<v8::Value> cullFaceCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.cullFace");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned mode = toInt32(args[0]);
    imp->cullFace(mode);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteBufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.deleteBuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLBuffer* buffer = V8WebGLBuffer::HasInstance(args[0]) ? V8WebGLBuffer::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->deleteBuffer(buffer);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteFramebufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.deleteFramebuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLFramebuffer* framebuffer = V8WebGLFramebuffer::HasInstance(args[0]) ? V8WebGLFramebuffer::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->deleteFramebuffer(framebuffer);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteProgramCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.deleteProgram");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->deleteProgram(program);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteRenderbufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.deleteRenderbuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLRenderbuffer* renderbuffer = V8WebGLRenderbuffer::HasInstance(args[0]) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->deleteRenderbuffer(renderbuffer);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteShaderCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.deleteShader");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLShader* shader = V8WebGLShader::HasInstance(args[0]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->deleteShader(shader);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteTextureCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.deleteTexture");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLTexture* texture = V8WebGLTexture::HasInstance(args[0]) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->deleteTexture(texture);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> depthFuncCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.depthFunc");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned func = toInt32(args[0]);
    imp->depthFunc(func);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> depthMaskCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.depthMask");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    bool flag = args[0]->BooleanValue();
    imp->depthMask(flag);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> depthRangeCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.depthRange");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    double zNear = static_cast<double>(args[0]->NumberValue());
    double zFar = static_cast<double>(args[1]->NumberValue());
    imp->depthRange(zNear, zFar);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> detachShaderCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.detachShader");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    WebGLShader* shader = V8WebGLShader::HasInstance(args[1]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[1])) : 0;
    imp->detachShader(program, shader, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> disableCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.disable");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned cap = toInt32(args[0]);
    imp->disable(cap);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> disableVertexAttribArrayCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.disableVertexAttribArray");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned index = toInt32(args[0]);
    imp->disableVertexAttribArray(index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> drawArraysCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.drawArrays");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned mode = toInt32(args[0]);
    int first = toInt32(args[1]);
    unsigned count = toInt32(args[2]);
    imp->drawArrays(mode, first, count, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> drawElementsCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.drawElements");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned mode = toInt32(args[0]);
    int count = toInt32(args[1]);
    unsigned type = toInt32(args[2]);
    unsigned offset = toInt32(args[3]);
    imp->drawElements(mode, count, type, offset, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> enableCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.enable");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned cap = toInt32(args[0]);
    imp->enable(cap);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> enableVertexAttribArrayCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.enableVertexAttribArray");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned index = toInt32(args[0]);
    imp->enableVertexAttribArray(index, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> finishCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.finish");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    imp->finish();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> flushCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.flush");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    imp->flush();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> framebufferRenderbufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.framebufferRenderbuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned target = toInt32(args[0]);
    unsigned attachment = toInt32(args[1]);
    unsigned renderbuffertarget = toInt32(args[2]);
    WebGLRenderbuffer* renderbuffer = V8WebGLRenderbuffer::HasInstance(args[3]) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(args[3])) : 0;
    imp->framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> framebufferTexture2DCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.framebufferTexture2D");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned target = toInt32(args[0]);
    unsigned attachment = toInt32(args[1]);
    unsigned textarget = toInt32(args[2]);
    WebGLTexture* texture = V8WebGLTexture::HasInstance(args[3]) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(args[3])) : 0;
    int level = toInt32(args[4]);
    imp->framebufferTexture2D(target, attachment, textarget, texture, level, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> frontFaceCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.frontFace");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned mode = toInt32(args[0]);
    imp->frontFace(mode);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> generateMipmapCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.generateMipmap");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    imp->generateMipmap(target);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getActiveAttribCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getActiveAttrib");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    unsigned index = toInt32(args[1]);
    RefPtr<WebGLActiveInfo> result = imp->getActiveAttrib(program, index, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getActiveUniformCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getActiveUniform");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    unsigned index = toInt32(args[1]);
    RefPtr<WebGLActiveInfo> result = imp->getActiveUniform(program, index, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getAttribLocationCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getAttribLocation");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    V8Parameter<> name = args[1];
    return v8::Integer::New(imp->getAttribLocation(program, name));
  }

  static v8::Handle<v8::Value> getContextAttributesCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getContextAttributes");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return toV8(imp->getContextAttributes());
  }

  static v8::Handle<v8::Value> getErrorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getError");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    return v8::Integer::NewFromUnsigned(imp->getError());
  }

  static v8::Handle<v8::Value> getProgramInfoLogCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getProgramInfoLog");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    String result = imp->getProgramInfoLog(program, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8String(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getShaderInfoLogCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getShaderInfoLog");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLShader* shader = V8WebGLShader::HasInstance(args[0]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    String result = imp->getShaderInfoLog(shader, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8String(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getShaderSourceCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getShaderSource");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLShader* shader = V8WebGLShader::HasInstance(args[0]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    String result = imp->getShaderSource(shader, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8String(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getStringCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getString");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned name = toInt32(args[0]);
    return v8String(imp->getString(name));
  }

  static v8::Handle<v8::Value> getUniformLocationCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getUniformLocation");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    V8Parameter<> name = args[1];
    RefPtr<WebGLUniformLocation> result = imp->getUniformLocation(program, name, ec);
    if (UNLIKELY(ec)) goto fail;
    return toV8(result.release());
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> getVertexAttribOffsetCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.getVertexAttribOffset");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned index = toInt32(args[0]);
    unsigned pname = toInt32(args[1]);
    return v8::Integer::New(imp->getVertexAttribOffset(index, pname));
  }

  static v8::Handle<v8::Value> hintCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.hint");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    unsigned mode = toInt32(args[1]);
    imp->hint(target, mode);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> isBufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.isBuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLBuffer* buffer = V8WebGLBuffer::HasInstance(args[0]) ? V8WebGLBuffer::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    return v8Boolean(imp->isBuffer(buffer));
  }

  static v8::Handle<v8::Value> isEnabledCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.isEnabled");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned cap = toInt32(args[0]);
    return v8Boolean(imp->isEnabled(cap));
  }

  static v8::Handle<v8::Value> isFramebufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.isFramebuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLFramebuffer* framebuffer = V8WebGLFramebuffer::HasInstance(args[0]) ? V8WebGLFramebuffer::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    return v8Boolean(imp->isFramebuffer(framebuffer));
  }

  static v8::Handle<v8::Value> isProgramCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.isProgram");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    return v8Boolean(imp->isProgram(program));
  }

  static v8::Handle<v8::Value> isRenderbufferCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.isRenderbuffer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLRenderbuffer* renderbuffer = V8WebGLRenderbuffer::HasInstance(args[0]) ? V8WebGLRenderbuffer::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    return v8Boolean(imp->isRenderbuffer(renderbuffer));
  }

  static v8::Handle<v8::Value> isShaderCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.isShader");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLShader* shader = V8WebGLShader::HasInstance(args[0]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    return v8Boolean(imp->isShader(shader));
  }

  static v8::Handle<v8::Value> isTextureCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.isTexture");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    WebGLTexture* texture = V8WebGLTexture::HasInstance(args[0]) ? V8WebGLTexture::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    return v8Boolean(imp->isTexture(texture));
  }

  static v8::Handle<v8::Value> lineWidthCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.lineWidth");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    double width = static_cast<double>(args[0]->NumberValue());
    imp->lineWidth(width);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> linkProgramCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.linkProgram");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->linkProgram(program, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> pixelStoreiCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.pixelStorei");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned pname = toInt32(args[0]);
    int param = toInt32(args[1]);
    imp->pixelStorei(pname, param);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> polygonOffsetCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.polygonOffset");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    double factor = static_cast<double>(args[0]->NumberValue());
    double units = static_cast<double>(args[1]->NumberValue());
    imp->polygonOffset(factor, units);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> readPixelsCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.readPixels");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    unsigned width = toInt32(args[2]);
    unsigned height = toInt32(args[3]);
    unsigned format = toInt32(args[4]);
    unsigned type = toInt32(args[5]);
    return toV8(imp->readPixels(x, y, width, height, format, type));
  }

  static v8::Handle<v8::Value> releaseShaderCompilerCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.releaseShaderCompiler");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    imp->releaseShaderCompiler();
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> renderbufferStorageCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.renderbufferStorage");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    unsigned internalformat = toInt32(args[1]);
    unsigned width = toInt32(args[2]);
    unsigned height = toInt32(args[3]);
    imp->renderbufferStorage(target, internalformat, width, height);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> sampleCoverageCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.sampleCoverage");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    double value = static_cast<double>(args[0]->NumberValue());
    bool invert = args[1]->BooleanValue();
    imp->sampleCoverage(value, invert);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> scissorCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.scissor");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    unsigned width = toInt32(args[2]);
    unsigned height = toInt32(args[3]);
    imp->scissor(x, y, width, height);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> shaderSourceCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.shaderSource");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLShader* shader = V8WebGLShader::HasInstance(args[0]) ? V8WebGLShader::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    V8Parameter<> string = args[1];
    imp->shaderSource(shader, string, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stencilFuncCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.stencilFunc");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned func = toInt32(args[0]);
    int ref = toInt32(args[1]);
    unsigned mask = toInt32(args[2]);
    imp->stencilFunc(func, ref, mask);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stencilFuncSeparateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.stencilFuncSeparate");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned face = toInt32(args[0]);
    unsigned func = toInt32(args[1]);
    int ref = toInt32(args[2]);
    unsigned mask = toInt32(args[3]);
    imp->stencilFuncSeparate(face, func, ref, mask);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stencilMaskCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.stencilMask");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned mask = toInt32(args[0]);
    imp->stencilMask(mask);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stencilMaskSeparateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.stencilMaskSeparate");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned face = toInt32(args[0]);
    unsigned mask = toInt32(args[1]);
    imp->stencilMaskSeparate(face, mask);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stencilOpCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.stencilOp");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned fail = toInt32(args[0]);
    unsigned zfail = toInt32(args[1]);
    unsigned zpass = toInt32(args[2]);
    imp->stencilOp(fail, zfail, zpass);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> stencilOpSeparateCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.stencilOpSeparate");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned face = toInt32(args[0]);
    unsigned fail = toInt32(args[1]);
    unsigned zfail = toInt32(args[2]);
    unsigned zpass = toInt32(args[3]);
    imp->stencilOpSeparate(face, fail, zfail, zpass);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> texParameterfCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.texParameterf");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    unsigned pname = toInt32(args[1]);
    float param = static_cast<float>(args[2]->NumberValue());
    imp->texParameterf(target, pname, param);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> texParameteriCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.texParameteri");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned target = toInt32(args[0]);
    unsigned pname = toInt32(args[1]);
    int param = toInt32(args[2]);
    imp->texParameteri(target, pname, param);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform1fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform1f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    float x = static_cast<float>(args[1]->NumberValue());
    imp->uniform1f(location, x, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform1iCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform1i");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int x = toInt32(args[1]);
    imp->uniform1i(location, x, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform2fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform2f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    float x = static_cast<float>(args[1]->NumberValue());
    float y = static_cast<float>(args[2]->NumberValue());
    imp->uniform2f(location, x, y, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform2iCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform2i");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int x = toInt32(args[1]);
    int y = toInt32(args[2]);
    imp->uniform2i(location, x, y, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform3fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform3f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    float x = static_cast<float>(args[1]->NumberValue());
    float y = static_cast<float>(args[2]->NumberValue());
    float z = static_cast<float>(args[3]->NumberValue());
    imp->uniform3f(location, x, y, z, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform3iCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform3i");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int x = toInt32(args[1]);
    int y = toInt32(args[2]);
    int z = toInt32(args[3]);
    imp->uniform3i(location, x, y, z, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform4fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform4f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    float x = static_cast<float>(args[1]->NumberValue());
    float y = static_cast<float>(args[2]->NumberValue());
    float z = static_cast<float>(args[3]->NumberValue());
    float w = static_cast<float>(args[4]->NumberValue());
    imp->uniform4f(location, x, y, z, w, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> uniform4iCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.uniform4i");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLUniformLocation* location = V8WebGLUniformLocation::HasInstance(args[0]) ? V8WebGLUniformLocation::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    int x = toInt32(args[1]);
    int y = toInt32(args[2]);
    int z = toInt32(args[3]);
    int w = toInt32(args[4]);
    imp->uniform4i(location, x, y, z, w, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> useProgramCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.useProgram");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->useProgram(program, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> validateProgramCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.validateProgram");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    imp->validateProgram(program, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> vertexAttrib1fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.vertexAttrib1f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned indx = toInt32(args[0]);
    float x = static_cast<float>(args[1]->NumberValue());
    imp->vertexAttrib1f(indx, x);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> vertexAttrib2fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.vertexAttrib2f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned indx = toInt32(args[0]);
    float x = static_cast<float>(args[1]->NumberValue());
    float y = static_cast<float>(args[2]->NumberValue());
    imp->vertexAttrib2f(indx, x, y);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> vertexAttrib3fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.vertexAttrib3f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned indx = toInt32(args[0]);
    float x = static_cast<float>(args[1]->NumberValue());
    float y = static_cast<float>(args[2]->NumberValue());
    float z = static_cast<float>(args[3]->NumberValue());
    imp->vertexAttrib3f(indx, x, y, z);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> vertexAttrib4fCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.vertexAttrib4f");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    unsigned indx = toInt32(args[0]);
    float x = static_cast<float>(args[1]->NumberValue());
    float y = static_cast<float>(args[2]->NumberValue());
    float z = static_cast<float>(args[3]->NumberValue());
    float w = static_cast<float>(args[4]->NumberValue());
    imp->vertexAttrib4f(indx, x, y, z, w);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> vertexAttribPointerCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.vertexAttribPointer");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    unsigned indx = toInt32(args[0]);
    int size = toInt32(args[1]);
    unsigned type = toInt32(args[2]);
    bool normalized = args[3]->BooleanValue();
    int stride = toInt32(args[4]);
    unsigned offset = toInt32(args[5]);
    imp->vertexAttribPointer(indx, size, type, normalized, stride, offset, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> viewportCallback(const v8::Arguments& args) {
    INC_STATS("DOM.WebGLRenderingContext.viewport");
    WebGLRenderingContext* imp = V8WebGLRenderingContext::toNative(args.Holder());
    int x = toInt32(args[0]);
    int y = toInt32(args[1]);
    unsigned width = toInt32(args[2]);
    unsigned height = toInt32(args[3]);
    imp->viewport(x, y, width, height);
    return v8::Handle<v8::Value>();
  }

} // namespace WebGLRenderingContextInternal

static const BatchedCallback WebGLRenderingContext_callbacks[] = {
  {"sizeInBytes", WebGLRenderingContextInternal::sizeInBytesCallback},
  {"activeTexture", WebGLRenderingContextInternal::activeTextureCallback},
  {"blendColor", WebGLRenderingContextInternal::blendColorCallback},
  {"blendEquation", WebGLRenderingContextInternal::blendEquationCallback},
  {"blendEquationSeparate", WebGLRenderingContextInternal::blendEquationSeparateCallback},
  {"blendFunc", WebGLRenderingContextInternal::blendFuncCallback},
  {"blendFuncSeparate", WebGLRenderingContextInternal::blendFuncSeparateCallback},
  {"bufferData", V8WebGLRenderingContext::bufferDataCallback},
  {"bufferSubData", V8WebGLRenderingContext::bufferSubDataCallback},
  {"checkFramebufferStatus", WebGLRenderingContextInternal::checkFramebufferStatusCallback},
  {"clear", WebGLRenderingContextInternal::clearCallback},
  {"clearColor", WebGLRenderingContextInternal::clearColorCallback},
  {"clearDepth", WebGLRenderingContextInternal::clearDepthCallback},
  {"clearStencil", WebGLRenderingContextInternal::clearStencilCallback},
  {"colorMask", WebGLRenderingContextInternal::colorMaskCallback},
  {"copyTexImage2D", WebGLRenderingContextInternal::copyTexImage2DCallback},
  {"copyTexSubImage2D", WebGLRenderingContextInternal::copyTexSubImage2DCallback},
  {"createBuffer", WebGLRenderingContextInternal::createBufferCallback},
  {"createFramebuffer", WebGLRenderingContextInternal::createFramebufferCallback},
  {"createProgram", WebGLRenderingContextInternal::createProgramCallback},
  {"createRenderbuffer", WebGLRenderingContextInternal::createRenderbufferCallback},
  {"createShader", WebGLRenderingContextInternal::createShaderCallback},
  {"createTexture", WebGLRenderingContextInternal::createTextureCallback},
  {"cullFace", WebGLRenderingContextInternal::cullFaceCallback},
  {"depthFunc", WebGLRenderingContextInternal::depthFuncCallback},
  {"depthMask", WebGLRenderingContextInternal::depthMaskCallback},
  {"depthRange", WebGLRenderingContextInternal::depthRangeCallback},
  {"disable", WebGLRenderingContextInternal::disableCallback},
  {"disableVertexAttribArray", WebGLRenderingContextInternal::disableVertexAttribArrayCallback},
  {"drawArrays", WebGLRenderingContextInternal::drawArraysCallback},
  {"drawElements", WebGLRenderingContextInternal::drawElementsCallback},
  {"enable", WebGLRenderingContextInternal::enableCallback},
  {"enableVertexAttribArray", WebGLRenderingContextInternal::enableVertexAttribArrayCallback},
  {"finish", WebGLRenderingContextInternal::finishCallback},
  {"flush", WebGLRenderingContextInternal::flushCallback},
  {"frontFace", WebGLRenderingContextInternal::frontFaceCallback},
  {"generateMipmap", WebGLRenderingContextInternal::generateMipmapCallback},
  {"getBufferParameter", V8WebGLRenderingContext::getBufferParameterCallback},
  {"getContextAttributes", WebGLRenderingContextInternal::getContextAttributesCallback},
  {"getError", WebGLRenderingContextInternal::getErrorCallback},
  {"getFramebufferAttachmentParameter", V8WebGLRenderingContext::getFramebufferAttachmentParameterCallback},
  {"getParameter", V8WebGLRenderingContext::getParameterCallback},
  {"getProgramParameter", V8WebGLRenderingContext::getProgramParameterCallback},
  {"getRenderbufferParameter", V8WebGLRenderingContext::getRenderbufferParameterCallback},
  {"getShaderParameter", V8WebGLRenderingContext::getShaderParameterCallback},
  {"getString", WebGLRenderingContextInternal::getStringCallback},
  {"getTexParameter", V8WebGLRenderingContext::getTexParameterCallback},
  {"getUniform", V8WebGLRenderingContext::getUniformCallback},
  {"getVertexAttrib", V8WebGLRenderingContext::getVertexAttribCallback},
  {"getVertexAttribOffset", WebGLRenderingContextInternal::getVertexAttribOffsetCallback},
  {"hint", WebGLRenderingContextInternal::hintCallback},
  {"isEnabled", WebGLRenderingContextInternal::isEnabledCallback},
  {"lineWidth", WebGLRenderingContextInternal::lineWidthCallback},
  {"pixelStorei", WebGLRenderingContextInternal::pixelStoreiCallback},
  {"polygonOffset", WebGLRenderingContextInternal::polygonOffsetCallback},
  {"readPixels", WebGLRenderingContextInternal::readPixelsCallback},
  {"releaseShaderCompiler", WebGLRenderingContextInternal::releaseShaderCompilerCallback},
  {"renderbufferStorage", WebGLRenderingContextInternal::renderbufferStorageCallback},
  {"sampleCoverage", WebGLRenderingContextInternal::sampleCoverageCallback},
  {"scissor", WebGLRenderingContextInternal::scissorCallback},
  {"stencilFunc", WebGLRenderingContextInternal::stencilFuncCallback},
  {"stencilFuncSeparate", WebGLRenderingContextInternal::stencilFuncSeparateCallback},
  {"stencilMask", WebGLRenderingContextInternal::stencilMaskCallback},
  {"stencilMaskSeparate", WebGLRenderingContextInternal::stencilMaskSeparateCallback},
  {"stencilOp", WebGLRenderingContextInternal::stencilOpCallback},
  {"stencilOpSeparate", WebGLRenderingContextInternal::stencilOpSeparateCallback},
  {"texParameterf", WebGLRenderingContextInternal::texParameterfCallback},
  {"texParameteri", WebGLRenderingContextInternal::texParameteriCallback},
  {"texImage2D", V8WebGLRenderingContext::texImage2DCallback},
  {"texSubImage2D", V8WebGLRenderingContext::texSubImage2DCallback},
  {"uniform1fv", V8WebGLRenderingContext::uniform1fvCallback},
  {"uniform1iv", V8WebGLRenderingContext::uniform1ivCallback},
  {"uniform2fv", V8WebGLRenderingContext::uniform2fvCallback},
  {"uniform2iv", V8WebGLRenderingContext::uniform2ivCallback},
  {"uniform3fv", V8WebGLRenderingContext::uniform3fvCallback},
  {"uniform3iv", V8WebGLRenderingContext::uniform3ivCallback},
  {"uniform4fv", V8WebGLRenderingContext::uniform4fvCallback},
  {"uniform4iv", V8WebGLRenderingContext::uniform4ivCallback},
  {"uniformMatrix2fv", V8WebGLRenderingContext::uniformMatrix2fvCallback},
  {"uniformMatrix3fv", V8WebGLRenderingContext::uniformMatrix3fvCallback},
  {"uniformMatrix4fv", V8WebGLRenderingContext::uniformMatrix4fvCallback},
  {"vertexAttrib1f", WebGLRenderingContextInternal::vertexAttrib1fCallback},
  {"vertexAttrib1fv", V8WebGLRenderingContext::vertexAttrib1fvCallback},
  {"vertexAttrib2f", WebGLRenderingContextInternal::vertexAttrib2fCallback},
  {"vertexAttrib2fv", V8WebGLRenderingContext::vertexAttrib2fvCallback},
  {"vertexAttrib3f", WebGLRenderingContextInternal::vertexAttrib3fCallback},
  {"vertexAttrib3fv", V8WebGLRenderingContext::vertexAttrib3fvCallback},
  {"vertexAttrib4f", WebGLRenderingContextInternal::vertexAttrib4fCallback},
  {"vertexAttrib4fv", V8WebGLRenderingContext::vertexAttrib4fvCallback},
  {"vertexAttribPointer", WebGLRenderingContextInternal::vertexAttribPointerCallback},
  {"viewport", WebGLRenderingContextInternal::viewportCallback},
};
static const BatchedConstant WebGLRenderingContext_consts[] = {
  { "DEPTH_BUFFER_BIT", static_cast<signed int>(0x00000100) },
  { "STENCIL_BUFFER_BIT", static_cast<signed int>(0x00000400) },
  { "COLOR_BUFFER_BIT", static_cast<signed int>(0x00004000) },
  { "FALSE", static_cast<signed int>(0) },
  { "TRUE", static_cast<signed int>(1) },
  { "POINTS", static_cast<signed int>(0x0000) },
  { "LINES", static_cast<signed int>(0x0001) },
  { "LINE_LOOP", static_cast<signed int>(0x0002) },
  { "LINE_STRIP", static_cast<signed int>(0x0003) },
  { "TRIANGLES", static_cast<signed int>(0x0004) },
  { "TRIANGLE_STRIP", static_cast<signed int>(0x0005) },
  { "TRIANGLE_FAN", static_cast<signed int>(0x0006) },
  { "ZERO", static_cast<signed int>(0) },
  { "ONE", static_cast<signed int>(1) },
  { "SRC_COLOR", static_cast<signed int>(0x0300) },
  { "ONE_MINUS_SRC_COLOR", static_cast<signed int>(0x0301) },
  { "SRC_ALPHA", static_cast<signed int>(0x0302) },
  { "ONE_MINUS_SRC_ALPHA", static_cast<signed int>(0x0303) },
  { "DST_ALPHA", static_cast<signed int>(0x0304) },
  { "ONE_MINUS_DST_ALPHA", static_cast<signed int>(0x0305) },
  { "DST_COLOR", static_cast<signed int>(0x0306) },
  { "ONE_MINUS_DST_COLOR", static_cast<signed int>(0x0307) },
  { "SRC_ALPHA_SATURATE", static_cast<signed int>(0x0308) },
  { "FUNC_ADD", static_cast<signed int>(0x8006) },
  { "BLEND_EQUATION", static_cast<signed int>(0x8009) },
  { "BLEND_EQUATION_RGB", static_cast<signed int>(0x8009) },
  { "BLEND_EQUATION_ALPHA", static_cast<signed int>(0x883D) },
  { "FUNC_SUBTRACT", static_cast<signed int>(0x800A) },
  { "FUNC_REVERSE_SUBTRACT", static_cast<signed int>(0x800B) },
  { "BLEND_DST_RGB", static_cast<signed int>(0x80C8) },
  { "BLEND_SRC_RGB", static_cast<signed int>(0x80C9) },
  { "BLEND_DST_ALPHA", static_cast<signed int>(0x80CA) },
  { "BLEND_SRC_ALPHA", static_cast<signed int>(0x80CB) },
  { "CONSTANT_COLOR", static_cast<signed int>(0x8001) },
  { "ONE_MINUS_CONSTANT_COLOR", static_cast<signed int>(0x8002) },
  { "CONSTANT_ALPHA", static_cast<signed int>(0x8003) },
  { "ONE_MINUS_CONSTANT_ALPHA", static_cast<signed int>(0x8004) },
  { "BLEND_COLOR", static_cast<signed int>(0x8005) },
  { "ARRAY_BUFFER", static_cast<signed int>(0x8892) },
  { "ELEMENT_ARRAY_BUFFER", static_cast<signed int>(0x8893) },
  { "ARRAY_BUFFER_BINDING", static_cast<signed int>(0x8894) },
  { "ELEMENT_ARRAY_BUFFER_BINDING", static_cast<signed int>(0x8895) },
  { "STREAM_DRAW", static_cast<signed int>(0x88E0) },
  { "STATIC_DRAW", static_cast<signed int>(0x88E4) },
  { "DYNAMIC_DRAW", static_cast<signed int>(0x88E8) },
  { "BUFFER_SIZE", static_cast<signed int>(0x8764) },
  { "BUFFER_USAGE", static_cast<signed int>(0x8765) },
  { "CURRENT_VERTEX_ATTRIB", static_cast<signed int>(0x8626) },
  { "FRONT", static_cast<signed int>(0x0404) },
  { "BACK", static_cast<signed int>(0x0405) },
  { "FRONT_AND_BACK", static_cast<signed int>(0x0408) },
  { "TEXTURE_2D", static_cast<signed int>(0x0DE1) },
  { "CULL_FACE", static_cast<signed int>(0x0B44) },
  { "BLEND", static_cast<signed int>(0x0BE2) },
  { "DITHER", static_cast<signed int>(0x0BD0) },
  { "STENCIL_TEST", static_cast<signed int>(0x0B90) },
  { "DEPTH_TEST", static_cast<signed int>(0x0B71) },
  { "SCISSOR_TEST", static_cast<signed int>(0x0C11) },
  { "POLYGON_OFFSET_FILL", static_cast<signed int>(0x8037) },
  { "SAMPLE_ALPHA_TO_COVERAGE", static_cast<signed int>(0x809E) },
  { "SAMPLE_COVERAGE", static_cast<signed int>(0x80A0) },
  { "NO_ERROR", static_cast<signed int>(0) },
  { "INVALID_ENUM", static_cast<signed int>(0x0500) },
  { "INVALID_VALUE", static_cast<signed int>(0x0501) },
  { "INVALID_OPERATION", static_cast<signed int>(0x0502) },
  { "OUT_OF_MEMORY", static_cast<signed int>(0x0505) },
  { "CW", static_cast<signed int>(0x0900) },
  { "CCW", static_cast<signed int>(0x0901) },
  { "LINE_WIDTH", static_cast<signed int>(0x0B21) },
  { "ALIASED_POINT_SIZE_RANGE", static_cast<signed int>(0x846D) },
  { "ALIASED_LINE_WIDTH_RANGE", static_cast<signed int>(0x846E) },
  { "CULL_FACE_MODE", static_cast<signed int>(0x0B45) },
  { "FRONT_FACE", static_cast<signed int>(0x0B46) },
  { "DEPTH_RANGE", static_cast<signed int>(0x0B70) },
  { "DEPTH_WRITEMASK", static_cast<signed int>(0x0B72) },
  { "DEPTH_CLEAR_VALUE", static_cast<signed int>(0x0B73) },
  { "DEPTH_FUNC", static_cast<signed int>(0x0B74) },
  { "STENCIL_CLEAR_VALUE", static_cast<signed int>(0x0B91) },
  { "STENCIL_FUNC", static_cast<signed int>(0x0B92) },
  { "STENCIL_FAIL", static_cast<signed int>(0x0B94) },
  { "STENCIL_PASS_DEPTH_FAIL", static_cast<signed int>(0x0B95) },
  { "STENCIL_PASS_DEPTH_PASS", static_cast<signed int>(0x0B96) },
  { "STENCIL_REF", static_cast<signed int>(0x0B97) },
  { "STENCIL_VALUE_MASK", static_cast<signed int>(0x0B93) },
  { "STENCIL_WRITEMASK", static_cast<signed int>(0x0B98) },
  { "STENCIL_BACK_FUNC", static_cast<signed int>(0x8800) },
  { "STENCIL_BACK_FAIL", static_cast<signed int>(0x8801) },
  { "STENCIL_BACK_PASS_DEPTH_FAIL", static_cast<signed int>(0x8802) },
  { "STENCIL_BACK_PASS_DEPTH_PASS", static_cast<signed int>(0x8803) },
  { "STENCIL_BACK_REF", static_cast<signed int>(0x8CA3) },
  { "STENCIL_BACK_VALUE_MASK", static_cast<signed int>(0x8CA4) },
  { "STENCIL_BACK_WRITEMASK", static_cast<signed int>(0x8CA5) },
  { "VIEWPORT", static_cast<signed int>(0x0BA2) },
  { "SCISSOR_BOX", static_cast<signed int>(0x0C10) },
  { "COLOR_CLEAR_VALUE", static_cast<signed int>(0x0C22) },
  { "COLOR_WRITEMASK", static_cast<signed int>(0x0C23) },
  { "UNPACK_ALIGNMENT", static_cast<signed int>(0x0CF5) },
  { "PACK_ALIGNMENT", static_cast<signed int>(0x0D05) },
  { "MAX_TEXTURE_SIZE", static_cast<signed int>(0x0D33) },
  { "MAX_VIEWPORT_DIMS", static_cast<signed int>(0x0D3A) },
  { "SUBPIXEL_BITS", static_cast<signed int>(0x0D50) },
  { "RED_BITS", static_cast<signed int>(0x0D52) },
  { "GREEN_BITS", static_cast<signed int>(0x0D53) },
  { "BLUE_BITS", static_cast<signed int>(0x0D54) },
  { "ALPHA_BITS", static_cast<signed int>(0x0D55) },
  { "DEPTH_BITS", static_cast<signed int>(0x0D56) },
  { "STENCIL_BITS", static_cast<signed int>(0x0D57) },
  { "POLYGON_OFFSET_UNITS", static_cast<signed int>(0x2A00) },
  { "POLYGON_OFFSET_FACTOR", static_cast<signed int>(0x8038) },
  { "TEXTURE_BINDING_2D", static_cast<signed int>(0x8069) },
  { "SAMPLE_BUFFERS", static_cast<signed int>(0x80A8) },
  { "SAMPLES", static_cast<signed int>(0x80A9) },
  { "SAMPLE_COVERAGE_VALUE", static_cast<signed int>(0x80AA) },
  { "SAMPLE_COVERAGE_INVERT", static_cast<signed int>(0x80AB) },
  { "NUM_COMPRESSED_TEXTURE_FORMATS", static_cast<signed int>(0x86A2) },
  { "COMPRESSED_TEXTURE_FORMATS", static_cast<signed int>(0x86A3) },
  { "DONT_CARE", static_cast<signed int>(0x1100) },
  { "FASTEST", static_cast<signed int>(0x1101) },
  { "NICEST", static_cast<signed int>(0x1102) },
  { "GENERATE_MIPMAP_HINT", static_cast<signed int>(0x8192) },
  { "BYTE", static_cast<signed int>(0x1400) },
  { "UNSIGNED_BYTE", static_cast<signed int>(0x1401) },
  { "SHORT", static_cast<signed int>(0x1402) },
  { "UNSIGNED_SHORT", static_cast<signed int>(0x1403) },
  { "INT", static_cast<signed int>(0x1404) },
  { "UNSIGNED_INT", static_cast<signed int>(0x1405) },
  { "FLOAT", static_cast<signed int>(0x1406) },
  { "FIXED", static_cast<signed int>(0x140C) },
  { "DEPTH_COMPONENT", static_cast<signed int>(0x1902) },
  { "ALPHA", static_cast<signed int>(0x1906) },
  { "RGB", static_cast<signed int>(0x1907) },
  { "RGBA", static_cast<signed int>(0x1908) },
  { "LUMINANCE", static_cast<signed int>(0x1909) },
  { "LUMINANCE_ALPHA", static_cast<signed int>(0x190A) },
  { "UNSIGNED_SHORT_4_4_4_4", static_cast<signed int>(0x8033) },
  { "UNSIGNED_SHORT_5_5_5_1", static_cast<signed int>(0x8034) },
  { "UNSIGNED_SHORT_5_6_5", static_cast<signed int>(0x8363) },
  { "FRAGMENT_SHADER", static_cast<signed int>(0x8B30) },
  { "VERTEX_SHADER", static_cast<signed int>(0x8B31) },
  { "MAX_VERTEX_ATTRIBS", static_cast<signed int>(0x8869) },
  { "MAX_VERTEX_UNIFORM_VECTORS", static_cast<signed int>(0x8DFB) },
  { "MAX_VARYING_VECTORS", static_cast<signed int>(0x8DFC) },
  { "MAX_COMBINED_TEXTURE_IMAGE_UNITS", static_cast<signed int>(0x8B4D) },
  { "MAX_VERTEX_TEXTURE_IMAGE_UNITS", static_cast<signed int>(0x8B4C) },
  { "MAX_TEXTURE_IMAGE_UNITS", static_cast<signed int>(0x8872) },
  { "MAX_FRAGMENT_UNIFORM_VECTORS", static_cast<signed int>(0x8DFD) },
  { "SHADER_TYPE", static_cast<signed int>(0x8B4F) },
  { "DELETE_STATUS", static_cast<signed int>(0x8B80) },
  { "LINK_STATUS", static_cast<signed int>(0x8B82) },
  { "VALIDATE_STATUS", static_cast<signed int>(0x8B83) },
  { "ATTACHED_SHADERS", static_cast<signed int>(0x8B85) },
  { "ACTIVE_UNIFORMS", static_cast<signed int>(0x8B86) },
  { "ACTIVE_UNIFORM_MAX_LENGTH", static_cast<signed int>(0x8B87) },
  { "ACTIVE_ATTRIBUTES", static_cast<signed int>(0x8B89) },
  { "ACTIVE_ATTRIBUTE_MAX_LENGTH", static_cast<signed int>(0x8B8A) },
  { "SHADING_LANGUAGE_VERSION", static_cast<signed int>(0x8B8C) },
  { "CURRENT_PROGRAM", static_cast<signed int>(0x8B8D) },
  { "NEVER", static_cast<signed int>(0x0200) },
  { "LESS", static_cast<signed int>(0x0201) },
  { "EQUAL", static_cast<signed int>(0x0202) },
  { "LEQUAL", static_cast<signed int>(0x0203) },
  { "GREATER", static_cast<signed int>(0x0204) },
  { "NOTEQUAL", static_cast<signed int>(0x0205) },
  { "GEQUAL", static_cast<signed int>(0x0206) },
  { "ALWAYS", static_cast<signed int>(0x0207) },
  { "KEEP", static_cast<signed int>(0x1E00) },
  { "REPLACE", static_cast<signed int>(0x1E01) },
  { "INCR", static_cast<signed int>(0x1E02) },
  { "DECR", static_cast<signed int>(0x1E03) },
  { "INVERT", static_cast<signed int>(0x150A) },
  { "INCR_WRAP", static_cast<signed int>(0x8507) },
  { "DECR_WRAP", static_cast<signed int>(0x8508) },
  { "VENDOR", static_cast<signed int>(0x1F00) },
  { "RENDERER", static_cast<signed int>(0x1F01) },
  { "VERSION", static_cast<signed int>(0x1F02) },
  { "EXTENSIONS", static_cast<signed int>(0x1F03) },
  { "NEAREST", static_cast<signed int>(0x2600) },
  { "LINEAR", static_cast<signed int>(0x2601) },
  { "NEAREST_MIPMAP_NEAREST", static_cast<signed int>(0x2700) },
  { "LINEAR_MIPMAP_NEAREST", static_cast<signed int>(0x2701) },
  { "NEAREST_MIPMAP_LINEAR", static_cast<signed int>(0x2702) },
  { "LINEAR_MIPMAP_LINEAR", static_cast<signed int>(0x2703) },
  { "TEXTURE_MAG_FILTER", static_cast<signed int>(0x2800) },
  { "TEXTURE_MIN_FILTER", static_cast<signed int>(0x2801) },
  { "TEXTURE_WRAP_S", static_cast<signed int>(0x2802) },
  { "TEXTURE_WRAP_T", static_cast<signed int>(0x2803) },
  { "TEXTURE", static_cast<signed int>(0x1702) },
  { "TEXTURE_CUBE_MAP", static_cast<signed int>(0x8513) },
  { "TEXTURE_BINDING_CUBE_MAP", static_cast<signed int>(0x8514) },
  { "TEXTURE_CUBE_MAP_POSITIVE_X", static_cast<signed int>(0x8515) },
  { "TEXTURE_CUBE_MAP_NEGATIVE_X", static_cast<signed int>(0x8516) },
  { "TEXTURE_CUBE_MAP_POSITIVE_Y", static_cast<signed int>(0x8517) },
  { "TEXTURE_CUBE_MAP_NEGATIVE_Y", static_cast<signed int>(0x8518) },
  { "TEXTURE_CUBE_MAP_POSITIVE_Z", static_cast<signed int>(0x8519) },
  { "TEXTURE_CUBE_MAP_NEGATIVE_Z", static_cast<signed int>(0x851A) },
  { "MAX_CUBE_MAP_TEXTURE_SIZE", static_cast<signed int>(0x851C) },
  { "TEXTURE0", static_cast<signed int>(0x84C0) },
  { "TEXTURE1", static_cast<signed int>(0x84C1) },
  { "TEXTURE2", static_cast<signed int>(0x84C2) },
  { "TEXTURE3", static_cast<signed int>(0x84C3) },
  { "TEXTURE4", static_cast<signed int>(0x84C4) },
  { "TEXTURE5", static_cast<signed int>(0x84C5) },
  { "TEXTURE6", static_cast<signed int>(0x84C6) },
  { "TEXTURE7", static_cast<signed int>(0x84C7) },
  { "TEXTURE8", static_cast<signed int>(0x84C8) },
  { "TEXTURE9", static_cast<signed int>(0x84C9) },
  { "TEXTURE10", static_cast<signed int>(0x84CA) },
  { "TEXTURE11", static_cast<signed int>(0x84CB) },
  { "TEXTURE12", static_cast<signed int>(0x84CC) },
  { "TEXTURE13", static_cast<signed int>(0x84CD) },
  { "TEXTURE14", static_cast<signed int>(0x84CE) },
  { "TEXTURE15", static_cast<signed int>(0x84CF) },
  { "TEXTURE16", static_cast<signed int>(0x84D0) },
  { "TEXTURE17", static_cast<signed int>(0x84D1) },
  { "TEXTURE18", static_cast<signed int>(0x84D2) },
  { "TEXTURE19", static_cast<signed int>(0x84D3) },
  { "TEXTURE20", static_cast<signed int>(0x84D4) },
  { "TEXTURE21", static_cast<signed int>(0x84D5) },
  { "TEXTURE22", static_cast<signed int>(0x84D6) },
  { "TEXTURE23", static_cast<signed int>(0x84D7) },
  { "TEXTURE24", static_cast<signed int>(0x84D8) },
  { "TEXTURE25", static_cast<signed int>(0x84D9) },
  { "TEXTURE26", static_cast<signed int>(0x84DA) },
  { "TEXTURE27", static_cast<signed int>(0x84DB) },
  { "TEXTURE28", static_cast<signed int>(0x84DC) },
  { "TEXTURE29", static_cast<signed int>(0x84DD) },
  { "TEXTURE30", static_cast<signed int>(0x84DE) },
  { "TEXTURE31", static_cast<signed int>(0x84DF) },
  { "ACTIVE_TEXTURE", static_cast<signed int>(0x84E0) },
  { "REPEAT", static_cast<signed int>(0x2901) },
  { "CLAMP_TO_EDGE", static_cast<signed int>(0x812F) },
  { "MIRRORED_REPEAT", static_cast<signed int>(0x8370) },
  { "FLOAT_VEC2", static_cast<signed int>(0x8B50) },
  { "FLOAT_VEC3", static_cast<signed int>(0x8B51) },
  { "FLOAT_VEC4", static_cast<signed int>(0x8B52) },
  { "INT_VEC2", static_cast<signed int>(0x8B53) },
  { "INT_VEC3", static_cast<signed int>(0x8B54) },
  { "INT_VEC4", static_cast<signed int>(0x8B55) },
  { "BOOL", static_cast<signed int>(0x8B56) },
  { "BOOL_VEC2", static_cast<signed int>(0x8B57) },
  { "BOOL_VEC3", static_cast<signed int>(0x8B58) },
  { "BOOL_VEC4", static_cast<signed int>(0x8B59) },
  { "FLOAT_MAT2", static_cast<signed int>(0x8B5A) },
  { "FLOAT_MAT3", static_cast<signed int>(0x8B5B) },
  { "FLOAT_MAT4", static_cast<signed int>(0x8B5C) },
  { "SAMPLER_2D", static_cast<signed int>(0x8B5E) },
  { "SAMPLER_CUBE", static_cast<signed int>(0x8B60) },
  { "VERTEX_ATTRIB_ARRAY_ENABLED", static_cast<signed int>(0x8622) },
  { "VERTEX_ATTRIB_ARRAY_SIZE", static_cast<signed int>(0x8623) },
  { "VERTEX_ATTRIB_ARRAY_STRIDE", static_cast<signed int>(0x8624) },
  { "VERTEX_ATTRIB_ARRAY_TYPE", static_cast<signed int>(0x8625) },
  { "VERTEX_ATTRIB_ARRAY_NORMALIZED", static_cast<signed int>(0x886A) },
  { "VERTEX_ATTRIB_ARRAY_POINTER", static_cast<signed int>(0x8645) },
  { "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", static_cast<signed int>(0x889F) },
  { "IMPLEMENTATION_COLOR_READ_TYPE", static_cast<signed int>(0x8B9A) },
  { "IMPLEMENTATION_COLOR_READ_FORMAT", static_cast<signed int>(0x8B9B) },
  { "COMPILE_STATUS", static_cast<signed int>(0x8B81) },
  { "INFO_LOG_LENGTH", static_cast<signed int>(0x8B84) },
  { "SHADER_SOURCE_LENGTH", static_cast<signed int>(0x8B88) },
  { "SHADER_COMPILER", static_cast<signed int>(0x8DFA) },
  { "SHADER_BINARY_FORMATS", static_cast<signed int>(0x8DF8) },
  { "NUM_SHADER_BINARY_FORMATS", static_cast<signed int>(0x8DF9) },
  { "LOW_FLOAT", static_cast<signed int>(0x8DF0) },
  { "MEDIUM_FLOAT", static_cast<signed int>(0x8DF1) },
  { "HIGH_FLOAT", static_cast<signed int>(0x8DF2) },
  { "LOW_INT", static_cast<signed int>(0x8DF3) },
  { "MEDIUM_INT", static_cast<signed int>(0x8DF4) },
  { "HIGH_INT", static_cast<signed int>(0x8DF5) },
  { "FRAMEBUFFER", static_cast<signed int>(0x8D40) },
  { "RENDERBUFFER", static_cast<signed int>(0x8D41) },
  { "RGBA4", static_cast<signed int>(0x8056) },
  { "RGB5_A1", static_cast<signed int>(0x8057) },
  { "RGB565", static_cast<signed int>(0x8D62) },
  { "DEPTH_COMPONENT16", static_cast<signed int>(0x81A5) },
  { "STENCIL_INDEX", static_cast<signed int>(0x1901) },
  { "STENCIL_INDEX8", static_cast<signed int>(0x8D48) },
  { "RENDERBUFFER_WIDTH", static_cast<signed int>(0x8D42) },
  { "RENDERBUFFER_HEIGHT", static_cast<signed int>(0x8D43) },
  { "RENDERBUFFER_INTERNAL_FORMAT", static_cast<signed int>(0x8D44) },
  { "RENDERBUFFER_RED_SIZE", static_cast<signed int>(0x8D50) },
  { "RENDERBUFFER_GREEN_SIZE", static_cast<signed int>(0x8D51) },
  { "RENDERBUFFER_BLUE_SIZE", static_cast<signed int>(0x8D52) },
  { "RENDERBUFFER_ALPHA_SIZE", static_cast<signed int>(0x8D53) },
  { "RENDERBUFFER_DEPTH_SIZE", static_cast<signed int>(0x8D54) },
  { "RENDERBUFFER_STENCIL_SIZE", static_cast<signed int>(0x8D55) },
  { "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", static_cast<signed int>(0x8CD0) },
  { "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", static_cast<signed int>(0x8CD1) },
  { "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", static_cast<signed int>(0x8CD2) },
  { "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", static_cast<signed int>(0x8CD3) },
  { "COLOR_ATTACHMENT0", static_cast<signed int>(0x8CE0) },
  { "DEPTH_ATTACHMENT", static_cast<signed int>(0x8D00) },
  { "STENCIL_ATTACHMENT", static_cast<signed int>(0x8D20) },
  { "NONE", static_cast<signed int>(0) },
  { "FRAMEBUFFER_COMPLETE", static_cast<signed int>(0x8CD5) },
  { "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", static_cast<signed int>(0x8CD6) },
  { "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", static_cast<signed int>(0x8CD7) },
  { "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", static_cast<signed int>(0x8CD9) },
  { "FRAMEBUFFER_UNSUPPORTED", static_cast<signed int>(0x8CDD) },
  { "FRAMEBUFFER_BINDING", static_cast<signed int>(0x8CA6) },
  { "RENDERBUFFER_BINDING", static_cast<signed int>(0x8CA7) },
  { "MAX_RENDERBUFFER_SIZE", static_cast<signed int>(0x84E8) },
  { "INVALID_FRAMEBUFFER_OPERATION", static_cast<signed int>(0x0506) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebGLRenderingContextTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WebGLRenderingContext",
      V8CanvasRenderingContext::GetTemplate(), V8WebGLRenderingContext::internalFieldCount,
      NULL, 0,
      WebGLRenderingContext_callbacks, sizeof(WebGLRenderingContext_callbacks)/sizeof(*WebGLRenderingContext_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom Signature 'attachShader'
  const int attachShader_argc = 2;
  v8::Handle<v8::FunctionTemplate> attachShader_argv[attachShader_argc] = { V8WebGLProgram::GetRawTemplate(), V8WebGLShader::GetRawTemplate() };
  v8::Handle<v8::Signature> attachShader_signature = v8::Signature::New(desc, attachShader_argc, attachShader_argv);
  proto->Set(v8::String::New("attachShader"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::attachShaderCallback, v8::Handle<v8::Value>(), attachShader_signature));

  // Custom Signature 'bindAttribLocation'
  const int bindAttribLocation_argc = 3;
  v8::Handle<v8::FunctionTemplate> bindAttribLocation_argv[bindAttribLocation_argc] = { V8WebGLProgram::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> bindAttribLocation_signature = v8::Signature::New(desc, bindAttribLocation_argc, bindAttribLocation_argv);
  proto->Set(v8::String::New("bindAttribLocation"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::bindAttribLocationCallback, v8::Handle<v8::Value>(), bindAttribLocation_signature));

  // Custom Signature 'bindBuffer'
  const int bindBuffer_argc = 2;
  v8::Handle<v8::FunctionTemplate> bindBuffer_argv[bindBuffer_argc] = { v8::Handle<v8::FunctionTemplate>(), V8WebGLBuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> bindBuffer_signature = v8::Signature::New(desc, bindBuffer_argc, bindBuffer_argv);
  proto->Set(v8::String::New("bindBuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::bindBufferCallback, v8::Handle<v8::Value>(), bindBuffer_signature));

  // Custom Signature 'bindFramebuffer'
  const int bindFramebuffer_argc = 2;
  v8::Handle<v8::FunctionTemplate> bindFramebuffer_argv[bindFramebuffer_argc] = { v8::Handle<v8::FunctionTemplate>(), V8WebGLFramebuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> bindFramebuffer_signature = v8::Signature::New(desc, bindFramebuffer_argc, bindFramebuffer_argv);
  proto->Set(v8::String::New("bindFramebuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::bindFramebufferCallback, v8::Handle<v8::Value>(), bindFramebuffer_signature));

  // Custom Signature 'bindRenderbuffer'
  const int bindRenderbuffer_argc = 2;
  v8::Handle<v8::FunctionTemplate> bindRenderbuffer_argv[bindRenderbuffer_argc] = { v8::Handle<v8::FunctionTemplate>(), V8WebGLRenderbuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> bindRenderbuffer_signature = v8::Signature::New(desc, bindRenderbuffer_argc, bindRenderbuffer_argv);
  proto->Set(v8::String::New("bindRenderbuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::bindRenderbufferCallback, v8::Handle<v8::Value>(), bindRenderbuffer_signature));

  // Custom Signature 'bindTexture'
  const int bindTexture_argc = 2;
  v8::Handle<v8::FunctionTemplate> bindTexture_argv[bindTexture_argc] = { v8::Handle<v8::FunctionTemplate>(), V8WebGLTexture::GetRawTemplate() };
  v8::Handle<v8::Signature> bindTexture_signature = v8::Signature::New(desc, bindTexture_argc, bindTexture_argv);
  proto->Set(v8::String::New("bindTexture"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::bindTextureCallback, v8::Handle<v8::Value>(), bindTexture_signature));

  // Custom Signature 'compileShader'
  const int compileShader_argc = 1;
  v8::Handle<v8::FunctionTemplate> compileShader_argv[compileShader_argc] = { V8WebGLShader::GetRawTemplate() };
  v8::Handle<v8::Signature> compileShader_signature = v8::Signature::New(desc, compileShader_argc, compileShader_argv);
  proto->Set(v8::String::New("compileShader"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::compileShaderCallback, v8::Handle<v8::Value>(), compileShader_signature));

  // Custom Signature 'deleteBuffer'
  const int deleteBuffer_argc = 1;
  v8::Handle<v8::FunctionTemplate> deleteBuffer_argv[deleteBuffer_argc] = { V8WebGLBuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> deleteBuffer_signature = v8::Signature::New(desc, deleteBuffer_argc, deleteBuffer_argv);
  proto->Set(v8::String::New("deleteBuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::deleteBufferCallback, v8::Handle<v8::Value>(), deleteBuffer_signature));

  // Custom Signature 'deleteFramebuffer'
  const int deleteFramebuffer_argc = 1;
  v8::Handle<v8::FunctionTemplate> deleteFramebuffer_argv[deleteFramebuffer_argc] = { V8WebGLFramebuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> deleteFramebuffer_signature = v8::Signature::New(desc, deleteFramebuffer_argc, deleteFramebuffer_argv);
  proto->Set(v8::String::New("deleteFramebuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::deleteFramebufferCallback, v8::Handle<v8::Value>(), deleteFramebuffer_signature));

  // Custom Signature 'deleteProgram'
  const int deleteProgram_argc = 1;
  v8::Handle<v8::FunctionTemplate> deleteProgram_argv[deleteProgram_argc] = { V8WebGLProgram::GetRawTemplate() };
  v8::Handle<v8::Signature> deleteProgram_signature = v8::Signature::New(desc, deleteProgram_argc, deleteProgram_argv);
  proto->Set(v8::String::New("deleteProgram"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::deleteProgramCallback, v8::Handle<v8::Value>(), deleteProgram_signature));

  // Custom Signature 'deleteRenderbuffer'
  const int deleteRenderbuffer_argc = 1;
  v8::Handle<v8::FunctionTemplate> deleteRenderbuffer_argv[deleteRenderbuffer_argc] = { V8WebGLRenderbuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> deleteRenderbuffer_signature = v8::Signature::New(desc, deleteRenderbuffer_argc, deleteRenderbuffer_argv);
  proto->Set(v8::String::New("deleteRenderbuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::deleteRenderbufferCallback, v8::Handle<v8::Value>(), deleteRenderbuffer_signature));

  // Custom Signature 'deleteShader'
  const int deleteShader_argc = 1;
  v8::Handle<v8::FunctionTemplate> deleteShader_argv[deleteShader_argc] = { V8WebGLShader::GetRawTemplate() };
  v8::Handle<v8::Signature> deleteShader_signature = v8::Signature::New(desc, deleteShader_argc, deleteShader_argv);
  proto->Set(v8::String::New("deleteShader"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::deleteShaderCallback, v8::Handle<v8::Value>(), deleteShader_signature));

  // Custom Signature 'deleteTexture'
  const int deleteTexture_argc = 1;
  v8::Handle<v8::FunctionTemplate> deleteTexture_argv[deleteTexture_argc] = { V8WebGLTexture::GetRawTemplate() };
  v8::Handle<v8::Signature> deleteTexture_signature = v8::Signature::New(desc, deleteTexture_argc, deleteTexture_argv);
  proto->Set(v8::String::New("deleteTexture"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::deleteTextureCallback, v8::Handle<v8::Value>(), deleteTexture_signature));

  // Custom Signature 'detachShader'
  const int detachShader_argc = 2;
  v8::Handle<v8::FunctionTemplate> detachShader_argv[detachShader_argc] = { V8WebGLProgram::GetRawTemplate(), V8WebGLShader::GetRawTemplate() };
  v8::Handle<v8::Signature> detachShader_signature = v8::Signature::New(desc, detachShader_argc, detachShader_argv);
  proto->Set(v8::String::New("detachShader"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::detachShaderCallback, v8::Handle<v8::Value>(), detachShader_signature));

  // Custom Signature 'framebufferRenderbuffer'
  const int framebufferRenderbuffer_argc = 4;
  v8::Handle<v8::FunctionTemplate> framebufferRenderbuffer_argv[framebufferRenderbuffer_argc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8WebGLRenderbuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> framebufferRenderbuffer_signature = v8::Signature::New(desc, framebufferRenderbuffer_argc, framebufferRenderbuffer_argv);
  proto->Set(v8::String::New("framebufferRenderbuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::framebufferRenderbufferCallback, v8::Handle<v8::Value>(), framebufferRenderbuffer_signature));

  // Custom Signature 'framebufferTexture2D'
  const int framebufferTexture2D_argc = 5;
  v8::Handle<v8::FunctionTemplate> framebufferTexture2D_argv[framebufferTexture2D_argc] = { v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), V8WebGLTexture::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> framebufferTexture2D_signature = v8::Signature::New(desc, framebufferTexture2D_argc, framebufferTexture2D_argv);
  proto->Set(v8::String::New("framebufferTexture2D"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::framebufferTexture2DCallback, v8::Handle<v8::Value>(), framebufferTexture2D_signature));

  // Custom Signature 'getActiveAttrib'
  const int getActiveAttrib_argc = 2;
  v8::Handle<v8::FunctionTemplate> getActiveAttrib_argv[getActiveAttrib_argc] = { V8WebGLProgram::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> getActiveAttrib_signature = v8::Signature::New(desc, getActiveAttrib_argc, getActiveAttrib_argv);
  proto->Set(v8::String::New("getActiveAttrib"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::getActiveAttribCallback, v8::Handle<v8::Value>(), getActiveAttrib_signature));

  // Custom Signature 'getActiveUniform'
  const int getActiveUniform_argc = 2;
  v8::Handle<v8::FunctionTemplate> getActiveUniform_argv[getActiveUniform_argc] = { V8WebGLProgram::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> getActiveUniform_signature = v8::Signature::New(desc, getActiveUniform_argc, getActiveUniform_argv);
  proto->Set(v8::String::New("getActiveUniform"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::getActiveUniformCallback, v8::Handle<v8::Value>(), getActiveUniform_signature));

  // Custom Signature 'getAttribLocation'
  const int getAttribLocation_argc = 2;
  v8::Handle<v8::FunctionTemplate> getAttribLocation_argv[getAttribLocation_argc] = { V8WebGLProgram::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> getAttribLocation_signature = v8::Signature::New(desc, getAttribLocation_argc, getAttribLocation_argv);
  proto->Set(v8::String::New("getAttribLocation"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::getAttribLocationCallback, v8::Handle<v8::Value>(), getAttribLocation_signature));

  // Custom Signature 'getProgramInfoLog'
  const int getProgramInfoLog_argc = 1;
  v8::Handle<v8::FunctionTemplate> getProgramInfoLog_argv[getProgramInfoLog_argc] = { V8WebGLProgram::GetRawTemplate() };
  v8::Handle<v8::Signature> getProgramInfoLog_signature = v8::Signature::New(desc, getProgramInfoLog_argc, getProgramInfoLog_argv);
  proto->Set(v8::String::New("getProgramInfoLog"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::getProgramInfoLogCallback, v8::Handle<v8::Value>(), getProgramInfoLog_signature));

  // Custom Signature 'getShaderInfoLog'
  const int getShaderInfoLog_argc = 1;
  v8::Handle<v8::FunctionTemplate> getShaderInfoLog_argv[getShaderInfoLog_argc] = { V8WebGLShader::GetRawTemplate() };
  v8::Handle<v8::Signature> getShaderInfoLog_signature = v8::Signature::New(desc, getShaderInfoLog_argc, getShaderInfoLog_argv);
  proto->Set(v8::String::New("getShaderInfoLog"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::getShaderInfoLogCallback, v8::Handle<v8::Value>(), getShaderInfoLog_signature));

  // Custom Signature 'getShaderSource'
  const int getShaderSource_argc = 1;
  v8::Handle<v8::FunctionTemplate> getShaderSource_argv[getShaderSource_argc] = { V8WebGLShader::GetRawTemplate() };
  v8::Handle<v8::Signature> getShaderSource_signature = v8::Signature::New(desc, getShaderSource_argc, getShaderSource_argv);
  proto->Set(v8::String::New("getShaderSource"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::getShaderSourceCallback, v8::Handle<v8::Value>(), getShaderSource_signature));

  // Custom Signature 'getUniformLocation'
  const int getUniformLocation_argc = 2;
  v8::Handle<v8::FunctionTemplate> getUniformLocation_argv[getUniformLocation_argc] = { V8WebGLProgram::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> getUniformLocation_signature = v8::Signature::New(desc, getUniformLocation_argc, getUniformLocation_argv);
  proto->Set(v8::String::New("getUniformLocation"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::getUniformLocationCallback, v8::Handle<v8::Value>(), getUniformLocation_signature));

  // Custom Signature 'isBuffer'
  const int isBuffer_argc = 1;
  v8::Handle<v8::FunctionTemplate> isBuffer_argv[isBuffer_argc] = { V8WebGLBuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> isBuffer_signature = v8::Signature::New(desc, isBuffer_argc, isBuffer_argv);
  proto->Set(v8::String::New("isBuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::isBufferCallback, v8::Handle<v8::Value>(), isBuffer_signature));

  // Custom Signature 'isFramebuffer'
  const int isFramebuffer_argc = 1;
  v8::Handle<v8::FunctionTemplate> isFramebuffer_argv[isFramebuffer_argc] = { V8WebGLFramebuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> isFramebuffer_signature = v8::Signature::New(desc, isFramebuffer_argc, isFramebuffer_argv);
  proto->Set(v8::String::New("isFramebuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::isFramebufferCallback, v8::Handle<v8::Value>(), isFramebuffer_signature));

  // Custom Signature 'isProgram'
  const int isProgram_argc = 1;
  v8::Handle<v8::FunctionTemplate> isProgram_argv[isProgram_argc] = { V8WebGLProgram::GetRawTemplate() };
  v8::Handle<v8::Signature> isProgram_signature = v8::Signature::New(desc, isProgram_argc, isProgram_argv);
  proto->Set(v8::String::New("isProgram"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::isProgramCallback, v8::Handle<v8::Value>(), isProgram_signature));

  // Custom Signature 'isRenderbuffer'
  const int isRenderbuffer_argc = 1;
  v8::Handle<v8::FunctionTemplate> isRenderbuffer_argv[isRenderbuffer_argc] = { V8WebGLRenderbuffer::GetRawTemplate() };
  v8::Handle<v8::Signature> isRenderbuffer_signature = v8::Signature::New(desc, isRenderbuffer_argc, isRenderbuffer_argv);
  proto->Set(v8::String::New("isRenderbuffer"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::isRenderbufferCallback, v8::Handle<v8::Value>(), isRenderbuffer_signature));

  // Custom Signature 'isShader'
  const int isShader_argc = 1;
  v8::Handle<v8::FunctionTemplate> isShader_argv[isShader_argc] = { V8WebGLShader::GetRawTemplate() };
  v8::Handle<v8::Signature> isShader_signature = v8::Signature::New(desc, isShader_argc, isShader_argv);
  proto->Set(v8::String::New("isShader"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::isShaderCallback, v8::Handle<v8::Value>(), isShader_signature));

  // Custom Signature 'isTexture'
  const int isTexture_argc = 1;
  v8::Handle<v8::FunctionTemplate> isTexture_argv[isTexture_argc] = { V8WebGLTexture::GetRawTemplate() };
  v8::Handle<v8::Signature> isTexture_signature = v8::Signature::New(desc, isTexture_argc, isTexture_argv);
  proto->Set(v8::String::New("isTexture"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::isTextureCallback, v8::Handle<v8::Value>(), isTexture_signature));

  // Custom Signature 'linkProgram'
  const int linkProgram_argc = 1;
  v8::Handle<v8::FunctionTemplate> linkProgram_argv[linkProgram_argc] = { V8WebGLProgram::GetRawTemplate() };
  v8::Handle<v8::Signature> linkProgram_signature = v8::Signature::New(desc, linkProgram_argc, linkProgram_argv);
  proto->Set(v8::String::New("linkProgram"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::linkProgramCallback, v8::Handle<v8::Value>(), linkProgram_signature));

  // Custom Signature 'shaderSource'
  const int shaderSource_argc = 2;
  v8::Handle<v8::FunctionTemplate> shaderSource_argv[shaderSource_argc] = { V8WebGLShader::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> shaderSource_signature = v8::Signature::New(desc, shaderSource_argc, shaderSource_argv);
  proto->Set(v8::String::New("shaderSource"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::shaderSourceCallback, v8::Handle<v8::Value>(), shaderSource_signature));

  // Custom Signature 'uniform1f'
  const int uniform1f_argc = 2;
  v8::Handle<v8::FunctionTemplate> uniform1f_argv[uniform1f_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform1f_signature = v8::Signature::New(desc, uniform1f_argc, uniform1f_argv);
  proto->Set(v8::String::New("uniform1f"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform1fCallback, v8::Handle<v8::Value>(), uniform1f_signature));

  // Custom Signature 'uniform1i'
  const int uniform1i_argc = 2;
  v8::Handle<v8::FunctionTemplate> uniform1i_argv[uniform1i_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform1i_signature = v8::Signature::New(desc, uniform1i_argc, uniform1i_argv);
  proto->Set(v8::String::New("uniform1i"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform1iCallback, v8::Handle<v8::Value>(), uniform1i_signature));

  // Custom Signature 'uniform2f'
  const int uniform2f_argc = 3;
  v8::Handle<v8::FunctionTemplate> uniform2f_argv[uniform2f_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform2f_signature = v8::Signature::New(desc, uniform2f_argc, uniform2f_argv);
  proto->Set(v8::String::New("uniform2f"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform2fCallback, v8::Handle<v8::Value>(), uniform2f_signature));

  // Custom Signature 'uniform2i'
  const int uniform2i_argc = 3;
  v8::Handle<v8::FunctionTemplate> uniform2i_argv[uniform2i_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform2i_signature = v8::Signature::New(desc, uniform2i_argc, uniform2i_argv);
  proto->Set(v8::String::New("uniform2i"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform2iCallback, v8::Handle<v8::Value>(), uniform2i_signature));

  // Custom Signature 'uniform3f'
  const int uniform3f_argc = 4;
  v8::Handle<v8::FunctionTemplate> uniform3f_argv[uniform3f_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform3f_signature = v8::Signature::New(desc, uniform3f_argc, uniform3f_argv);
  proto->Set(v8::String::New("uniform3f"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform3fCallback, v8::Handle<v8::Value>(), uniform3f_signature));

  // Custom Signature 'uniform3i'
  const int uniform3i_argc = 4;
  v8::Handle<v8::FunctionTemplate> uniform3i_argv[uniform3i_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform3i_signature = v8::Signature::New(desc, uniform3i_argc, uniform3i_argv);
  proto->Set(v8::String::New("uniform3i"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform3iCallback, v8::Handle<v8::Value>(), uniform3i_signature));

  // Custom Signature 'uniform4f'
  const int uniform4f_argc = 5;
  v8::Handle<v8::FunctionTemplate> uniform4f_argv[uniform4f_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform4f_signature = v8::Signature::New(desc, uniform4f_argc, uniform4f_argv);
  proto->Set(v8::String::New("uniform4f"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform4fCallback, v8::Handle<v8::Value>(), uniform4f_signature));

  // Custom Signature 'uniform4i'
  const int uniform4i_argc = 5;
  v8::Handle<v8::FunctionTemplate> uniform4i_argv[uniform4i_argc] = { V8WebGLUniformLocation::GetRawTemplate(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>(), v8::Handle<v8::FunctionTemplate>() };
  v8::Handle<v8::Signature> uniform4i_signature = v8::Signature::New(desc, uniform4i_argc, uniform4i_argv);
  proto->Set(v8::String::New("uniform4i"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::uniform4iCallback, v8::Handle<v8::Value>(), uniform4i_signature));

  // Custom Signature 'useProgram'
  const int useProgram_argc = 1;
  v8::Handle<v8::FunctionTemplate> useProgram_argv[useProgram_argc] = { V8WebGLProgram::GetRawTemplate() };
  v8::Handle<v8::Signature> useProgram_signature = v8::Signature::New(desc, useProgram_argc, useProgram_argv);
  proto->Set(v8::String::New("useProgram"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::useProgramCallback, v8::Handle<v8::Value>(), useProgram_signature));

  // Custom Signature 'validateProgram'
  const int validateProgram_argc = 1;
  v8::Handle<v8::FunctionTemplate> validateProgram_argv[validateProgram_argc] = { V8WebGLProgram::GetRawTemplate() };
  v8::Handle<v8::Signature> validateProgram_signature = v8::Signature::New(desc, validateProgram_argc, validateProgram_argv);
  proto->Set(v8::String::New("validateProgram"), v8::FunctionTemplate::New(WebGLRenderingContextInternal::validateProgramCallback, v8::Handle<v8::Value>(), validateProgram_signature));
  batchConfigureConstants(desc, proto, WebGLRenderingContext_consts, sizeof(WebGLRenderingContext_consts)/sizeof(*WebGLRenderingContext_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLRenderingContext::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLRenderingContext_raw_cache_ = createRawTemplate();
  return V8WebGLRenderingContext_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WebGLRenderingContext::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebGLRenderingContext_cache_ = ConfigureV8WebGLRenderingContextTemplate(GetRawTemplate());
  return V8WebGLRenderingContext_cache_;
}

WebGLRenderingContext* V8WebGLRenderingContext::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WebGLRenderingContext*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WebGLRenderingContext::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebGLRenderingContext::wrap(WebGLRenderingContext* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WEBGLRENDERINGCONTEXT, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WebGLRenderingContext > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(WebGLRenderingContext* impl) {
  if (!impl)
    return v8::Null();
  return V8WebGLRenderingContext::wrap(impl);
}
} // namespace WebCore

#endif // ENABLE(3D_CANVAS)

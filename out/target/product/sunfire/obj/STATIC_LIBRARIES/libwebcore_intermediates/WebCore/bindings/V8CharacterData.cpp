/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "ExceptionCode.h"
#include "V8CharacterData.h"
#include "V8Node.h"

namespace WebCore {
namespace CharacterDataInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> dataAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CharacterData.data._get");
    CharacterData* imp = V8CharacterData::toNative(info.Holder());
    return v8String(imp->data());
  }

  static void dataAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CharacterData.data._set");
    CharacterData* imp = V8CharacterData::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    ExceptionCode ec = 0;
    imp->setData(v, ec);
    if (UNLIKELY(ec))
        V8Proxy::setDOMException(ec);
    return;
  }

  static v8::Handle<v8::Value> lengthAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.CharacterData.length._get");
    CharacterData* imp = V8CharacterData::toNative(info.Holder());
    return v8::Integer::NewFromUnsigned(imp->length());
  }

  static v8::Handle<v8::Value> substringDataCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CharacterData.substringData");
    CharacterData* imp = V8CharacterData::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int offset = toInt32(args[0]);
    if (UNLIKELY(offset < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    int length = toInt32(args[1]);
    if (UNLIKELY(length < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    String result = imp->substringData(offset, length, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8StringOrNull(result);
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> appendDataCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CharacterData.appendData");
    CharacterData* imp = V8CharacterData::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    V8Parameter<> data = args[0];
    imp->appendData(data, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> insertDataCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CharacterData.insertData");
    CharacterData* imp = V8CharacterData::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int offset = toInt32(args[0]);
    if (UNLIKELY(offset < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    V8Parameter<> data = args[1];
    imp->insertData(offset, data, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> deleteDataCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CharacterData.deleteData");
    CharacterData* imp = V8CharacterData::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int offset = toInt32(args[0]);
    if (UNLIKELY(offset < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    int length = toInt32(args[1]);
    if (UNLIKELY(length < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    imp->deleteData(offset, length, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

  static v8::Handle<v8::Value> replaceDataCallback(const v8::Arguments& args) {
    INC_STATS("DOM.CharacterData.replaceData");
    CharacterData* imp = V8CharacterData::toNative(args.Holder());
    ExceptionCode ec = 0;
    {
    int offset = toInt32(args[0]);
    if (UNLIKELY(offset < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    int length = toInt32(args[1]);
    if (UNLIKELY(length < 0)) {
      ec = INDEX_SIZE_ERR;
      goto fail;
    }
    V8Parameter<> data = args[2];
    imp->replaceData(offset, length, data, ec);
    if (UNLIKELY(ec)) goto fail;
    return v8::Handle<v8::Value>();
    }
  fail:
    V8Proxy::setDOMException(ec);
    return v8::Handle<v8::Value>();
  }

} // namespace CharacterDataInternal

static const BatchedAttribute CharacterData_attrs[] = {
    {
        // Attribute 'data' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "data",
        CharacterDataInternal::dataAttrGetter,
        CharacterDataInternal::dataAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'length' (Type: 'readonly attribute' ExtAttr: '')
        "length",
        CharacterDataInternal::lengthAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedCallback CharacterData_callbacks[] = {
  {"substringData", CharacterDataInternal::substringDataCallback},
  {"appendData", CharacterDataInternal::appendDataCallback},
  {"insertData", CharacterDataInternal::insertDataCallback},
  {"deleteData", CharacterDataInternal::deleteDataCallback},
  {"replaceData", CharacterDataInternal::replaceDataCallback},
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8CharacterDataTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "CharacterData",
      V8Node::GetTemplate(), V8CharacterData::internalFieldCount,
      CharacterData_attrs, sizeof(CharacterData_attrs)/sizeof(*CharacterData_attrs),
      CharacterData_callbacks, sizeof(CharacterData_callbacks)/sizeof(*CharacterData_callbacks));
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8CharacterData::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CharacterData_raw_cache_ = createRawTemplate();
  return V8CharacterData_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8CharacterData::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8CharacterData_cache_ = ConfigureV8CharacterDataTemplate(GetRawTemplate());
  return V8CharacterData_cache_;
}

CharacterData* V8CharacterData::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<CharacterData*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8CharacterData::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8CharacterData::wrap(CharacterData* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::CHARACTERDATA, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<CharacterData > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(CharacterData* impl) {
  if (!impl)
    return v8::Null();
  return V8CharacterData::wrap(impl);
}
} // namespace WebCore

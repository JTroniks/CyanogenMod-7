/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "V8CSSValueList.h"
#include "V8WebKitCSSTransformValue.h"

namespace WebCore {
namespace WebKitCSSTransformValueInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> operationTypeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.WebKitCSSTransformValue.operationType._get");
    WebKitCSSTransformValue* imp = V8WebKitCSSTransformValue::toNative(info.Holder());
    return v8::Integer::New(imp->operationType());
  }

} // namespace WebKitCSSTransformValueInternal

static const BatchedAttribute WebKitCSSTransformValue_attrs[] = {
    {
        // Attribute 'operationType' (Type: 'readonly attribute' ExtAttr: '')
        "operationType",
        WebKitCSSTransformValueInternal::operationTypeAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static const BatchedConstant WebKitCSSTransformValue_consts[] = {
  { "CSS_TRANSLATE", static_cast<signed int>(1) },
  { "CSS_TRANSLATEX", static_cast<signed int>(2) },
  { "CSS_TRANSLATEY", static_cast<signed int>(3) },
  { "CSS_ROTATE", static_cast<signed int>(4) },
  { "CSS_SCALE", static_cast<signed int>(5) },
  { "CSS_SCALEX", static_cast<signed int>(6) },
  { "CSS_SCALEY", static_cast<signed int>(7) },
  { "CSS_SKEW", static_cast<signed int>(8) },
  { "CSS_SKEWX", static_cast<signed int>(9) },
  { "CSS_SKEWY", static_cast<signed int>(10) },
  { "CSS_MATRIX", static_cast<signed int>(11) },
  { "CSS_TRANSLATEZ", static_cast<signed int>(12) },
  { "CSS_TRANSLATE3D", static_cast<signed int>(13) },
  { "CSS_ROTATEX", static_cast<signed int>(14) },
  { "CSS_ROTATEY", static_cast<signed int>(15) },
  { "CSS_ROTATEZ", static_cast<signed int>(16) },
  { "CSS_ROTATE3D", static_cast<signed int>(17) },
  { "CSS_SCALEZ", static_cast<signed int>(18) },
  { "CSS_SCALE3D", static_cast<signed int>(19) },
  { "CSS_PERSPECTIVE", static_cast<signed int>(20) },
  { "CSS_MATRIX3D", static_cast<signed int>(21) },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8WebKitCSSTransformValueTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "WebKitCSSTransformValue",
      V8CSSValueList::GetTemplate(), V8WebKitCSSTransformValue::internalFieldCount,
      WebKitCSSTransformValue_attrs, sizeof(WebKitCSSTransformValue_attrs)/sizeof(*WebKitCSSTransformValue_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  batchConfigureConstants(desc, proto, WebKitCSSTransformValue_consts, sizeof(WebKitCSSTransformValue_consts)/sizeof(*WebKitCSSTransformValue_consts));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8WebKitCSSTransformValue::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebKitCSSTransformValue_raw_cache_ = createRawTemplate();
  return V8WebKitCSSTransformValue_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8WebKitCSSTransformValue::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8WebKitCSSTransformValue_cache_ = ConfigureV8WebKitCSSTransformValueTemplate(GetRawTemplate());
  return V8WebKitCSSTransformValue_cache_;
}

WebKitCSSTransformValue* V8WebKitCSSTransformValue::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<WebKitCSSTransformValue*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8WebKitCSSTransformValue::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8WebKitCSSTransformValue::wrap(WebKitCSSTransformValue* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  wrapper = getDOMObjectMap().get(impl);
  if (!wrapper.IsEmpty())
    return wrapper;
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::WEBKITCSSTRANSFORMVALUE, impl);
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMObjectMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<WebKitCSSTransformValue > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(WebKitCSSTransformValue* impl) {
  if (!impl)
    return v8::Null();
  return V8WebKitCSSTransformValue::wrap(impl);
}
} // namespace WebCore

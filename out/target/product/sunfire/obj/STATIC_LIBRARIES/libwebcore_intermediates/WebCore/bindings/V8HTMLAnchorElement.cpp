/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#include "config.h"
#include "RuntimeEnabledFeatures.h"
#include "V8Proxy.h"
#include "V8Binding.h"
#include "V8BindingState.h"
#include "V8DOMWrapper.h"
#include "V8IsolatedContext.h"

#undef LOG

#include "HTMLNames.h"
#include "V8HTMLAnchorElement.h"
#include "V8HTMLElement.h"

namespace WebCore {
namespace HTMLAnchorElementInternal {

template <typename T> void V8_USE(T) { }

  static v8::Handle<v8::Value> accessKeyAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.accessKey._get");
    return getElementStringAttr(info, HTMLNames::accesskeyAttr);
  }

  static void accessKeyAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.accessKey._set");
    setElementStringAttr(info, HTMLNames::accesskeyAttr, value);
  }

  static v8::Handle<v8::Value> charsetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.charset._get");
    return getElementStringAttr(info, HTMLNames::charsetAttr);
  }

  static void charsetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.charset._set");
    setElementStringAttr(info, HTMLNames::charsetAttr, value);
  }

  static v8::Handle<v8::Value> coordsAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.coords._get");
    return getElementStringAttr(info, HTMLNames::coordsAttr);
  }

  static void coordsAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.coords._set");
    setElementStringAttr(info, HTMLNames::coordsAttr, value);
  }

  static v8::Handle<v8::Value> hrefAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.href._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->getURLAttribute(HTMLNames::hrefAttr));
  }

  static void hrefAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.href._set");
    setElementStringAttr(info, HTMLNames::hrefAttr, value);
  }

  static v8::Handle<v8::Value> hreflangAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.hreflang._get");
    return getElementStringAttr(info, HTMLNames::hreflangAttr);
  }

  static void hreflangAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.hreflang._set");
    setElementStringAttr(info, HTMLNames::hreflangAttr, value);
  }

  static v8::Handle<v8::Value> nameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.name._get");
    return getElementStringAttr(info, HTMLNames::nameAttr);
  }

  static void nameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.name._set");
    setElementStringAttr(info, HTMLNames::nameAttr, value);
  }

  static v8::Handle<v8::Value> relAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.rel._get");
    return getElementStringAttr(info, HTMLNames::relAttr);
  }

  static void relAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.rel._set");
    setElementStringAttr(info, HTMLNames::relAttr, value);
  }

  static v8::Handle<v8::Value> revAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.rev._get");
    return getElementStringAttr(info, HTMLNames::revAttr);
  }

  static void revAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.rev._set");
    setElementStringAttr(info, HTMLNames::revAttr, value);
  }

  static v8::Handle<v8::Value> shapeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.shape._get");
    return getElementStringAttr(info, HTMLNames::shapeAttr);
  }

  static void shapeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.shape._set");
    setElementStringAttr(info, HTMLNames::shapeAttr, value);
  }

  static v8::Handle<v8::Value> targetAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.target._get");
    return getElementStringAttr(info, HTMLNames::targetAttr);
  }

  static void targetAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.target._set");
    setElementStringAttr(info, HTMLNames::targetAttr, value);
  }

  static v8::Handle<v8::Value> typeAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.type._get");
    return getElementStringAttr(info, HTMLNames::typeAttr);
  }

  static void typeAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.type._set");
    setElementStringAttr(info, HTMLNames::typeAttr, value);
  }

  static v8::Handle<v8::Value> hashAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.hash._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->hash());
  }

  static void hashAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.hash._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setHash(v);
    return;
  }

  static v8::Handle<v8::Value> hostAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.host._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->host());
  }

  static void hostAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.host._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setHost(v);
    return;
  }

  static v8::Handle<v8::Value> hostnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.hostname._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->hostname());
  }

  static void hostnameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.hostname._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setHostname(v);
    return;
  }

  static v8::Handle<v8::Value> pathnameAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.pathname._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->pathname());
  }

  static void pathnameAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.pathname._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setPathname(v);
    return;
  }

  static v8::Handle<v8::Value> portAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.port._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->port());
  }

  static void portAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.port._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setPort(v);
    return;
  }

  static v8::Handle<v8::Value> protocolAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.protocol._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->protocol());
  }

  static void protocolAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.protocol._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setProtocol(v);
    return;
  }

  static v8::Handle<v8::Value> searchAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.search._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->search());
  }

  static void searchAttrSetter(v8::Local<v8::String> name, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.search._set");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    V8Parameter<WithNullCheck> v = value;
    imp->setSearch(v);
    return;
  }

  static v8::Handle<v8::Value> textAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) {
    INC_STATS("DOM.HTMLAnchorElement.text._get");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(info.Holder());
    return v8String(imp->text());
  }

  static v8::Handle<v8::Value> toStringCallback(const v8::Arguments& args) {
    INC_STATS("DOM.HTMLAnchorElement.toString");
    HTMLAnchorElement* imp = V8HTMLAnchorElement::toNative(args.Holder());
    return v8String(imp->toString());
  }

} // namespace HTMLAnchorElementInternal

static const BatchedAttribute HTMLAnchorElement_attrs[] = {
    {
        // Attribute 'accessKey' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "accessKey",
        HTMLAnchorElementInternal::accessKeyAttrGetter,
        HTMLAnchorElementInternal::accessKeyAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'charset' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "charset",
        HTMLAnchorElementInternal::charsetAttrGetter,
        HTMLAnchorElementInternal::charsetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'coords' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "coords",
        HTMLAnchorElementInternal::coordsAttrGetter,
        HTMLAnchorElementInternal::coordsAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'href' (Type: 'attribute' ExtAttr: 'ReflectURL ConvertNullToNullString')
        "href",
        HTMLAnchorElementInternal::hrefAttrGetter,
        HTMLAnchorElementInternal::hrefAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'hreflang' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "hreflang",
        HTMLAnchorElementInternal::hreflangAttrGetter,
        HTMLAnchorElementInternal::hreflangAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'name' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "name",
        HTMLAnchorElementInternal::nameAttrGetter,
        HTMLAnchorElementInternal::nameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rel' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "rel",
        HTMLAnchorElementInternal::relAttrGetter,
        HTMLAnchorElementInternal::relAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'rev' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "rev",
        HTMLAnchorElementInternal::revAttrGetter,
        HTMLAnchorElementInternal::revAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'shape' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "shape",
        HTMLAnchorElementInternal::shapeAttrGetter,
        HTMLAnchorElementInternal::shapeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'target' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "target",
        HTMLAnchorElementInternal::targetAttrGetter,
        HTMLAnchorElementInternal::targetAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'type' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString Reflect')
        "type",
        HTMLAnchorElementInternal::typeAttrGetter,
        HTMLAnchorElementInternal::typeAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'hash' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "hash",
        HTMLAnchorElementInternal::hashAttrGetter,
        HTMLAnchorElementInternal::hashAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'host' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "host",
        HTMLAnchorElementInternal::hostAttrGetter,
        HTMLAnchorElementInternal::hostAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'hostname' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "hostname",
        HTMLAnchorElementInternal::hostnameAttrGetter,
        HTMLAnchorElementInternal::hostnameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'pathname' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "pathname",
        HTMLAnchorElementInternal::pathnameAttrGetter,
        HTMLAnchorElementInternal::pathnameAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'port' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "port",
        HTMLAnchorElementInternal::portAttrGetter,
        HTMLAnchorElementInternal::portAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'protocol' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "protocol",
        HTMLAnchorElementInternal::protocolAttrGetter,
        HTMLAnchorElementInternal::protocolAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'search' (Type: 'attribute' ExtAttr: 'ConvertNullToNullString')
        "search",
        HTMLAnchorElementInternal::searchAttrGetter,
        HTMLAnchorElementInternal::searchAttrSetter,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
    {
        // Attribute 'text' (Type: 'readonly attribute' ExtAttr: '')
        "text",
        HTMLAnchorElementInternal::textAttrGetter,
        0,
        V8ClassIndex::INVALID_CLASS_INDEX /* no data */,
        static_cast<v8::AccessControl>(v8::DEFAULT),
        static_cast<v8::PropertyAttribute>(v8::None),
        0 /* on instance */
    },
};
static v8::Persistent<v8::FunctionTemplate> ConfigureV8HTMLAnchorElementTemplate(v8::Persistent<v8::FunctionTemplate> desc) {
  v8::Local<v8::Signature> default_signature = configureTemplate(desc, "HTMLAnchorElement",
      V8HTMLElement::GetTemplate(), V8HTMLAnchorElement::internalFieldCount,
      HTMLAnchorElement_attrs, sizeof(HTMLAnchorElement_attrs)/sizeof(*HTMLAnchorElement_attrs),
      NULL, 0);
  v8::Local<v8::ObjectTemplate> instance = desc->InstanceTemplate();
  v8::Local<v8::ObjectTemplate> proto = desc->PrototypeTemplate();
  
  proto->Set(v8::String::New("toString"), v8::FunctionTemplate::New(HTMLAnchorElementInternal::toStringCallback, v8::Handle<v8::Value>(), default_signature), static_cast<v8::PropertyAttribute>(v8::DontDelete|v8::DontEnum));

  // Custom toString template
  desc->Set(getToStringName(), getToStringTemplate());
  return desc;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLAnchorElement::GetRawTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLAnchorElement_raw_cache_ = createRawTemplate();
  return V8HTMLAnchorElement_raw_cache_;
}

v8::Persistent<v8::FunctionTemplate> V8HTMLAnchorElement::GetTemplate() {
  static v8::Persistent<v8::FunctionTemplate> V8HTMLAnchorElement_cache_ = ConfigureV8HTMLAnchorElementTemplate(GetRawTemplate());
  return V8HTMLAnchorElement_cache_;
}

HTMLAnchorElement* V8HTMLAnchorElement::toNative(v8::Handle<v8::Object> object) {
  return reinterpret_cast<HTMLAnchorElement*>(object->GetPointerFromInternalField(v8DOMWrapperObjectIndex));
}

bool V8HTMLAnchorElement::HasInstance(v8::Handle<v8::Value> value) {
  return GetRawTemplate()->HasInstance(value);
}


v8::Handle<v8::Object> V8HTMLAnchorElement::wrap(HTMLAnchorElement* impl) {
  v8::Handle<v8::Object> wrapper;
  V8Proxy* proxy = 0;
  if (impl->document()) {
    proxy = V8Proxy::retrieve(impl->document()->frame());
    if (proxy && static_cast<Node*>(impl->document()) == static_cast<Node*>(impl))
      proxy->windowShell()->initContextIfNeeded();
  }

  wrapper = V8DOMWrapper::getWrapper(impl);
  if (!wrapper.IsEmpty())
    return wrapper;

  v8::Handle<v8::Context> context;
  if (proxy)
    context = proxy->context();

  // Enter the node's context and create the wrapper in that context.
  if (!context.IsEmpty())
    context->Enter();
  wrapper = V8DOMWrapper::instantiateV8Object(proxy, V8ClassIndex::HTMLANCHORELEMENT, impl);
  // Exit the node's context if it was entered.
  if (!context.IsEmpty())
    context->Exit();
  if (wrapper.IsEmpty())
    return wrapper;

  impl->ref();
  getDOMNodeMap().set(impl, v8::Persistent<v8::Object>::New(wrapper));
  return wrapper;
}

v8::Handle<v8::Value> toV8(PassRefPtr<HTMLAnchorElement > impl) {
  return toV8(impl.get());
}

v8::Handle<v8::Value> toV8(HTMLAnchorElement* impl) {
  if (!impl)
    return v8::Null();
  return V8HTMLAnchorElement::wrap(impl);
}
} // namespace WebCore
